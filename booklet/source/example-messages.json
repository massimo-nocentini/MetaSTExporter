{	"classes" : {		"ValueLink" : {			"hash" : 1174016,			"definition" : "Link subclass: #ValueLink\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Links'",			"comment" : [				"A ValueLink is a Link containing a Value.",				"Adding an object to a LinkedList which is not a Link will create a ValueLink containing that object.",				"",				"",				"value - The object this link points to."			],			"category" : "Collections-Support-Links"		},		"HEPragma" : {			"hash" : 995840,			"definition" : "HEExportedLiteral subclass: #HEPragma\r\tinstanceVariableNames: 'method arguments keyword'\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I represent a Pragma.",				"I am stored as a methodLiteral, a keyword and an array of  arguments.",				"The literals are exported as HEAbstractLiteral.",				"",				"The method is a HEMethodLiteral",				"The keyword is a HESymbol",				"and the arguments si a HEArray"			],			"category" : "Hermes-Model"		},		"BlockClosure" : {			"hash" : 9472,			"definition" : "Object variableSubclass: #BlockClosure\r\tinstanceVariableNames: 'outerContext startpc numArgs'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Methods'",			"comment" : [				"I contain a sequence of operations. I am defined by Smalltalk expressions inside square brackets. I permit to defer the enclosed operations until I execute a variant of #value. I can have my own arguments and temporaries as a regular method, but I am also able to use external variables: my enclosing method or block temporaries, arguments and receiver.",				"",				"examples :",				"[ 1 + 2 ] value",				"[ :arg | ",				"\t| temp | ",				"\ttemp := arg. ",				"\ttemp ] value: 5",				"[ ^ 5 ] value",				"",				"My return value corresponds to my final expression. A non local return (^) has the same effect as if I did not exist: it returns from my enclosing method, even if I'm nested in other blocks. ",				"",				"Implementation:",				"",				"Instance variables:",				"\touterContext <Context|nil> context that defined me",				"\tstartpc: <SmallInteger> (pc = program counter) offset of my first bytecode instruction in the compiledMethod bytecode  ",				"\tnumArgs: <SmallInteger> my number of arguments",				"",				"I am created at runtime through a special bytecode:",				"closureNumCopied: x numArgs: y bytes z1 to z2",				"On creation, the currently executed context is set to my outerContext, z1 is set as my startpc and y is set as my numArgs. After my creation, the current execution flow jumps to my last bytecode, z2, to skip the execution of my bytecode which is deferred until I execute a variant of #value.",				"",				"I am executed when I receive a variant of the message value. This message creates a new context, a block context <MethodContext>, which reference me in its variable closureOrNil. This new context executes my bytecode, which correspond to a subset of the bytecode of my enclosing method, starting at startpc and ending in blockReturn/return bytecode.",				"",				"Accessing variables of the my enclosing context is different depending on variables because of various optimizations:",				"- self: I access the receiver of my enclosing method by accessing my context's receiver, which is always set to the enclosing method receiver.",				"- copied variables: If I read a variable from an outerContext but I don't write into it and the variable is not modified after the BlockClosure creation, then the variable is copied in the blockClosure to be more efficient. ",				"- full variable: If I access and edit a variable from an outerContext, then the variable is stored in an external heap allocated array (named tempVector). The tempVector is known by the method and the block so they can both read and write these variables.",				"",				"Optimized block closures: ",				"Common blocks (2/3 of the blocks) are optimized directly in the compiler and have special behaviors. These blocks are the arguments/receiver of control structures: #ifNil:, #ifNotNil:, #ifTrue:, #ifFalse:, #whileTrue:, #whileFalse:, #to:do:, #to:by:do: ."			],			"category" : "Kernel-Methods"		},		"RBLiteralArrayNode class" : {			"hash" : 1160192,			"definition" : "RBLiteralArrayNode class\r\tinstanceVariableNames: ''",			"comment" : [				"An RBLiteralArrayNode is an AST node that represents literal arrays #(1 2 3) and literal byte arrays #[ 1 2 3 ].",				"",				"Instance Variables",				"\tcontents: <Array of: RBLiteralNode> literal nodes of the array",				"\tisByteArray: <Boolean> if the receiver is a literal byte array"			],			"category" : "AST-Core-Nodes"		},		"HEClassTrait" : {			"hash" : 985856,			"definition" : "HESymbol subclass: #HEClassTrait\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I represent a ClassTrait.",				"I am stored as a symbol.",				"",				"When serialized I get the name of the base trait.",				"When deserialized I find the classTrait in the target environment"			],			"category" : "Hermes-Model"		},		"PointerEyeElement" : {			"hash" : 3016448,			"definition" : "AbstractEyeElement subclass: #PointerEyeElement\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'EyeInspector-Element'",			"comment" : [				"I am an element that wraps host and value in a PointerWrapper. ",				"",				"Following back pointers stops at the wrapper, not showing the framwork related references e.g. of the tree."			],			"category" : "EyeInspector-Element"		},		"Association" : {			"hash" : 790784,			"definition" : "LookupKey subclass: #Association\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Associations'",			"comment" : [				"I represent a pair of associated objects--a key and a value. My instances can serve as entries in a dictionary.",				"",				"",				"Implementation notes: ",				"Note that hash is not redefined even if the = was redefined because Association>>hash may cause extreme slowdowns in compiling Unicode methods. Association>>hash does not need to hash the value; it's slow and useless.",				""			],			"category" : "Collections-Support-Associations"		},		"LGitExternalEnumerationUInt32" : {			"hash" : 2397440,			"definition" : "Object subclass: #LGitExternalEnumerationUInt32\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'LibGit-Core-Abstracts'",			"comment" : [				"See the comment in NBExternalEnumeration. I am a copy of NBExternalEnumeration with the exception that I inherit from Object, not from SharedPool."			],			"category" : "LibGit-Core-Abstracts"		},		"SpProgressBarFixed" : {			"hash" : 992256,			"definition" : "SpProgressBarState << #SpProgressBarFixed\r\tuses: SpTObservable;\r\tslots: { #value => SpObservableSlot };\r\ttag: 'Utils';\r\tpackage: 'Spec2-Core'",			"comment" : [				"Description",				"--------------------",				"",				"I am a state of a ProgressBarPresenter managing the behavior of a fixed progress bar. I will have one value (between 0 and 1) and the progress will not change.",				"",				"Examples",				"--------------------",				"",				"\t ProgressBarFixed value: 0.1",				" ",				"Internal Representation and Key Implementation Points.",				"--------------------",				"",				"    Instance Variables",				"\tvalueHolder:\t\t<aValueHolder> \t\tValue holder keeping the value I should be fixed on."			],			"category" : "Spec2-Core-Utils"		},		"SpSliderMark" : {			"hash" : 996864,			"definition" : "Object subclass: #SpSliderMark\r\tinstanceVariableNames: 'value text'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Core-Widgets'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\ttext:\t\t<Object>",				"\tvalue:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Spec2-Core-Widgets"		},		"FFILiteralArgument" : {			"hash" : 520704,			"definition" : "FFIFunctionArgumentLoader subclass: #FFILiteralArgument\r\tinstanceVariableNames: 'value type'\r\tclassVariableNames: ''\r\tpackage: 'UnifiedFFI-Arguments'",			"comment" : [				"I implement the push strategy for literal objects specified in a callout."			],			"category" : "UnifiedFFI-Arguments"		},		"SpMorphicSliderAdapter" : {			"hash" : 2761216,			"definition" : "SpAbstractMorphicAdapter subclass: #SpMorphicSliderAdapter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Adapters-Morphic-Base'",			"comment" : [				"I am the adapter used to bridget a SliderPresenter and a PluggableSliderMorph"			],			"category" : "Spec2-Adapters-Morphic-Base"		},		"WeakMessageSend" : {			"hash" : 1185280,			"definition" : "Object weakSubclass: #WeakMessageSend\r\tinstanceVariableNames: 'selector shouldBeNil arguments'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Messaging'",			"comment" : [				"Instances of WeakMessageSend encapsulate messages send to objects, like MessageSend. Unlike MessageSend it is not necessarily a valid message. A request to value only results in a send if infact it is valid. ",				"",				"See also MessageSend comments. WeakMessageSend is used primarily for event registration. ",				"",				"Unlike MessageSend, WeakMessageSend store receivers (object receiving the message send) as the first and only element of its array as opposed to a named ivar.",				"But like MessageSend, it does have",				" selector\t\tSymbol -- message selector",				" arguments\t\tArray -- bound arguments",				"and it also has",				" shouldBeNil\t\tBoolean --  used to ensure array of arguments is not all nils"			],			"category" : "Kernel-Messaging"		},		"DoubleLink class" : {			"hash" : 1876224,			"definition" : "DoubleLink class\r\tinstanceVariableNames: ''",			"comment" : [				"I am DoubleLink, the elementary part of a DoubleLinkedList.",				"",				"I hold a value, as well as a link to my successor (nextLink) and to my predecessor (previousLink) - both can be nil."			],			"category" : "Collections-DoubleLinkedList-Base"		},		"SliderPresenter" : {			"hash" : 1733376,			"definition" : "AbstractWidgetPresenter subclass: #SliderPresenter\r\tinstanceVariableNames: 'max min quantum value isSetting isChanging absoluteValue labelHolder'\r\tclassVariableNames: ''\r\tpackage: 'Spec-Core-Widgets'",			"comment" : [				"A SliderPresenter is a spec presenter for a slider.",				"See AbstractWidgetPresenter",				"",				"self example",				"",				"I provide the following variables and their accessors",				"- max is the maximum of the slide.",				"- min is the minimum of the slide.",				"- value is the value of the slide, it is between the maximum and the minimum",				"- absoluteValue is the value of the slide in a percent of the maximum.",				"- label is the label in the background.",				"",				"I provide the following methods",				"- color: to set the background color, it must be called after have displayed the widget.",				"",				"todo",				"- quantum"			],			"category" : "Spec-Core-Widgets"		},		"HETraitLiteral" : {			"hash" : 998912,			"definition" : "HESymbol subclass: #HETraitLiteral\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I represent a Trait.",				"I am stored as a symbol.",				"",				"When serialized I get the name of the trait.",				"When deserialized I find the trait in the target environment"			],			"category" : "Hermes-Model"		},		"ProcessLocalVariable class" : {			"hash" : 918528,			"definition" : "ProcessLocalVariable class\r\tinstanceVariableNames: ''",			"comment" : [				"My subclasses have values specific to the active process. They can be read with #value and set with #value:"			],			"category" : "Kernel-Processes"		},		"SpStyleVariable" : {			"hash" : 2712576,			"definition" : "SpStyleAbstractVariable subclass: #SpStyleVariable\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Adapters-Morphic-StyleSheet'",			"comment" : [				"A holder for an attribute `atomic` value.",				"It holds numbers, strings, symbols."			],			"category" : "Spec2-Adapters-Morphic-StyleSheet"		},		"SpSliderPresenter" : {			"hash" : 2372352,			"definition" : "SpAbstractWidgetPresenter << #SpSliderPresenter\r\tslots: { #max => SpObservableSlot .\r\t\t\t\t #min => SpObservableSlot .\r\t\t\t\t #quantum => SpObservableSlot .\r\t\t\t\t #value => SpObservableSlot .\r\t\t\t\t #absoluteValue => SpObservableSlot .\r\t\t\t\t #isHorizontal . #label => SpObservableSlot .\r\t\t\t\t #marks => SpObservableSlot };\r\ttag: 'Widgets';\r\tpackage: 'Spec2-Core'",			"comment" : [				"A presenter that show a slider."			],			"category" : "Spec2-Core-Widgets"		},		"SpValueHolder class" : {			"hash" : 877824,			"definition" : "SpValueHolder class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a class holding any object inside its unique instance variable. ",				"Each time the instance variable value changes, an announcement is emitted. ",				"",				"The instance variable is accessed through `value` and `value:` while the registration is done by `whenChangedDo: aBlock`. ",				"",				"In addition, infinite loops of propagation are prevented. ",				"Use case: you have two lists A, and B, and you want to keep their selection synchronised. ",				"So when A selection changes, you set B selection. ",				"But since B selection changes, you set A selection, and so on… ",				"",				"This case is prevented by the use of a `lock` variable."			],			"category" : "Spec2-ObservableSlot"		},		"Symbol" : {			"hash" : 791808,			"definition" : "String subclass: #Symbol\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'NewSymbols OneCharacterSymbols SelectorTable SymbolTable'\r\tpackage: 'Collections-Strings-Base'",			"comment" : [				"I represent Strings that are created uniquely. Thus, someString asSymbol == someString asSymbol.",				"",				"To see the difference between Symbol and Strings look at this example:",				"",				"```",				"| s1 s2 |",				"s1 := 1234 asString.",				"s2 := 1234 asString.",				"",				"\"Strings are not unique, while Symbols are\"",				"s1 = s2. \"true\"",				"s1 == s2. \"false\"",				"",				"s1 asSymbol = s2 asSymbol. \"true\"",				"s1 asSymbol == s2 asSymbol. \"true\"",				"",				"(s1 class allInstances select: [:s | s = s1 ]) size. \"2\"",				"(s1 asSymbol class allInstances select: [:s | s = s1 asSymbol ]) size. \"1\"",				"```",				"",				"Comparing Symbols takes less time than comparing Strings.",				"",				"```",				"[ #stringA = #stringB ] bench. \"26,812,864 per second\"",				"[ 'StringA' = 'StringB' ] bench. \"3,492,987 per second\"",				"```"			],			"category" : "Collections-Strings-Base"		},		"GTFilter" : {			"hash" : 5167616,			"definition" : "Object subclass: #GTFilter\r\tinstanceVariableNames: 'context filteredItems streamed'\r\tclassVariableNames: ''\r\tpackage: 'GT-Spotter-Filters'",			"comment" : [				"I am the root class of the hierarchy of filter objects  that can be used by Spotter. ",				"",				"The main entry point is the #value method that performs and returns the list of filtered items.",				"Subclasses should return the list of filtered elements in sorted order based on the filtering criteria."			],			"category" : "GT-Spotter-Filters"		},		"FFIConstantArgument" : {			"hash" : 518144,			"definition" : "FFIFunctionArgument subclass: #FFIConstantArgument\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'UnifiedFFI-Arguments'",			"comment" : [				"I am a function argument representing a literal value (in contrast to a variable).",				"The parser creates me when it finds other than symbols as arguments.",				"",				"I am resolved by resolving my type.",				"The type knows how to resolve itself in a context."			],			"category" : "UnifiedFFI-Arguments"		},		"Slider" : {			"hash" : 2205952,			"definition" : "MorphicModel subclass: #Slider\r\tinstanceVariableNames: 'slider value setValueSelector sliderShadow sliderColor descending dragging'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Widgets-Scrolling'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tdescending:\t\t<Object>",				"\tdragging:\t\t<Object>",				"\tsetValueSelector:\t\t<Object>",				"\tslider:\t\t<Object>",				"\tsliderColor:\t\t<Object>",				"\tsliderShadow:\t\t<Object>",				"\tvalue:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Morphic-Widgets-Scrolling"		},		"Continuation class" : {			"hash" : 917248,			"definition" : "Continuation class\r\tinstanceVariableNames: ''",			"comment" : [				"I permit to save the execution flow and to restart it later. I was originally used in seaside.",				"",				"Example :",				"",				"You have an object with the instance variable executionFlow.",				"",				"You save the current execution flow with :",				"Continuation currentDo: [ :cc | executionFlow := cc]",				"",				"You restart the execution flow with :",				"executionFlow value: true",				"",				""			],			"category" : "Kernel-Methods"		},		"RBParseErrorNode" : {			"hash" : 1208832,			"definition" : "RBValueNode subclass: #RBParseErrorNode\r\tinstanceVariableNames: 'errorMessage value start stop'\r\tclassVariableNames: ''\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"I am a node representing a source code segment that could not be parsed. I am mainly used for source-code coloring where we should parse as far as possible and mark the rest as a failure.",				"",				"Parsing faulty code without raising a syntax error is done by ",				"RBParser parseFaultyExpression:",				"or",				"RBParser parseFaultyMethod: ",				"",				"The return value is either valid nodes representing the AST, or nodes representing the valid portion and an RBParseErrorNode for the remaining invalid code.",				""			],			"category" : "AST-Core-Nodes"		},		"OSJoyAxisEvent" : {			"hash" : 1956352,			"definition" : "OSEvent subclass: #OSJoyAxisEvent\r\tinstanceVariableNames: 'which axis value mapped hasMapping'\r\tclassVariableNames: ''\r\tpackage: 'OSWindow-Core-Events'",			"comment" : [				"I am the  joystick axis event.",				"",				"This event is generated when a joystick stick is moved.",				"",				"The which parameter gives the joystick index.",				"The axis parameter is the index of the axis that moved.",				"The value parameter is how much the axis was moved.",				"The mapped parameter tells if the axis index has been mapped into the index of a standard layout.",				"The hasMapping parameters tells if this joystick is generating a mapped version of the event."			],			"category" : "OSWindow-Core-Events"		},		"ZnReadEvalPrintDelegate" : {			"hash" : 4226816,			"definition" : "Object subclass: #ZnReadEvalPrintDelegate\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Examples'",			"comment" : [				"I am ZnReadEvalPrintDelegate, I export a REPL Web Service.",				"You can use this service to work with a headless image.",				"",				"\tZnReadEvalPrintDelegate startInServerOn: 1701.",				"\t",				"\tZnClient new",				"\t\turl: 'http://localhost:1701/repl';",				"\t\tcontents: '42 factorial';",				"\t\tpost.",				"\t",				"Web Service API:",				"",				"\tPOST /repl <some Smalltalk code>",				"\t ",				"Here is an example terminal session:",				"",				"$ curl http://localhost:1701/repl",				"# Pharo Smalltalk REPL. POST expressions to evaluate",				"# Here is one way (type ctrl-d to end input)",				"curl -X POST -H'Content-Type:text/plain' --data-binary @- http://localhost:1701/repl",				"",				"$ curl -X POST -H'Content-Type:text/plain' -d '42 factorial' http://localhost:1701/repl",				"1405006117752879898543142606244511569936384000000000",				"",				"$ curl -X POST -H'Content-Type:text/plain' --data-binary @- http://localhost:1701/repl",				"{ (1 to: 10) sum. (1 to: 10) average }",				"{55. (11/2)}",				"",				"There is error handling as well:",				"",				"$ curl -X POST -H'Content-Type:text/plain' --data-binary @- http://localhost:1701/repl",				"1 plus: 2",				"MessageNotUnderstood: SmallInteger>>plus:",				"SmallInteger(Object)>>doesNotUnderstand: #plus:",				"\tReceiver: 1",				"\tArguments and temporary variables: ",				"\t\taMessage: \tplus: 2",				"\t\texception: \tMessageNotUnderstood: SmallInteger>>plus:",				"\t\tresumeValue: \tnil",				"\tReceiver's instance variables: ",				"1",				"UndefinedObject>>DoIt",				"Compiler>>evaluate:in:to:notifying:ifFail:logged:",				"Compiler>>evaluate:in:to:notifying:ifFail:",				"Compiler>>evaluate:in:to:",				"ZnReadEvalPrintDelegate>>evaluate: in Block: [| result |...",				"BlockClosure>>on:do:",				"ZnReadEvalPrintDelegate>>evaluate: in Block: [:out | [| result |...",				"String class(SequenceableCollection class)>>new:streamContents:",				"",				"WARNING: never open this service beyond your local network !",				"This service gives you absolute control over and access to everything in your image. ",				"For example, the following will kill your image:",				"",				"$ curl -X POST -H'Content-Type:text/plain' -d 'Smalltalk quitPrimitive' http://localhost:1701/repl",				"",				"Part of Zinc HTTP Components. "			],			"category" : "Zinc-HTTP-Examples"		},		"TKTFutureFailure" : {			"hash" : 412160,			"definition" : "TKTFutureState subclass: #TKTFutureFailure\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'TaskIt-Futures'",			"comment" : [				"I represent a the result of a failured task.",				"",				"I ignore success callbacks and schedule for execution failure callbacks"			],			"category" : "TaskIt-Futures"		},		"KeyboardKey class" : {			"hash" : 1017344,			"definition" : "KeyboardKey class\r\tinstanceVariableNames: ''",			"comment" : [				"I represent a keyboard Key. I am mapped from the platform specific keycodes into a common keycode base, by using my class side methods."			],			"category" : "System-Platforms-Utilities"		},		"DoubleLink" : {			"hash" : 1876480,			"definition" : "Object subclass: #DoubleLink\r\tinstanceVariableNames: 'value nextLink previousLink'\r\tclassVariableNames: ''\r\tpackage: 'Collections-DoubleLinkedList-Base'",			"comment" : [				"I am DoubleLink, the elementary part of a DoubleLinkedList.",				"",				"I hold a value, as well as a link to my successor (nextLink) and to my predecessor (previousLink) - both can be nil."			],			"category" : "Collections-DoubleLinkedList-Base"		},		"STONTestAssociation" : {			"hash" : 4194304,			"definition" : "Association subclass: #STONTestAssociation\r\tinstanceVariableNames: 'timestamp'\r\tclassVariableNames: ''\r\tpackage: 'STON-Tests-Support'",			"comment" : [				"STONTestAssociation is used to support unit tests."			],			"category" : "STON-Tests-Support"		},		"RBValueToken" : {			"hash" : 1186304,			"definition" : "RBToken subclass: #RBValueToken\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'AST-Core-Tokens'",			"comment" : [				"RBValueToken is the abstract superclass of all tokens that have additional information attached. For example, the BinarySelector token holds onto the actual character (e.g. $+).",				"",				"Instance Variables:",				"\tvalue\t<String>\tThe value of this token",				""			],			"category" : "AST-Core-Tokens"		},		"JobProgressBarMorph" : {			"hash" : 595712,			"definition" : "Morph subclass: #JobProgressBarMorph\r\tinstanceVariableNames: 'progressBar'\r\tclassVariableNames: 'BarHeight BarWidth IsInterruptable'\r\tpackage: 'Morphic-Base-ProgressBar'",			"comment" : [				"A JobProgressBarMorph is a progress bar with a title and a icon to stop update.",				"",				"\t\tJobProgressBarMorph new openInWorld.",				"",				"I am often used by the Job class in Pharo and not directly.",				"",				"It is possible to disable the icon to prevent the user from stopping the task via the #isInterruptable setting.",				"",				"\t\tJobProgressBarMorph isInterruptable: false"			],			"category" : "Morphic-Base-ProgressBar"		},		"Job" : {			"hash" : 264960,			"definition" : "Object subclass: #Job\r\tinstanceVariableNames: 'block currentValue min max title children isRunning parent process'\r\tclassVariableNames: ''\r\tpackage: 'Jobs-Base'",			"comment" : [				"A Job is a task to run and potentially notified to the user.",				"",				"[:job | job title: 'Let us get started'.",				"\t1 to: 10 do: [:each |",				"\t\tjob",				"\t\t\tprogress: (0.1 * each);",				"\t\t\ttitle: 'Youpi ', each printString.",				"\t\t(Delay forMilliseconds: 100) wait.",				"\t\t] ]  asJob run"			],			"category" : "Jobs-Base"		},		"RBAssignmentNode" : {			"hash" : 1205504,			"definition" : "RBValueNode subclass: #RBAssignmentNode\r\tinstanceVariableNames: 'variable assignment value'\r\tclassVariableNames: ''\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"RBAssignmentNode is an AST node for assignment statements.",				"",				"Instance Variables:",				"\tassignment\t<Integer>\tposition of the :=",				"\tvalue\t<RBValueNode>\tthe value that we're assigning",				"\tvariable\t<RBVariableNode>\tthe variable being assigned",				""			],			"category" : "AST-Core-Nodes"		},		"LGitFunctionReturn" : {			"hash" : 2415872,			"definition" : "Object subclass: #LGitFunctionReturn\r\tinstanceVariableNames: 'methodSelector value'\r\tclassVariableNames: ''\r\tpackage: 'LibGit-Core-FFI-Handling'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tmethodSelector:\t\t<Object>",				"\tvalue:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "LibGit-Core-FFI-Handling"		},		"FFIConst" : {			"hash" : 500224,			"definition" : "FFIExternalType subclass: #FFIConst\r\tinstanceVariableNames: 'value type'\r\tclassVariableNames: ''\r\tpackage: 'UnifiedFFI-Types'",			"comment" : [				"I'm a constant in an ffi call. ",				"Constants can be used while doing a call, under a very restrictive rule: it has to be possible to parse it to understand which basic type it is."			],			"category" : "UnifiedFFI-Types"		},		"RSAbstractMarkerDecoration" : {			"hash" : 5819136,			"definition" : "RSChartDecoration subclass: #RSAbstractMarkerDecoration\r\tinstanceVariableNames: 'markerColor getRelevantValueBlock'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Chart-Decoration'",			"comment" : [				"Set a marker in the chart. For example:",				"",				"=-=-=-==-=-=-==-=-=-=",				"x := (-3.14 to: 3.14 by: 0.01).",				"c := RSChart new.",				"",				"p := RSLinePlot new.",				"p x: x y: x sin * 0.22.",				"c addPlot: p.",				"",				"p := RSLinePlot new.",				"p x: x y: x cos * 0.18.",				"c addPlot: p.",				"",				"c addDecoration: RSHorizontalTick new.",				"c addDecoration: (RSVerticalTick new asFloat).",				"c addDecoration: (RSYMarkerDecoration new ).",				"c ",				"=-=-=-==-=-=-==-=-=-="			],			"category" : "Roassal3-Chart-Decoration"		},		"Unit" : {			"hash" : 2644480,			"definition" : "Object subclass: #Unit\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'PrintAbbreviated'\r\tpackage: 'Units-Core'",			"comment" : [				"Class Unit is the superclass for all other unit classes.",				"Instances represent units which are attached to numbers; for example",				"'meters' (a BaseUnit), 'meters per second' (a CompoundUnit),",				"'joule seconds per liter' (a ComplexUnit), 'degrees Kelvin' (a TemperatureBaseUnit),",				"'degrees Celsius' (a TemperatureUnit), 'kilohertz' (a PrefixedUnit),",				"and 'moles of hydrogen' (a ModifiedUnit).",				"",				"A number of methods on the class side of Unit provide for easy access to built-in units.",				"",				"The basic unit 'kilogram' is special given that it is basic and has a 'kilo' prefix, see",				"also http://www.bipm.org/en/si/si_brochure/chapter3/3-2.html"			],			"category" : "Units-Core"		},		"IncrementalSliderMorph" : {			"hash" : 2199296,			"definition" : "MorphicModel subclass: #IncrementalSliderMorph\r\tinstanceVariableNames: 'sliderMorph getValueSelector setValueSelector getEnabledSelector'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Widgets-Scrolling'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tgetEnabledSelector:\t\t<Object>",				"\tgetValueSelector:\t\t<Object>",				"\tsetValueSelector:\t\t<Object>",				"\tsliderMorph:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Morphic-Widgets-Scrolling"		},		"RBReturnNode class" : {			"hash" : 1143040,			"definition" : "RBReturnNode class\r\tinstanceVariableNames: ''",			"comment" : [				"RBReturnNode is an AST node that represents a return expression.",				"",				"Instance Variables:",				"\treturn\t<Integer>\tthe position of the ^ character",				"\tvalue\t<RBValueNode>\tthe value that is being returned",				""			],			"category" : "AST-Core-Nodes"		},		"IdentityNewValueHolder" : {			"hash" : 697088,			"definition" : "NewValueHolder subclass: #IdentityNewValueHolder\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'NewValueHolder-Core-Base'",			"comment" : [				"I am a special because I announce changes only if the new value set is different from the current value."			],			"category" : "NewValueHolder-Core-Base"		},		"ObservableValueHolder class" : {			"hash" : 382720,			"definition" : "ObservableValueHolder class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a class holding any object. Each time the object changes, I execute a list of commands the user might have register in me.",				"",				"I am used as an internal mecanism of the ObservableSlot. The slot contains one of my instance and is giving me the blocks to execute when the value change. ",				"",				"I SHOULD NOT BE USED DIRECTLY BUT VIA AN OBSERVABLE SLOT.",				" ",				"In addition, infinite loops of propagation are prevented.",				"",				"Use case: you have two lists A, and B, and you want to keep their selection synchronised. So when A selection changes, you set B selection. But since B selection changes, you set A selection, and so on… ",				"",				"This case is prevented by the use of a `lock` variable."			],			"category" : "VariablesLibrary-Observable"		},		"Srfi41FormalPowerSeries" : {			"hash" : 6588928,			"definition" : "Object subclass: #Srfi41FormalPowerSeries\r\tinstanceVariableNames: 'stream var'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Srfi41-FPS'",			"comment" : [				"!Formal power series",				"",				"In mathematics, a formal power series is a generalization of a polynomial, where the number of terms is allowed to be infinite; this implies giving up the possibility of replacing the variable in the polynomial with an arbitrary number. Thus a formal power series differs from a polynomial in that it may have infinitely many terms, and differs from a power series, whose variables can take on numerical values. One way to view a formal power series is as an infinite ordered sequence of numbers. In this case, the powers of the variable are used only to indicate the order of the coefficients, so that the coefficient of x^{5} is the fifth term in the sequence. In combinatorics, formal power series provide representations of numerical sequences and of multisets, and for instance allow concise expressions for recursively defined sequences regardless of whether the recursion can be explicitly solved; this is known as the method of generating functions. More generally, formal power series can include series with any finite number of variables, and with coefficients in an arbitrary ring. Formal power series can be created from Taylor polynomials using formal moduli.",				"",				"From *https://en.wikipedia.org/wiki/Formal_power_series*."			],			"category" : "Collections-Streams-Srfi41-FPS"		},		"RBLiteralToken class" : {			"hash" : 1144576,			"definition" : "RBLiteralToken class\r\tinstanceVariableNames: ''",			"comment" : [				"RBLiteralToken is the first-class representation of a literal token (entire literals, even literal arrays, are a single token in the Pharo grammar).",				"",				"Instance Variables:",				"- stopPosition <Integer> The position within the source code where the token terminates.",				""			],			"category" : "AST-Core-Tokens"		},		"HEAssociation" : {			"hash" : 979712,			"definition" : "HEExportedLiteral subclass: #HEAssociation\r\tinstanceVariableNames: 'key'\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I am simple representation of an association.",				"I store both values, the key and the value.",				"The key and the value are transformed as HEExportedLiterals.",				"When writing or reading, the key is before of the value."			],			"category" : "Hermes-Model"		},		"RBSelectorNode class" : {			"hash" : 1154816,			"definition" : "RBSelectorNode class\r\tinstanceVariableNames: ''",			"comment" : [				"RBSelectorNode is an AST node that represents a selector (unary, binary, keyword).",				"",				"Instance Variables:",				"\tvalue\t<String>\tthe selector's name I represent or the ensemble of keywords I'm made of",				"\tstart <Integer>\tthe position where I was found at the source code"			],			"category" : "AST-Core-Nodes"		},		"HECharacter" : {			"hash" : 983552,			"definition" : "HEByteString subclass: #HECharacter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I represent a character.",				"I serialize myself as a String of a single character.",				"When I am readed back I just read the first character of the value.",				"My value is always a String"			],			"category" : "Hermes-Model"		},		"KMKeyCombination" : {			"hash" : 2099456,			"definition" : "Object subclass: #KMKeyCombination\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Keymapping-KeyCombinations'",			"comment" : [				"I'm an abstract class representing a key combination. I'm can represent several cases of key presses:",				"",				"- simple key presses: pressing a single key, as a letter or number, or others like tab or space",				"- modified key presses: a simple key + a modifier like shift or alt",				"- option key presses: a list of key presses where only one of them should be valid",				"- chained shortcuts: a sequence of shortcuts",				"",				"My more important protocols are:",				"",				"- matching: contains methods to control if a key combination is equals to other or matches a sequence of keyboard events",				"- combining: defines simple ways to combine shorcut objects, like chaining them or modifying them",				"",				"For more information, look at my subclasses."			],			"category" : "Keymapping-KeyCombinations"		},		"TTLAssociation" : {			"hash" : 1880576,			"definition" : "Association subclass: #TTLAssociation\r\tinstanceVariableNames: 'timestamp'\r\tclassVariableNames: ''\r\tpackage: 'System-Caching'",			"comment" : [				"I am TTLAssociation. ",				"I am an Association.",				"",				"I maintain a timestamp that gets updated each time my value changes.",				"",				"I decide myself when I am stale, using a cache defined default time to live."			],			"category" : "System-Caching"		},		"IceNode" : {			"hash" : 6055168,			"definition" : "Object subclass: #IceNode\r\tinstanceVariableNames: 'parent childrenDictionary value'\r\tclassVariableNames: ''\r\tpackage: 'Iceberg-Changes'",			"comment" : [				"I am a tree implementation used for diffing and merging.",				"",				"I work by composition and not inheritance. My users should use the values of the node (kept in the #value instance variable) and not subclass myself.",				"Each node stores its child nodes in a dictionary, indexed by a key.",				"",				"Tree API:",				" - #/ access to children",				" - #path get the path of the current node in the tree",				" - #parent get the parent node of the current node",				" - #rootNode get the root node of the current tree",				" - #children get the children of the current node",				" - #keys, #keysDo:, #includesKey: enumerate the keys of the node",				" - #at:put, #childAt:ifAbsentPut:, #childAt:ifPresent:",				" - #resolve:, #resolve:ifAbsent: resolve a path in the current node",				" - #replaceBy: replaces the current node by another node",				" - #replace:with: replaces the given child node by another node",				"",				"Enumerating API:",				" - #allSatisfy:",				" - #anySatisfy:",				" - #collect:",				" - #detect:",				" - #select:",				" - #count:",				" - #do:",				"",				"Visiting API:",				" - visit:"			],			"category" : "Iceberg-Changes"		},		"ProcessLocalVariable" : {			"hash" : 918784,			"definition" : "ProcessSpecificVariable subclass: #ProcessLocalVariable\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Processes'",			"comment" : [				"My subclasses have values specific to the active process. They can be read with #value and set with #value:"			],			"category" : "Kernel-Processes"		},		"HEExportedLiteral" : {			"hash" : 977920,			"definition" : "HEAbstractExported subclass: #HEExportedLiteral\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I represent all the literals that a method and a trait composition can have.",				"",				"My subclasses implements all the behavior for the different types of literals. ",				"All my subclasses has a #tag number. Each tag number should be unique. ",				"This number is written in the stream before of the content of the literal. ",				"In this way, the literal can be properly deserialized. ",				"",				"By sure, playing with the tag numbers requires incrementing the version of the hermes files, ",				"as they do not keep compatibility if the numbers change.",				"",				"For deserializing a literal I have a class side message called",				"",				"#readFrom: aHermesStream",				"",				"This message returns the correct instance representing the literal value.",				"",				"Also I implement helping classSide methods to check the sanity of the tags, #checkAllTags and #missingTags",				"",				"By default I have a value, but my subclasses can have more instance variables.",				"",				"My subclasses implements the method ",				"#asLiteralIn: env",				"This method creates the proper literal in the given environment. Some of the literals are environment dependent,",				"for example the classes."			],			"category" : "Hermes-Model"		},		"MetacelloAbstractVersionConstructor" : {			"hash" : 1489920,			"definition" : "MetacelloAbstractConstructor subclass: #MetacelloAbstractVersionConstructor\r\tinstanceVariableNames: 'root configuration project attributeMap attributeOrder symbolicVersion currentContext'\r\tclassVariableNames: ''\r\tpackage: 'Metacello-Core-Constructors'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tattributeMap:\t\t<Object>",				"\tattributeOrder:\t\t<Object>",				"\tconfiguration:\t\t<Object>",				"\tcurrentContext:\t\t<Object>",				"\tproject:\t\t<Object>",				"\troot:\t\t<Object>",				"\tsymbolicVersion:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-Core-Constructors"		},		"GLMPort" : {			"hash" : 4893952,			"definition" : "GLMLoggedObject subclass: #GLMPort\r\tinstanceVariableNames: 'name'\r\tclassVariableNames: ''\r\tpackage: 'Glamour-Core'",			"comment" : [				"GLMPort represents the abstract port. Any port has a name. Subclasses can provide further semantics to a port."			],			"category" : "Glamour-Core"		},		"RBLiteralNode class" : {			"hash" : 1159168,			"definition" : "RBLiteralNode class\r\tinstanceVariableNames: ''",			"comment" : [				"RBLiteralNode is an AST node that represents literals.",				"",				"Instance Variables",				"\tstart: <Integer | nil> source position for the literal's beginning",				"\tstop: <Integer | nil> source position for the literal's end"			],			"category" : "AST-Core-Nodes"		},		"ProgressBarMorph" : {			"hash" : 2232064,			"definition" : "BorderedMorph subclass: #ProgressBarMorph\r\tuses: TAbleToRotate\r\tinstanceVariableNames: 'start end value height width cachedWidth'\r\tclassVariableNames: 'DefaultHeight DefaultWidth'\r\tpackage: 'Morphic-Base-ProgressBar'",			"comment" : [				"Instances of this morph get used by SystemProgressMorph or a JobProgressBar to display a bar (i.e., the rectangular part of a progress bar).",				"",				"Here is an example of how to use it. ",				"",				"| p |",				"p := ProgressBarMorph from: 0 to: 200.",				"p extent: 200@20.",				"p openInWorld.",				"",				"[",				"\t(1 to: 200) do: [ :i | p value: i.  (Delay forMilliseconds: 10) wait ].",				"\tp delete ] fork",				"",				"",				"| p |",				"p := ProgressBarMorph from: 0 to: 200.",				"p extent: 600@7.",				"p openInWorld.",				"",				"[",				"\t(1 to: 200) do: [ :i | p value: i.  (Delay forMilliseconds: 5) wait ].",				"\tp delete ] fork"			],			"category" : "Morphic-Base-ProgressBar"		},		"SpSliderInput" : {			"hash" : 2388736,			"definition" : "SpPresenter subclass: #SpSliderInput\r\tinstanceVariableNames: 'slider input'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Core-Widgets'",			"comment" : [				"I am an elementary Spec Widget managing a slider and an input.",				"",				"Self example",				"",				"Between the bounds min and max of the slider, I ensure that the value of the input on the accept and the value of the slider are the same.",				"",				"Note",				"====",				"- min and max must be set before use me.",				"- if autoAccept is true, the character '-' could create problems"			],			"category" : "Spec2-Core-Widgets"		},		"RBLiteralValueNode class" : {			"hash" : 1161728,			"definition" : "RBLiteralValueNode class\r\tinstanceVariableNames: ''",			"comment" : [				"RBLiteralNode is an AST node that represents literal values (e.g., #foo, true, 1, etc.), but not literal arrays.",				"",				"The sourceText field is needed for the formatter for the correct printing of strings vs symbols. If we just call",				"value asString, both a string and a symbol print itself as a string.",				"",				"Instance Variables",				"\tvalue\t<Numeric | Symbol | String  | Character>\tthe literal value I represent",				"\tsourceText <String> the original source text of this literal"			],			"category" : "AST-Core-Nodes"		},		"ZnDefaultServerDelegate" : {			"hash" : 1423872,			"definition" : "Object subclass: #ZnDefaultServerDelegate\r\tinstanceVariableNames: 'prefixMap byteArray'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Client-Server'",			"comment" : [				"I am ZnDefaultServerDelegate.",				"I function as a delegate for ZnServer, implementing #handleRequest:",				"",				"I implement responses to the following prefixes:",				"",				"/echo - an echo text of request information for debugging purposes",				"/dw-bench - a dynamic html page for benchmarking purposes",				"/unicode - a unicode test page",				"/random - a random string (/random/32 for a specific size)",				"/bytes - bytes according to a pattern (/bytes/32 for a specific size)",				"/favicon.ico - a Zn favicon",				"/status - a server status page",				"/error - force server errors",				"/session - a simpler session based counter",				"/help - lists all page prefixes",				"/ - an html welcome page",				"",				"Without any matches, I respond with a page not found.",				"",				"I can be reused without any default handlers mapped using #empty and configured using #map:to: where the second argument can be a block.",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Client-Server"		},		"ObservableValueHolder" : {			"hash" : 382976,			"definition" : "Object subclass: #ObservableValueHolder\r\tinstanceVariableNames: 'subscriptions lock value'\r\tclassVariableNames: ''\r\tpackage: 'VariablesLibrary-Observable'",			"comment" : [				"I am a class holding any object. Each time the object changes, I execute a list of commands the user might have register in me.",				"",				"I am used as an internal mecanism of the ObservableSlot. The slot contains one of my instance and is giving me the blocks to execute when the value change. ",				"",				"I SHOULD NOT BE USED DIRECTLY BUT VIA AN OBSERVABLE SLOT.",				" ",				"In addition, infinite loops of propagation are prevented.",				"",				"Use case: you have two lists A, and B, and you want to keep their selection synchronised. So when A selection changes, you set B selection. But since B selection changes, you set A selection, and so on… ",				"",				"This case is prevented by the use of a `lock` variable."			],			"category" : "VariablesLibrary-Observable"		},		"PRParameterValue" : {			"hash" : 5636352,			"definition" : "PRDocumentItem subclass: #PRParameterValue\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Pillar-Core-Model'",			"comment" : [				"I'm a value of a key in a environment or tag. ",				"For example in ${begin:card|rank=33}$ 33 is represented by one of my instance. ",				""			],			"category" : "Pillar-Core-Model"		},		"ZnStaticFileServerDelegate" : {			"hash" : 1440768,			"definition" : "Object subclass: #ZnStaticFileServerDelegate\r\tinstanceVariableNames: 'prefix directory mimeTypeExpirations'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-FileSystem'",			"comment" : [				"I am ZnStaticFileServerDelegate.",				"I am a simple proof of concept implementation of a web server serving static files.",				"I handle urls with an optional prefix as requests for files in a directory.",				"I serve index.html or index.htm when a directory is requested and these files exist.",				"I do a redirect when a path that is not does not end with a / refers to directory.",				"I function as a delegate for ZnServer.",				"",				"ZnServer startDefaultOn: 1701.",				"ZnServer default delegate: ((ZnStaticFileServerDelegate new) ",				"\t\t\t\t\t\t\t\t\tprefixFromString: 'apple/macosx'; ",				"\t\t\t\t\t\t\t\t\tdirectory: '/Library/WebServer/Documents' asFileReference; ",				"\t\t\t\t\t\t\t\t\tyourself).",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-FileSystem"		},		"ZnTestRunnerDelegate" : {			"hash" : 4227328,			"definition" : "Object subclass: #ZnTestRunnerDelegate\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Examples'",			"comment" : [				"I am ZnTestRunnerDelegate, a web service interface to run unit tests.",				"",				"\tZnTestRunnerDelegate startInServerOn: 1701.",				"\t",				"\tZnEasy get: 'http://localhost:1701/sunit/ZnUtilsTests'.",				"\tZnEasy get: 'http://localhost:1701/sunit/ZnUtilsTests/testBase64'.",				"",				"Web Service API:",				"",				"\tGET /sunit/MyTestCase",				"\tGET /sunit/MyTestCase/testOne",				"",				"Part of Zinc HTTP Components"			],			"category" : "Zinc-HTTP-Examples"		},		"ValueNotFound" : {			"hash" : 1174784,			"definition" : "NotFound subclass: #ValueNotFound\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Exceptions'",			"comment" : [				"I am ValueNotFound, an exception indicating that a value was not found in a Dictionary."			],			"category" : "Collections-Unordered-Exceptions"		},		"HEMethodLiteral" : {			"hash" : 994304,			"definition" : "HEExportedLiteral subclass: #HEMethodLiteral\r\tinstanceVariableNames: 'className selector'\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I represent a Method stored as a literal.",				"I am stored as a className and a selector.",				"Both elements are stored as HEExportedLiterals."			],			"category" : "Hermes-Model"		},		"TKTFutureSuccess" : {			"hash" : 413184,			"definition" : "TKTFutureState subclass: #TKTFutureSuccess\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'TaskIt-Futures'",			"comment" : [				"I represent a the result of a success task.",				"",				"I ignore failure callbacks and schedule for execution success callbacks"			],			"category" : "TaskIt-Futures"		},		"GLMContextChanged" : {			"hash" : 4880128,			"definition" : "Announcement subclass: #GLMContextChanged\r\tinstanceVariableNames: 'presentation property value oldValue'\r\tclassVariableNames: ''\r\tpackage: 'Glamour-Announcements'",			"comment" : [				"A GLMContextChanged is announced by a presentation when an outer port event raises."			],			"category" : "Glamour-Announcements"		},		"String class" : {			"hash" : 805376,			"definition" : "String class\r\tinstanceVariableNames: ''",			"comment" : [				"A String is an indexed collection of Characters. Class String provides the abstract super class for ByteString (that represents an array of 8-bit Characters) and WideString (that represents an array of  32-bit characters).  In the similar manner of LargeInteger and SmallInteger, those subclasses are chosen accordingly for a string; namely as long as the system can figure out so, the String is used to represent the given string.",				"",				"Strings support a vast array of useful methods, which can best be learned by browsing and trying out examples as you find them in the code.",				"",				"Here are a few useful methods to look at...",				"\tString match:",				"\tString contractTo:",				"",				"String also inherits many useful methods from its hierarchy, such as",				"\tSequenceableCollection ,",				"\tSequenceableCollection copyReplaceAll:with:"			],			"category" : "Collections-Strings-Base"		},		"SDL_ControllerAxisEvent" : {			"hash" : 2020352,			"definition" : "SDL2MappedEvent subclass: #SDL_ControllerAxisEvent\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'OFFSET_AXIS OFFSET_PADDING1 OFFSET_PADDING2 OFFSET_PADDING3 OFFSET_PADDING4 OFFSET_TIMESTAMP OFFSET_TYPE OFFSET_VALUE OFFSET_WHICH'\r\tpackage: 'OSWindow-SDL2-Bindings'",			"comment" : [				"SDL2 library structure representing a game controller axis event data."			],			"category" : "OSWindow-SDL2-Bindings"		},		"GTSpotterIterator" : {			"hash" : 5176320,			"definition" : "Object subclass: #GTSpotterIterator\r\tinstanceVariableNames: 'context items'\r\tclassVariableNames: ''\r\tpackage: 'GT-Spotter-Iterators'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcontext:\t\t<Object>",				"\titems:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "GT-Spotter-Iterators"		},		"HEGlobalVariable" : {			"hash" : 991232,			"definition" : "HESymbol subclass: #HEGlobalVariable\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I represent a Global variable.",				"I am stored as a symbol.",				"",				"When serialized I get the name of the variable.",				"When deserialized I find the global variable in the target environment.",				"I use the class being created to look up the binding. If there is no binding I create an undeclared. "			],			"category" : "Hermes-Model"		},		"GLMPagerSynchronizeScrollAnnouncement" : {			"hash" : 4916480,			"definition" : "Announcement subclass: #GLMPagerSynchronizeScrollAnnouncement\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Glamour-PagerModel-Announcements'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tvalue:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Glamour-PagerModel-Announcements"		},		"HEExportedMetaclass" : {			"hash" : 988160,			"definition" : "HESymbol subclass: #HEExportedMetaclass\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I represent a Metaclass",				"I am stored as a symbol.",				"",				"When serialized I get the name of the base class.",				"When deserialized I find the metaclass in the target environment"			],			"category" : "Hermes-Model"		},		"DerivedUnit" : {			"hash" : 2648064,			"definition" : "NamedUnit subclass: #DerivedUnit\r\tinstanceVariableNames: 'unitValue'\r\tclassVariableNames: ''\r\tpackage: 'Units-Core'",			"comment" : [				"This is a definition of a unit in terms of a product of powers of",				"other units, plus a scalar value associated with the unit.",				"",				"Example: 1 inch = 2.54 cm",				"Note that the \"left side\" is always magnitude 1, which corresponds to 1 unit of the DerivedUnit. "			],			"category" : "Units-Core"		},		"RBSelectorNode" : {			"hash" : 1208064,			"definition" : "RBValueNode subclass: #RBSelectorNode\r\tinstanceVariableNames: 'value start'\r\tclassVariableNames: ''\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"RBSelectorNode is an AST node that represents a selector (unary, binary, keyword).",				"",				"Instance Variables:",				"\tvalue\t<String>\tthe selector's name I represent or the ensemble of keywords I'm made of",				"\tstart <Integer>\tthe position where I was found at the source code"			],			"category" : "AST-Core-Nodes"		},		"SpLabelledSliderInput" : {			"hash" : 2383104,			"definition" : "SpLabelledContainer subclass: #SpLabelledSliderInput\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Core-Widgets'",			"comment" : [				"I am a LabelledContainer specialized to manage a SliderInput.",				"See LabelledContainer",				"",				"self example",				"",				"I provide the accessors sliderInput to be more intuitive than subwidget, and the shortcuts input and slider.",				"",				"I provide shortcuts for the most common methods to avoid the use of the DoesNotUnderstand or the writing of long chain of accessors."			],			"category" : "Spec2-Core-Widgets"		},		"DynamicEyeElement" : {			"hash" : 3015424,			"definition" : "AbstractEyeElement subclass: #DynamicEyeElement\r\tinstanceVariableNames: 'descriptionBlock saveBlock labelBlock valueBlock'\r\tclassVariableNames: ''\r\tpackage: 'EyeInspector-Element'",			"comment" : [				"I am a dynamic eye element, if you are too lazy to create your own subclass of AbstractEyeElement, use it..."			],			"category" : "EyeInspector-Element"		},		"FFIEnumeration" : {			"hash" : 481280,			"definition" : "SharedPool subclass: #FFIEnumeration\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'UnifiedFFI-Objects'",			"comment" : [				"Enumerations are data-types defining a finite set of named values.",				"For example, let's consider we want to create a data-type to identify the different positions of players inside a football match: goalkeeper, defender, midfielder, forward. Such data-type can be defined in C as an enumeration as follows:",				"",				"[[[language=c",				"typedef enum {",				"  goalkeeper,",				"  defender,",				"  midfielder,",				"  forward",				"} position;",				"]]]",				"",				"We can then use ==position== as a type, and the values defined within it as valid values for ==position==.",				"",				"",				"[[[language=c",				"position myPosition = defender;",				"]]]",				"",				"!!!! The values of C enumerations",				"",				"To better understand how to map C enumerations using uFFI, we must before understand how C assigns value to each of the elements in the enumeration.",				"Internally, C assigns to each of the elements of the enumeration a sequencial numeric value starting from 0 (zero).",				"In other words, ==goalkeeper== has a value of 0, ==defender== has a value of 1, and so on.",				"C allows developers to specify the values they want too, using an assignment-like syntax.",				"",				"[[[language=c",				"typedef enum {",				"  goalkeeper = 42,",				"  defender,",				"  midfielder,",				"  forward",				"} position;",				"]]]",				"",				"We can explicitly assign values to any of the elements of the enumeration.",				"We may leave values without explicit values, in which case they will be automatically assigned a value following its previous value. And finally, many elements in the enumeration may have the same value.",				"The example enumeration below shows these subtleties.",				"",				"[[[language=c",				"#include <assert.h>",				"#include <limits.h>",				"",				"enum example {",				"    example0,            /* will have value 0 */",				"    example1,            /* will have value 1 */",				"    example2 = 3,        /* will have value 3 */",				"    example3 = 3,        /* will have value 3 */",				"    example4,            /* will have value 4 */",				"    example5 = INT_MAX,  /* will have value INT_MAX */",				"    /* Defining a new value after this one will cause an overflow error */",				"};",				"]]]",				"",				"!!!! Defining an enumeration using ==FFIEnumeration==",				"",				"Enumerations are declared in uFFI as subclasses of the ==FFIEnumeration== class defining the same elements as defined in C, and with their same values.",				"For example, defining our example enumeration is done as follows, defining a subclass of ==FFIEnumeration==, a ==enumDecl== class-side method returning the specification of the enumeration elements, and finally sending the ==initialize== message to the enumeration class we created.",				"",				"[[[language=smalltalk",				"FFIEnumeration subclass: #ExampleEnumeration",				"  instanceVariableNames: ''",				"  classVariableNames: ''",				"  package: 'FFITutorial'",				"",				"ExampleEnumeration class >> enumDecl [",				"\t^ #(",				"    example0 0",				"    example1 1",				"    example2 3",				"    example3 3",				"    example4 4",				"    example5 2147483647",				"\t\t)",				"]",				"",				"ExampleEnumeration initialize.",				"]]]",				"",				"Doing this will automatically generate some boilerplate code to manipulate the enumeration.",				"You will see that the enumeration class gets redefined as follows creating and initializing a class variable for each of its elements.",				"",				"[[[language=smalltalk",				"FFIEnumeration subclass: #ExampleEnumeration",				"  instanceVariableNames: ''",				"  classVariableNames: 'example0 example1 example2 example3 example4 example5'",				"  package: 'FFITutorial'",				"]]]",				"",				"To use the values of enumerations in our code, it is enough to import it as a pool dictionary, since uFFI enumerations are shared pools.",				"",				"[[[language=smalltalk",				"Object subclass: #FFITutorial",				"  ...",				"  poolDictionaries: 'ExampleEnumeration'",				"  ...",				"]]]",				"",				"You can use your new enum in two ways:",				"\t- add it to a client class poolDictionaries list (see  #FFIExternalEnumTests for an example), ",				"\t\tand then just write CCC in your code -- CCC here is an item of your enum",				"\t- send the name of an item to your class --- FFITestEnumeration DDD",				"",				"The FFIEnumeration implements  (instance and class) some more API methods like:",				"\t#itemAt: retrieves the item having a specific value  --- NBTestEnumeration itemAt: 2",				"\t#includes: checks the existence of a specific item in the enum --- FFITestEnumeration includes: #AAA"			],			"category" : "UnifiedFFI-Objects"		},		"MorphicAlarm" : {			"hash" : 709888,			"definition" : "MessageSend subclass: #MorphicAlarm\r\tinstanceVariableNames: 'scheduledTime numArgs'\r\tclassVariableNames: ''\r\tpackage: 'Morphic-Base-Events'",			"comment" : [				"I represent a message to be scheduled by the WorldState.",				"",				"For example, you can see me in action with the following example which print 'alarm test' on Transcript one second after evaluating the code:",				"",				"Transcript open.",				"MorphicUIManager currentWorld",				"        addAlarm: #show: ",				"        withArguments: #('alarm test') ",				"        for: Transcript ",				"        at: (Time millisecondClockValue + 1000).",				"",				"* Note *",				"Compared to doing:",				"[(Delay forMilliseconds: 1000) wait. Transcript show: 'alarm test'] forkAt: Processor activeProcess priority +1.",				"",				"the alarm system has several distinctions:",				"- Runs with the step refresh rate resolution.",				"- Alarms only run for the active world. (Unless a non-standard scheduler is in use)",				"- Alarms with the same scheduled time are guaranteed to be executed in the order they were added"			],			"category" : "Morphic-Base-Events"		},		"WeakKeyAssociation" : {			"hash" : 1183488,			"definition" : "Magnitude weakSubclass: #WeakKeyAssociation\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Associations'",			"comment" : [				"I am an association holding only weakly on my key."			],			"category" : "Collections-Support-Associations"		},		"MessageSend" : {			"hash" : 1061632,			"definition" : "Object subclass: #MessageSend\r\tinstanceVariableNames: 'receiver selector arguments'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Messaging'",			"comment" : [				"Instances of MessageSend encapsulate messages send to objects. Arguments can be either predefined or supplied when the message send is performed. ",				"",				"Use #value to perform a message send with its predefined arguments and #valueWithArguments: if additonal arguments have to supplied.",				"",				"Structure:",				" receiver\t\tObject -- object receiving the message send",				" selector\t\tSymbol -- message selector",				" arguments\t\tArray -- bound arguments"			],			"category" : "Kernel-Messaging"		},		"PredicateUnary class" : {			"hash" : 2784512,			"definition" : "PredicateUnary class\r\tinstanceVariableNames: ''",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Predicates"		},		"ValueLink class" : {			"hash" : 1173760,			"definition" : "ValueLink class\r\tinstanceVariableNames: ''",			"comment" : [				"A ValueLink is a Link containing a Value.",				"Adding an object to a LinkedList which is not a Link will create a ValueLink containing that object.",				"",				"",				"value - The object this link points to."			],			"category" : "Collections-Support-Links"		},		"NewValueHolder class" : {			"hash" : 695296,			"definition" : "NewValueHolder class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a class holding any object inside its unique instance variable. ",				"Each time the instance variable value changes, an announcement is emitted. ",				"",				"The instance variable is accessed through `value` and `value:` while the registration is done by `whenChangedDo: aBlock`. ",				"",				"In addition, infinite loops of propagation are prevented. ",				"Use case: you have two lists A, and B, and you want to keep their selection synchronised. ",				"So when A selection changes, you set B selection. ",				"But since B selection changes, you set A selection, and so on… ",				"",				"This case is prevented by the use of a `lock` variable."			],			"category" : "NewValueHolder-Core-Base"		},		"LiteralVariable" : {			"hash" : 840448,			"definition" : "Variable subclass: #LiteralVariable\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Variables'",			"comment" : [				"I am abstract. Subclasses of me model meta objects for global variables (Class, Global, Pool), called \"Literal Variables\" in Smalltalk.",				"",				"I am polymorphic with Association, modeling the binding of the global in either the Smalltalk globals, Undeclared or classPools. Previously I was a subclass of Associations but it leaded to many duplicated methods with other non literal variables (slots and temps).",				"",				"When chaning emit* methods, do not forget to recompile exisiting code:",				"",				"aGlobal usingMethods do: #recompile ",				"",				"***NOTE***",				"When moving binding from Undeclared, we change the class of that binding to either ClassVariable or GlobalVariable.",				"",				"==> when we use Global subclasses, we will either need to restrict adding variables or add a slow path where we create a new binding and update all users. But this can be done later."			],			"category" : "Kernel-Variables"		},		"SpProgressBarFixed class" : {			"hash" : 991488,			"definition" : "SpProgressBarFixed class\r\tuses: SpTObservable classTrait\r\tinstanceVariableNames: ''",			"comment" : [				"Description",				"--------------------",				"",				"I am a state of a ProgressBarPresenter managing the behavior of a fixed progress bar. I will have one value (between 0 and 1) and the progress will not change.",				"",				"Examples",				"--------------------",				"",				"\t ProgressBarFixed value: 0.1",				" ",				"Internal Representation and Key Implementation Points.",				"--------------------",				"",				"    Instance Variables",				"\tvalueHolder:\t\t<aValueHolder> \t\tValue holder keeping the value I should be fixed on."			],			"category" : "Spec2-Core-Utils"		},		"MorphicSliderAdapter" : {			"hash" : 1774336,			"definition" : "AbstractMorphicAdapter subclass: #MorphicSliderAdapter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Spec-MorphicAdapters-Base'",			"comment" : [				"I am the adapter used to bridget a SliderPresenter and a PluggableSliderMorph"			],			"category" : "Spec-MorphicAdapters-Base"		},		"LabelledSliderInput" : {			"hash" : 1794304,			"definition" : "LabelledContainer subclass: #LabelledSliderInput\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Spec-PolyWidgets-Labelled'",			"comment" : [				"I am a LabelledContainer specialized to manage a SliderInput.",				"See LabelledContainer",				"",				"self example",				"",				"I provide the accessors sliderInput to be more intuitive than subwidget, and the shortcuts input and slider.",				"",				"I provide shortcuts for the most common methods to avoid the use of the DoesNotUnderstand or the writing of long chain of accessors."			],			"category" : "Spec-PolyWidgets-Labelled"		},		"MetacelloValueHolderSpec" : {			"hash" : 1510400,			"definition" : "MetacelloSpec subclass: #MetacelloValueHolderSpec\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Metacello-Core-Specs'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tvalue:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Metacello-Core-Specs"		},		"SpValueHolder" : {			"hash" : 879104,			"definition" : "Object subclass: #SpValueHolder\r\tinstanceVariableNames: 'subscriptions lock value'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-ObservableSlot'",			"comment" : [				"I am a class holding any object inside its unique instance variable. ",				"Each time the instance variable value changes, an announcement is emitted. ",				"",				"The instance variable is accessed through `value` and `value:` while the registration is done by `whenChangedDo: aBlock`. ",				"",				"In addition, infinite loops of propagation are prevented. ",				"Use case: you have two lists A, and B, and you want to keep their selection synchronised. ",				"So when A selection changes, you set B selection. ",				"But since B selection changes, you set A selection, and so on… ",				"",				"This case is prevented by the use of a `lock` variable."			],			"category" : "Spec2-ObservableSlot"		},		"Unicode class" : {			"hash" : 1081856,			"definition" : "Unicode class\r\tinstanceVariableNames: ''",			"comment" : [				"This class holds the entry points for the utility functions around characters."			],			"category" : "Multilingual-Encodings-CharSets"		},		"FFIConst class" : {			"hash" : 499968,			"definition" : "FFIConst class\r\tinstanceVariableNames: ''",			"comment" : [				"I'm a constant in an ffi call. ",				"Constants can be used while doing a call, under a very restrictive rule: it has to be possible to parse it to understand which basic type it is."			],			"category" : "UnifiedFFI-Types"		},		"HEArray" : {			"hash" : 978944,			"definition" : "HEExportedLiteral subclass: #HEArray\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I represent an instance of an Array",				"My value instance variable has an array in it. ",				"Each of the values of the original array is transformed in a HEExportedLiteral. ",				"When writing to the stream the array is written in the following way:",				"",				"1. The size of the array is written as a 32bits integer.",				"2. Each of the literals is written.",				"",				"This allows us to export any kind of array, if it is limited to a size of 32 bits integer.",				"",				"The reading is perform in the inverse order"			],			"category" : "Hermes-Model"		},		"SDL_JoyAxisEvent" : {			"hash" : 2024960,			"definition" : "SDL2MappedEvent subclass: #SDL_JoyAxisEvent\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'OFFSET_AXIS OFFSET_PADDING1 OFFSET_PADDING2 OFFSET_PADDING3 OFFSET_PADDING4 OFFSET_TIMESTAMP OFFSET_TYPE OFFSET_VALUE OFFSET_WHICH'\r\tpackage: 'OSWindow-SDL2-Bindings'",			"comment" : [				"SDL2 library structure representing a joystick axis event data."			],			"category" : "OSWindow-SDL2-Bindings"		},		"TKTConfiguration" : {			"hash" : 404992,			"definition" : "DynamicVariable subclass: #TKTConfiguration\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'TaskIt-Profiles'",			"comment" : [				"TKTConfiguration is a dynamic variable thread local and thread safe. ",				"",				"This configuration works as a global configuration for the TaskIt library.",				"",				"The current value is always pointing a TKTProfile entity. ",				"",				"For changing the actual profile, go to the settings browser, Taskit group",				"",				"For defining profiles, add a class method in TKTProfile",				""			],			"category" : "TaskIt-Profiles"		},		"ZnCookie" : {			"hash" : 1421312,			"definition" : "Object subclass: #ZnCookie\r\tinstanceVariableNames: 'attributes'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Support'",			"comment" : [				"I represent an HTTP Cookie, a small piece of data sent by an HTTP web server to an HTTP user-agent client and by the client to the same server afterwards, to remember stateful information across indepedent request/responses.",				"",				"References",				"",				"https://en.wikipedia.org/wiki/HTTP_cookie",				"https://tools.ietf.org/html/rfc6265",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Support"		},		"HEAdditionalMethodState" : {			"hash" : 977408,			"definition" : "HEExportedLiteral subclass: #HEAdditionalMethodState\r\tinstanceVariableNames: 'method selector'\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I represent an AdditionMethodState.",				"I serialize myself into a stream with the following fields:",				"",				"    - method",				"    - selector",				"    - an array containing all the elements in the original additional method state.",				"",				"Each of this elements is exported as a HEExportedLiteral.",				"My value contains the array of elements in the AdditionalMethodState."			],			"category" : "Hermes-Model"		},		"ZnImageExampleDelegate" : {			"hash" : 4226304,			"definition" : "Object subclass: #ZnImageExampleDelegate\r\tinstanceVariableNames: 'image'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-HTTP-Examples'",			"comment" : [				"I am ZnImageExampleDelegate.",				"I am a implementation of the web app in 'Building and deploying your first web app in Pharo'.",				"",				"I serve an image that web clients can change by uploading a new one.",				"",				"  ZnServer startDefaultOn: 1701.",				"  ZnImageExampleDelegate installInDefaultServer.",				"  ZnServer stopDefault.",				"",				"I implement the following API or resources",				"",				"\tGET /image - returns an HTML page showing our image and a form to upload a new image",				"\tGET /image?raw=true - directly serves the last uploaded image",				"\tPOST /image - handler accepting a multipart form data entity with a file part containing GIF, JPEG or PNG bytes",				"\t",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-HTTP-Examples"		},		"RxsPredicate" : {			"hash" : 1465344,			"definition" : "RxsNode subclass: #RxsPredicate\r\tinstanceVariableNames: 'predicate negation'\r\tclassVariableNames: 'EscapedLetterSelectors NamedClassSelectors'\r\tpackage: 'Regex-Core-Nodes'",			"comment" : [				"-- Regular Expression Matcher v 1.1 (C) 1996, 1999 Vassili Bykov",				"--",				"This represents a character that satisfies a certain predicate.",				"",				"Instance Variables:",				"",				"\tpredicate\t<BlockClosure>\tA one-argument block. If it evaluates to the value defined by <negated> when it is passed a character, the predicate is considered to match.",				"\tnegation\t<BlockClosure>\tA one-argument block that is a negation of <predicate>."			],			"category" : "Regex-Core-Nodes"		},		"WeakValueAssociation" : {			"hash" : 1188352,			"definition" : "LookupKey weakSubclass: #WeakValueAssociation\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Support-Associations'",			"comment" : [				"I am a lookup key (acting like an association but) holding only weakly on my value."			],			"category" : "Collections-Support-Associations"		},		"FFILiteralArgument class" : {			"hash" : 520448,			"definition" : "FFILiteralArgument class\r\tinstanceVariableNames: ''",			"comment" : [				"I implement the push strategy for literal objects specified in a callout."			],			"category" : "UnifiedFFI-Arguments"		},		"RSSequentialAnimation" : {			"hash" : 5798656,			"definition" : "RSCompositeAnimation subclass: #RSSequentialAnimation\r\tinstanceVariableNames: 'currentIndex'\r\tclassVariableNames: ''\r\tpackage: 'Roassal3-Animation-Core'",			"comment" : [				"I wait until one animation ends to start the another animation"			],			"category" : "Roassal3-Animation-Core"		},		"Character class" : {			"hash" : 788480,			"definition" : "Character class\r\tinstanceVariableNames: ''",			"comment" : [				"I represent a character by storing its associated Unicode. The first 256 characters are created uniquely, so that all instances of latin1 characters ($R, for example) are identical.",				"",				"The code point is based on Unicode. Since Unicode is 21-bit wide character set, we have several bits available for other information.  As the Unicode Standard  states, a Unicode code point doesn't carry the language information.  This is going to be a problem with the languages so called CJK (Chinese, Japanese, Korean.  Or often CJKV including Vietnamese).  Since the characters of those languages are unified and given the same code point, it is impossible to display a bare Unicode code point in an inspector or such tools.  To utilize the extra available bits, we use them for identifying the languages.  Since the old implementation uses the bits to identify the character encoding, the bits are sometimes called \"encoding tag\" or neutrally \"leading char\", but the bits rigidly denotes the concept of languages.",				"",				"The other languages can have the language tag if you like.  This will help to break the large default font (font set) into separately loadable chunk of fonts.  However, it is open to the each native speakers and writers to decide how to define the character equality, since the same Unicode code point may have different language tag thus simple #= comparison may return false.",				"",				"I represent a character by storing its associated ASCII code (extended to 256 codes). My instances are created uniquely, so that all instances of a character ($R, for example) are identical."			],			"category" : "Kernel-BasicObjects"		},		"ClapImplicit" : {			"hash" : 396288,			"definition" : "ClapSubExpression subclass: #ClapImplicit\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Clap-Core-Activation'",			"comment" : [				"I represent the non-occurrence of a parameter in the argument sequence.",				"",				"My instances are only created on demand in response to a query for a parameter that was not recognized in the argument sequence, i.e. it was omitted.",				"When evaluated with #value or #value:, my meaning is given by the implicit meaning block of my specification."			],			"category" : "Clap-Core-Activation"		},		"RBReturnNode" : {			"hash" : 1194752,			"definition" : "RBProgramNode subclass: #RBReturnNode\r\tinstanceVariableNames: 'return value'\r\tclassVariableNames: ''\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"RBReturnNode is an AST node that represents a return expression.",				"",				"Instance Variables:",				"\treturn\t<Integer>\tthe position of the ^ character",				"\tvalue\t<RBValueNode>\tthe value that is being returned",				""			],			"category" : "AST-Core-Nodes"		},		"ZnMonticelloServerDelegate" : {			"hash" : 1440256,			"definition" : "Object subclass: #ZnMonticelloServerDelegate\r\tinstanceVariableNames: 'directory'\r\tclassVariableNames: ''\r\tpackage: 'Zinc-FileSystem'",			"comment" : [				"I am ZnMonticelloServerDelegate.",				"I am a proof of concept implementation of a basic Monticello server.",				"I function as a delegate for ZnServer.",				"",				"ZnServer startDefaultOn: 1701.",				"ZnServer default delegate: ((ZnMonticelloServerDelegate new) ",				"\t\t\t\t\t\t\t\t\tdirectory: '/tmp/monticello'; ",				"\t\t\t\t\t\t\t\t\tyourself).",				"",				"Part of Zinc HTTP Components."			],			"category" : "Zinc-FileSystem"		},		"NewValueHolder" : {			"hash" : 695552,			"definition" : "Model subclass: #NewValueHolder\r\tinstanceVariableNames: 'lock value'\r\tclassVariableNames: ''\r\tpackage: 'NewValueHolder-Core-Base'",			"comment" : [				"I am a class holding any object inside its unique instance variable. ",				"Each time the instance variable value changes, an announcement is emitted. ",				"",				"The instance variable is accessed through `value` and `value:` while the registration is done by `whenChangedDo: aBlock`. ",				"",				"In addition, infinite loops of propagation are prevented. ",				"Use case: you have two lists A, and B, and you want to keep their selection synchronised. ",				"So when A selection changes, you set B selection. ",				"But since B selection changes, you set A selection, and so on… ",				"",				"This case is prevented by the use of a `lock` variable."			],			"category" : "NewValueHolder-Core-Base"		},		"FFIExternalValueHolder" : {			"hash" : 517120,			"definition" : "Object subclass: #FFIExternalValueHolder\r\tinstanceVariableNames: 'data'\r\tclassVariableNames: ''\r\tpackage: 'UnifiedFFI-Objects'",			"comment" : [				"I am a generic meta class for creating a subclasses, which instances will hold a single value of specified C type.",				"To create a new class for some concrete C type you need to declare an anonnymous class and indicate the type you want to use:",				"",				"[ [ [ ",				"floatHolderClass := FFIExternalValueHolder ofType: 'float'",				" ] ] ]",				"",				"Then you can use  given class(es) as a value holders for type you specified:",				"",				"[ [ [ ",				" float := floatHolderClass new.",				"",				"float value:  1.5",				"float value",				" ] ] ]",				"",				"By combining this with class/pool variables we have a convenient way of defining a values, which are passed by pointer to a function.",				"",				"For instance, imagine that we need to create a binding to a function:",				"",				"[ [ [ ",				"void getFoo( SomeType * value) ",				" ] ] ]",				"",				"which is not an unusual situation, when C function using pointer arguments for storing it's output there.",				"",				"And this is what ==FFIExternalValueHolder== is done for. To define a binding to this function you can declare a subclass named SomeType",				" ",				"and then use it in function signature:",				"",				"[ [ [ ",				"getFoo: value",				"  ^ self ffiCall: #(void getFoo ( SomeType *  value ))",				"] ] ]",				"",				"and call it like: ",				"",				"[ [ [ ",				"var := SomeType new.",				"self getFoo: var.",				"",				"var value  \"will read the value\" ",				"]]]"			],			"category" : "UnifiedFFI-Objects"		},		"Continuation" : {			"hash" : 917504,			"definition" : "Object subclass: #Continuation\r\tinstanceVariableNames: 'values'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Methods'",			"comment" : [				"I permit to save the execution flow and to restart it later. I was originally used in seaside.",				"",				"Example :",				"",				"You have an object with the instance variable executionFlow.",				"",				"You save the current execution flow with :",				"Continuation currentDo: [ :cc | executionFlow := cc]",				"",				"You restart the execution flow with :",				"executionFlow value: true",				"",				""			],			"category" : "Kernel-Methods"		},		"SpMillerActivation" : {			"hash" : 974336,			"definition" : "Object subclass: #SpMillerActivation\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Spec2-Core-Miller'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tvalue:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Spec2-Core-Miller"		},		"HEClassVariable" : {			"hash" : 987392,			"definition" : "HESymbol subclass: #HEClassVariable\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Hermes-Model'",			"comment" : [				"I represent a ClassVariable.",				"I am stored as a symbol.",				"",				"When serialized I get the name of the class variable",				"When deserialized I look up the class variable binding in the class that is being deserialized."			],			"category" : "Hermes-Model"		},		"FullBlockClosure" : {			"hash" : 9728,			"definition" : "BlockClosure variableSubclass: #FullBlockClosure\r\tinstanceVariableNames: 'receiver'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Methods'",			"comment" : [				"A FullBlockClosure is a closure that can be independent of any outerContext if desired.  It has its own method (currently reusing the startpc inst var) and its own receiver.  outerContext can be either a MethodContext/Context or nil.",				"",				"Instance Variables",				"\touterContext \t<Context>",				"\t(startpc) compiledBlock <CompiledBlock> for compatibility, this is startpc.",				"\tnumArgs \t\t<SmallInteger>",				"\treceiver:\t\t<Object>"			],			"category" : "Kernel-Methods"		},		"IceGitHubSelectItem" : {			"hash" : 6263040,			"definition" : "Object subclass: #IceGitHubSelectItem\r\tinstanceVariableNames: 'list item'\r\tclassVariableNames: ''\r\tpackage: 'Iceberg-Plugin-GitHub-Model'",			"comment" : [				"I'm a helper to keep selected items in a list."			],			"category" : "Iceberg-Plugin-GitHub-Model"		},		"Walker" : {			"hash" : 6596608,			"definition" : "Object subclass: #Walker\r\tinstanceVariableNames: 'state'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tstate:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren"		},		"Generator" : {			"hash" : 975616,			"definition" : "Stream subclass: #Generator\r\tinstanceVariableNames: 'block next continue home'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Streams-Base'",			"comment" : [				"A `Generator` transforms callback interfaces into stream interfaces. ",				"",				"The `Generator` class was originally written by Paolo Bonzini and inspired from functional programming languages.",				"",				"With basic iterators, you specify an action to be perform to elements of a collection or stream but you do not control when computation pass from one element to the next one. In addition you cannot perform a lazzy computation on potentially infinite stream of objects. ",				"",				"Generators offer a nice solution to such problem. Generators provide a way to use blocks to define a stream of values. The return values are computed one at a time, as needed, and hence need not even be finite. ",				"",				"A generator needs a block and will make sure that the block is executed once at a time and that the block has the control to decide when to yield computation. A generator offers an API that is compatible with the one of stream since it act as a stream of objects. ",				"",				"A generator should be instantiated using the expression `Generator on: [...]`. ",				"The following code creates an infinite streams of 1. ",				"",				"```",				"| g | ",				"g := Generator on: [ :gen | [ gen yield: 1 ] repeat ].",				"g next",				"> 1",				"g next ",				"> 1",				"```",				"",				"### Behavior ",				"",				"The generator itself is passed to the block, and as soon as a message like `next`, `peek`, `atEnd` or `peekFor:` is sent to the generator, execution of the block starts/resumes and goes on until the generator's `yield:` method is called: then the argument of `yield:` will be the generator's next element. ",				"",				"If the block goes on to the end without calling `yield:`, the generator will produce no more elements and `atEnd` will return true.",				"",				"",				"A generator is a quick way to create a stream of objects. A generator is a kind of pluggable stream, in that a user-supplied blocks defines which values are in a stream.",				"",				"For example, here is an empty generator and two infinite generators:",				"",				"```",				"Generator on: [ :gen | ]",				"Generator on: [ :gen | [ gen yield: 1 ] repeat ]",				"```",				"",				"As a more concrete example taken from GNU Smalltalk implementation, these lines process a file and create Person objects out of the file:",				"",				"```",				"lines := file lines.",				"lines := lines select: [ :line | line ~ '^[A-Za-z]+ [0-9]+$' ].",				"fields := lines collect: [ :line | line subStrings ].",				"people := fields collect: [ :data |",				"            Person name: data first age: data second asInteger ].",				"```",				"Let's see how to rewrite them to use a single Generator instead:",				"",				"```",				"Generator on: [ :gen |",				"    file linesDo: [ :line || data |",				"        line ~ '^[A-Za-z]+ [0-9]+$' ifTrue: [",				"            data := line subStrings.",				"            gen yield: (Person name: data first age: data second asInteger) ] ] ].",				"```",				"As you can see, `select:` becomes an if-statement, and the value from the final stream is yielded to the user of the generator.",				"Generators use continuations, but they shield the users from their complexity by presenting the ",				"same simple interface as streams.",				"",				"",				"### Instance Variables",				"",				"- block:\t\t<BlockClosure> The block associated with the generator.",				"- continue:\t<MethodContext>\tThe continuation to return to.",				"- home:\t\t<MethodContext>\tThe home (root) context of the activated block",				"- next:\t\t<Object>\t\tThe next object to return from the Generator."			],			"category" : "Collections-Streams-Base"		},		"IceNode class" : {			"hash" : 6054912,			"definition" : "IceNode class\r\tinstanceVariableNames: ''",			"comment" : [				"I am a tree implementation used for diffing and merging.",				"",				"I work by composition and not inheritance. My users should use the values of the node (kept in the #value instance variable) and not subclass myself.",				"Each node stores its child nodes in a dictionary, indexed by a key.",				"",				"Tree API:",				" - #/ access to children",				" - #path get the path of the current node in the tree",				" - #parent get the parent node of the current node",				" - #rootNode get the root node of the current tree",				" - #children get the children of the current node",				" - #keys, #keysDo:, #includesKey: enumerate the keys of the node",				" - #at:put, #childAt:ifAbsentPut:, #childAt:ifPresent:",				" - #resolve:, #resolve:ifAbsent: resolve a path in the current node",				" - #replaceBy: replaces the current node by another node",				" - #replace:with: replaces the given child node by another node",				"",				"Enumerating API:",				" - #allSatisfy:",				" - #anySatisfy:",				" - #collect:",				" - #detect:",				" - #select:",				" - #count:",				" - #do:",				"",				"Visiting API:",				" - visit:"			],			"category" : "Iceberg-Changes"		},		"PRParameterValue class" : {			"hash" : 5636096,			"definition" : "PRParameterValue class\r\tinstanceVariableNames: ''",			"comment" : [				"I'm a value of a key in a environment or tag. ",				"For example in ${begin:card|rank=33}$ 33 is represented by one of my instance. ",				""			],			"category" : "Pillar-Core-Model"		},		"SliderInput" : {			"hash" : 1798912,			"definition" : "ComposablePresenter subclass: #SliderInput\r\tinstanceVariableNames: 'slider input'\r\tclassVariableNames: ''\r\tpackage: 'Spec-PolyWidgets-Elementary'",			"comment" : [				"I am an elementary Spec Widget managing a slider and an input.",				"",				"Self example",				"",				"Between the bounds min and max of the slider, I ensure that the value of the input on the accept and the value of the slider are the same.",				"",				"Note",				"====",				"- min and max must be set before use me.",				"- if autoAccept is true, the character '-' could create problems"			],			"category" : "Spec-PolyWidgets-Elementary"		},		"Reifier" : {			"hash" : 6593024,			"definition" : "Object subclass: #Reifier\r\tinstanceVariableNames: 'state'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tstate:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren"		},		"ClapExpression" : {			"hash" : 392192,			"definition" : "Object subclass: #ClapExpression\r\tinstanceVariableNames: 'specification'\r\tclassVariableNames: ''\r\tpackage: 'Clap-Core-Activation'",			"comment" : [				"I am a concrete manifestation (a match) of my specification (a ClapParameter) in the context of a specific command-line invocation."			],			"category" : "Clap-Core-Activation"		},		"RGGlobalVariableDefinition" : {			"hash" : 1346048,			"definition" : "RGGlobalDefinition subclass: #RGGlobalVariableDefinition\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Ring-Definitions-Core-Base'",			"comment" : [				"A global variable definition"			],			"category" : "Ring-Definitions-Core-Base"		},		"ClyStringPattern" : {			"hash" : 4468480,			"definition" : "Object subclass: #ClyStringPattern\r\tinstanceVariableNames: 'value'\r\tclassVariableNames: ''\r\tpackage: 'Calypso-NavigationModel-Model'",			"comment" : [				"My subclasses represent specific kind of pattern to filter given strings.",				"",				"Subclases should implement single method #matches: to check if string in argument is satisfied pattern.",				"",				"If my subclasses define extra state the should implement comparison method according to my logic.",				"",				"I keep actual pattern string in the value variable. ",				"Instances can be created using #with: message:",				"\tClySubstringPattern with: 'expected substring'",				"",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tvalue:\t\t<String>"			],			"category" : "Calypso-NavigationModel-Model"		}	},	"messages" : {		"currentDo:" : {			"implementors" : {				"Continuation class" : {					"sourceCode" : [						"currentDo: aBlock",						"",						"\t^ aBlock value: (self fromContext: thisContext sender)"					],					"body" : [						"^ aBlock value: (self fromContext: thisContext sender)"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18750753,					"argumentNames" : [						"aBlock"					]				},				"RSSequentialAnimation" : {					"sourceCode" : [						"currentDo: block",						"",						"\t| current |",						"\tcurrent := self current.",						"\tcurrent ifNil: [ ^ self ].",						"\tblock value: current"					],					"body" : [						"| current |",						"current := self current.",						"current ifNil: [ ^ self ].",						"block value: current"					],					"isTestMethod" : false,					"category" : "actions",					"comment" : [ ],					"hash" : 23895112,					"argumentNames" : [						"block"					]				}			},			"senders" : [				"BaselineOfMetaSTExporter>>#scriptExportExampleMessagesForDoc",				"BaselineOfMetaSTExporter>>#manuallyExportExampleMessagesForDoc",				"BaselineOfMetaSTExporter>>#scriptExportCoreMessagesForDoc",				"Continuation class>>#tries:otherwise:",				"Continuation class>>#try:otherwise:",				"ContinuationTest>>#callcc:",				"ContinuationTest>>#remove:uptoLast:",				"ContinuationTest>>#remove:oneStar:sentinel:continuation:",				"ContinuationTest>>#intersectAllWithCC:",				"ContinuationTest>>#intersectWithCCAllWithCC:",				"RSSequentialAnimation>>#continue",				"RSSequentialAnimation>>#pause",				"TwoInARowStar>>#waddle:",				"TwoInARowStar>>#tree:",				"TwoInARowStar>>#getNext:",				"Unify>>#onState:afterPushingGoal:"			]		},		"value:" : {			"implementors" : {				"NewValueHolder class" : {					"sourceCode" : [						"value: contents",						"",						"\t^ self new",						"\t\t  rawValue: contents;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  rawValue: contents;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18529021,					"argumentNames" : [						"contents"					]				},				"String class" : {					"sourceCode" : [						"value: anInteger",						"",						"\t^ self with: (Character value: anInteger)"					],					"body" : [						"^ self with: (Character value: anInteger)"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18638686,					"argumentNames" : [						"anInteger"					]				},				"JobProgressBarMorph" : {					"sourceCode" : [						"value: aNumber",						"",						"\t^ progressBar value: aNumber"					],					"body" : [						"^ progressBar value: aNumber"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18428755,					"argumentNames" : [						"aNumber"					]				},				"RBParseErrorNode" : {					"sourceCode" : [						"value: aString",						"",						"\tvalue := aString"					],					"body" : [						"value := aString"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19041946,					"argumentNames" : [						"aString"					]				},				"ZnStaticFileServerDelegate" : {					"sourceCode" : [						"value: request",						"",						"\t\"I implement the generic #value: message as equivalent to #handleRequest:\"",						"",						"\t^ self handleRequest: request"					],					"body" : [						"^ self handleRequest: request"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [						"I implement the generic #value: message as equivalent to #handleRequest:"					],					"hash" : 19273920,					"argumentNames" : [						"request"					]				},				"IceNode class" : {					"sourceCode" : [						"value: aValue",						"",						"\t^ self new",						"\t\t  value: aValue;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  value: aValue;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 23888597,					"argumentNames" : [						"aValue"					]				},				"WeakValueAssociation" : {					"sourceCode" : [						"value: anObject",						"",						"\t\"Store the argument, anObject, as the value of the receiver.\"",						"",						"\tself at: 1 put: anObject"					],					"body" : [						"self at: 1 put: anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Store the argument, anObject, as the value of the receiver."					],					"hash" : 19021751,					"argumentNames" : [						"anObject"					]				},				"SpValueHolder" : {					"sourceCode" : [						"value: anObject",						"",						"\t\"Handle circular references as explained in the class comment\"",						"",						"\tlock ifTrue: [ ^ self ].",						"",						"\tlock := true.",						"",						"\t[ ",						"\t| oldValue |",						"\toldValue := value.",						"\tvalue := anObject.",						"\tself valueChanged: oldValue ] ensure: [ lock := false ]"					],					"body" : [						"lock ifTrue: [ ^ self ].",						"",						"lock := true.",						"",						"[ ",						"| oldValue |",						"oldValue := value.",						"value := anObject.",						"self valueChanged: oldValue ] ensure: [ lock := false ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Handle circular references as explained in the class comment"					],					"hash" : 18713515,					"argumentNames" : [						"anObject"					]				},				"SpSliderPresenter" : {					"sourceCode" : [						"value: aNumber",						"",						"\t\"Set the value in a range between min and max\"",						"",						"\tvalue = aNumber ifTrue: [ ^ self ].",						"\tvalue := aNumber"					],					"body" : [						"value = aNumber ifTrue: [ ^ self ].",						"value := aNumber"					],					"isTestMethod" : false,					"category" : "api",					"comment" : [						"Set the value in a range between min and max"					],					"hash" : 20469132,					"argumentNames" : [						"aNumber"					]				},				"WeakMessageSend" : {					"sourceCode" : [						"value: anObject",						"",						"\t| strongReceiver |",						"\tstrongReceiver := self receiver.",						"",						"\t(self ensureReceiver: strongReceiver) ifFalse: [ ^ nil ].",						"",						"\t^ strongReceiver perform: selector with: anObject"					],					"body" : [						"| strongReceiver |",						"strongReceiver := self receiver.",						"",						"(self ensureReceiver: strongReceiver) ifFalse: [ ^ nil ].",						"",						"^ strongReceiver perform: selector with: anObject"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [ ],					"hash" : 19281617,					"argumentNames" : [						"anObject"					]				},				"RBLiteralToken class" : {					"sourceCode" : [						"value: anObject",						"",						"\t| literal |",						"\tliteral := anObject class == Array",						"\t\t           ifTrue: [ anObject collect: [ :each | self value: each ] ]",						"\t\t           ifFalse: [ anObject ].",						"\t^ self value: literal start: nil stop: nil"					],					"body" : [						"| literal |",						"literal := anObject class == Array",						"\t           ifTrue: [ anObject collect: [ :each | self value: each ] ]",						"\t           ifFalse: [ anObject ].",						"^ self value: literal start: nil stop: nil"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 19241692,					"argumentNames" : [						"anObject"					]				},				"Walker" : {					"sourceCode" : [						"value: aVar",						"",						"\t^ (state walk: aVar) walkStarUsingWalker: self"					],					"body" : [						"^ (state walk: aVar) walkStarUsingWalker: self"					],					"isTestMethod" : false,					"category" : "dispatching",					"comment" : [ ],					"hash" : 24429924,					"argumentNames" : [						"aVar"					]				},				"KMKeyCombination" : {					"sourceCode" : [						"value: aBuilder",						"",						"\t^ self"					],					"body" : [						"^ self"					],					"isTestMethod" : false,					"category" : "keymap building",					"comment" : [ ],					"hash" : 19932300,					"argumentNames" : [						"aBuilder"					]				},				"ClapImplicit" : {					"sourceCode" : [						"value: arg",						"",						"\t^ specification valueForImplicit: self with: arg"					],					"body" : [						"^ specification valueForImplicit: self with: arg"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [ ],					"hash" : 18229457,					"argumentNames" : [						"arg"					]				},				"ProgressBarMorph" : {					"sourceCode" : [						"value: aNumber",						"",						"\t| testWidth |",						"\tvalue := aNumber.",						"\ttestWidth := self completedWidth.",						"\ttestWidth ~= cachedWidth ifTrue: [ ",						"\t\tcachedWidth := testWidth.",						"\t\tself changed ]"					],					"body" : [						"| testWidth |",						"value := aNumber.",						"testWidth := self completedWidth.",						"testWidth ~= cachedWidth ifTrue: [ ",						"\tcachedWidth := testWidth.",						"\tself changed ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20328963,					"argumentNames" : [						"aNumber"					]				},				"RBReturnNode" : {					"sourceCode" : [						"value: anExpression",						"",						"\tvalue := anExpression.",						"\tvalue parent: self"					],					"body" : [						"value := anExpression.",						"value parent: self"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19028325,					"argumentNames" : [						"anExpression"					]				},				"DoubleLink class" : {					"sourceCode" : [						"value: anObject",						"",						"\t^ self new",						"\t\t  value: anObject;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  value: anObject;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 19709909,					"argumentNames" : [						"anObject"					]				},				"MetacelloValueHolderSpec" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19343513,					"argumentNames" : [						"anObject"					]				},				"IceGitHubSelectItem" : {					"sourceCode" : [						"value: aBoolean",						"",						"\taBoolean",						"\t\tifTrue: [ self addItem ]",						"\t\tifFalse: [ self removeItem ]"					],					"body" : [						"aBoolean",						"\tifTrue: [ self addItem ]",						"\tifFalse: [ self removeItem ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 24097222,					"argumentNames" : [						"aBoolean"					]				},				"Generator" : {					"sourceCode" : [						"value: anObject",						"",						"\t\"Allows passing generators as arguments to methods expecting blocks.",						"\tA synonym for #yield: / #nextPut:.\"",						"",						"\t^ self nextPut: anObject"					],					"body" : [						"^ self nextPut: anObject"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [						"Allows passing generators as arguments to methods expecting blocks.",						"\tA synonym for #yield: / #nextPut:."					],					"hash" : 18808723,					"argumentNames" : [						"anObject"					]				},				"FFILiteralArgument" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18353814,					"argumentNames" : [						"anObject"					]				},				"SpProgressBarFixed class" : {					"sourceCode" : [						"value: aNumber",						"",						"\t^ self new",						"\t\t  value: aNumber;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  value: aNumber;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18825173,					"argumentNames" : [						"aNumber"					]				},				"Reifier" : {					"sourceCode" : [						"value: anObj",						"",						"\t^ (state walk: anObj) reifyUsingReifier: self"					],					"body" : [						"^ (state walk: anObj) reifyUsingReifier: self"					],					"isTestMethod" : false,					"category" : "reification",					"comment" : [ ],					"hash" : 24426340,					"argumentNames" : [						"anObj"					]				},				"DoubleLink" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19709590,					"argumentNames" : [						"anObject"					]				},				"SpProgressBarFixed" : {					"sourceCode" : [						"value: aNumber",						"",						"\tvalue := aNumber"					],					"body" : [						"value := aNumber"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19087926,					"argumentNames" : [						"aNumber"					]				},				"RBLiteralValueNode class" : {					"sourceCode" : [						"value: aValue",						"",						"\t^ self value: aValue start: 0 stop: -1"					],					"body" : [						"^ self value: aValue start: 0 stop: -1"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18995113,					"argumentNames" : [						"aValue"					]				},				"ClyStringPattern" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 22301590,					"argumentNames" : [						"anObject"					]				},				"IceNode" : {					"sourceCode" : [						"value: aValue",						"",						"\tvalue := aValue"					],					"body" : [						"value := aValue"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [ ],					"hash" : 23888280,					"argumentNames" : [						"aValue"					]				},				"DynamicEyeElement" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalueBlock := anObject"					],					"body" : [						"valueBlock := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20848540,					"argumentNames" : [						"anObject"					]				},				"HECharacter" : {					"sourceCode" : [						"value: aValue",						"",						"\tvalue := aValue asString"					],					"body" : [						"value := aValue asString"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18816808,					"argumentNames" : [						"aValue"					]				},				"IdentityNewValueHolder" : {					"sourceCode" : [						"value: anObject",						"",						"\tself value == anObject ifFalse: [ super value: anObject ]"					],					"body" : [						"self value == anObject ifFalse: [ super value: anObject ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18531135,					"argumentNames" : [						"anObject"					]				},				"RSAbstractMarkerDecoration" : {					"sourceCode" : [						"value: aValue",						"",						"\t\"Mark the value\"",						"",						"\tgetRelevantValueBlock := aValue"					],					"body" : [						"getRelevantValueBlock := aValue"					],					"isTestMethod" : false,					"category" : "public - configuration",					"comment" : [						"Mark the value"					],					"hash" : 23652250,					"argumentNames" : [						"aValue"					]				},				"ProcessLocalVariable" : {					"sourceCode" : [						"value: anObject",						"",						"\tProcessor activeProcess psValueAt: index put: anObject"					],					"body" : [						"Processor activeProcess psValueAt: index put: anObject"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [ ],					"hash" : 18752272,					"argumentNames" : [						"anObject"					]				},				"WeakKeyAssociation" : {					"sourceCode" : [						"value: anObject",						"",						"\t\"Store the argument, anObject, as the value of the receiver.\"",						"",						"\tanObject == self ifTrue: [ ",						"\t\tself error: 'Using the WeakAssociation as its own value' ].",						"\tvalue := anObject"					],					"body" : [						"anObject == self ifTrue: [ ",						"\tself error: 'Using the WeakAssociation as its own value' ].",						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Store the argument, anObject, as the value of the receiver."					],					"hash" : 19017579,					"argumentNames" : [						"anObject"					]				},				"ZnDefaultServerDelegate" : {					"sourceCode" : [						"value: request",						"",						"\t\"I implement the generic #value: message as equivalent to #handleRequest:\"",						"",						"\t^ self handleRequest: request"					],					"body" : [						"^ self handleRequest: request"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [						"I implement the generic #value: message as equivalent to #handleRequest:"					],					"hash" : 19257024,					"argumentNames" : [						"request"					]				},				"SDL_JoyAxisEvent" : {					"sourceCode" : [						"value: anObject",						"",						"\t\"This method was automatically generated\"",						"",						"\thandle signedShortAt: OFFSET_VALUE put: anObject"					],					"body" : [						"handle signedShortAt: OFFSET_VALUE put: anObject"					],					"isTestMethod" : false,					"category" : "accessing structure variables",					"comment" : [						"This method was automatically generated"					],					"hash" : 19858300,					"argumentNames" : [						"anObject"					]				},				"PredicateUnary class" : {					"sourceCode" : [						"value: arg",						"",						"\t^ self new",						"\t\t  firstArgument: arg;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  firstArgument: arg;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20618237,					"argumentNames" : [						"arg"					]				},				"HEAdditionalMethodState" : {					"sourceCode" : [						"value: anAdditionalMethodState",						"",						"\t\"I extract the information from the additional method state and convert it to exported literals.\"",						"",						"\tmethod := anAdditionalMethodState method asExportedLiteral.",						"\tselector := anAdditionalMethodState selector asExportedLiteral.",						"",						"\tvalue := Array new: anAdditionalMethodState size.",						"\t1 to: anAdditionalMethodState size do: [ :idx | ",						"\tvalue at: idx put: (anAdditionalMethodState basicAt: idx) ].",						"\tvalue := value asExportedLiteral"					],					"body" : [						"method := anAdditionalMethodState method asExportedLiteral.",						"selector := anAdditionalMethodState selector asExportedLiteral.",						"",						"value := Array new: anAdditionalMethodState size.",						"1 to: anAdditionalMethodState size do: [ :idx | ",						"value at: idx put: (anAdditionalMethodState basicAt: idx) ].",						"value := value asExportedLiteral"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"I extract the information from the additional method state and convert it to exported literals."					],					"hash" : 19336759,					"argumentNames" : [						"anAdditionalMethodState"					]				},				"SpSliderMark" : {					"sourceCode" : [						"value: aValue",						"",						"\tvalue := aValue"					],					"body" : [						"value := aValue"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18829974,					"argumentNames" : [						"aValue"					]				},				"GLMPagerSynchronizeScrollAnnouncement" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 22749590,					"argumentNames" : [						"anObject"					]				},				"SpValueHolder class" : {					"sourceCode" : [						"value: contents",						"",						"\t^ self new",						"\t\t  rawValue: contents;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  rawValue: contents;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18711549,					"argumentNames" : [						"contents"					]				},				"HEArray" : {					"sourceCode" : [						"value: anArray",						"",						"\tvalue := anArray collect: [ :each | each asExportedLiteral ]"					],					"body" : [						"value := anArray collect: [ :each | each asExportedLiteral ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18812486,					"argumentNames" : [						"anArray"					]				},				"RBReturnNode class" : {					"sourceCode" : [						"value: aNode",						"",						"\t^ self return: 0 value: aNode"					],					"body" : [						"^ self return: 0 value: aNode"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18976289,					"argumentNames" : [						"aNode"					]				},				"SDL_ControllerAxisEvent" : {					"sourceCode" : [						"value: anObject",						"",						"\t\"This method was automatically generated\"",						"",						"\thandle signedShortAt: OFFSET_VALUE put: anObject"					],					"body" : [						"handle signedShortAt: OFFSET_VALUE put: anObject"					],					"isTestMethod" : false,					"category" : "accessing structure variables",					"comment" : [						"This method was automatically generated"					],					"hash" : 19853692,					"argumentNames" : [						"anObject"					]				},				"FFIConst class" : {					"sourceCode" : [						"value: aValue",						"",						"\t^ self new value: aValue"					],					"body" : [						"^ self new value: aValue"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18333206,					"argumentNames" : [						"aValue"					]				},				"Unicode class" : {					"sourceCode" : [						"value: code",						"",						"\t^ Character value: code"					],					"body" : [						"^ Character value: code"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18914926,					"argumentNames" : [						"code"					]				},				"LGitExternalEnumerationUInt32" : {					"sourceCode" : [						"value: anInteger",						"",						"\tvalue := anInteger"					],					"body" : [						"value := anInteger"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20230550,					"argumentNames" : [						"anInteger"					]				},				"ProcessLocalVariable class" : {					"sourceCode" : [						"value: anObject",						"",						"\t^ self soleInstance value: anObject"					],					"body" : [						"^ self soleInstance value: anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18751787,					"argumentNames" : [						"anObject"					]				},				"HEClassTrait" : {					"sourceCode" : [						"value: aClassTrait",						"",						"\tvalue := aClassTrait instanceSide name"					],					"body" : [						"value := aClassTrait instanceSide name"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18819259,					"argumentNames" : [						"aClassTrait"					]				},				"Srfi41FormalPowerSeries" : {					"sourceCode" : [						"value: aSrfi41FormalPowerSeries",						"",						"\t^ [ ",						"\t  aSrfi41FormalPowerSeries car isZero",						"\t\t  ifTrue: [ ",						"\t\t\t  [ self car ]",						"\t\t\t\t  srfi41ConsFPS: [ ",						"\t\t\t\t\t  aSrfi41FormalPowerSeries cdr",						"\t\t\t\t\t  * (self cdr value: aSrfi41FormalPowerSeries) ]",						"\t\t\t\t  of: aSrfi41FormalPowerSeries var ]",						"\t\t  ifFalse: [ ",						"\t\t\t  | composition |",						"\t\t\t  composition := self cdr value: aSrfi41FormalPowerSeries.",						"\t\t\t  self car + (aSrfi41FormalPowerSeries car * composition) + ([ 0 ]",						"\t\t\t\t   srfi41ConsFPS: [ aSrfi41FormalPowerSeries cdr * composition ]",						"\t\t\t\t   of: self var) ] ] srfi41StreamFPSof: self var"					],					"body" : [						"^ [ ",						"  aSrfi41FormalPowerSeries car isZero",						"\t  ifTrue: [ ",						"\t\t  [ self car ]",						"\t\t\t  srfi41ConsFPS: [ ",						"\t\t\t\t  aSrfi41FormalPowerSeries cdr",						"\t\t\t\t  * (self cdr value: aSrfi41FormalPowerSeries) ]",						"\t\t\t  of: aSrfi41FormalPowerSeries var ]",						"\t  ifFalse: [ ",						"\t\t  | composition |",						"\t\t  composition := self cdr value: aSrfi41FormalPowerSeries.",						"\t\t  self car + (aSrfi41FormalPowerSeries car * composition) + ([ 0 ]",						"\t\t\t   srfi41ConsFPS: [ aSrfi41FormalPowerSeries cdr * composition ]",						"\t\t\t   of: self var) ] ] srfi41StreamFPSof: self var"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 24422499,					"argumentNames" : [						"aSrfi41FormalPowerSeries"					]				},				"GTSpotterIterator" : {					"sourceCode" : [						"value: aContext",						"",						"\tself context: aContext"					],					"body" : [						"self context: aContext"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [ ],					"hash" : 23009685,					"argumentNames" : [						"aContext"					]				},				"TKTConfiguration" : {					"sourceCode" : [						"value: aValue",						"",						"\tvalue := aValue"					],					"body" : [						"value := aValue"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18238103,					"argumentNames" : [						"aValue"					]				},				"HEExportedMetaclass" : {					"sourceCode" : [						"value: aMetaclass",						"",						"\tvalue := aMetaclass instanceSide name"					],					"body" : [						"value := aMetaclass instanceSide name"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18821563,					"argumentNames" : [						"aMetaclass"					]				},				"LGitFunctionReturn" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20248983,					"argumentNames" : [						"anObject"					]				},				"FFIConst" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18333336,					"argumentNames" : [						"anObject"					]				},				"MessageSend" : {					"sourceCode" : [						"value: anObject",						"",						"\t^ receiver perform: selector with: anObject"					],					"body" : [						"^ receiver perform: selector with: anObject"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [ ],					"hash" : 18894726,					"argumentNames" : [						"anObject"					]				},				"Association" : {					"sourceCode" : [						"value: anObject",						"",						"\t\"Store the argument, anObject, as the value of the receiver.\"",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Store the argument, anObject, as the value of the receiver."					],					"hash" : 18623895,					"argumentNames" : [						"anObject"					]				},				"PRParameterValue" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 23469467,					"argumentNames" : [						"anObject"					]				},				"SpLabelledSliderInput" : {					"sourceCode" : [						"value: aNumber",						"",						"\t^ self sliderInput value: aNumber"					],					"body" : [						"^ self sliderInput value: aNumber"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20216363,					"argumentNames" : [						"aNumber"					]				},				"Job" : {					"sourceCode" : [						"value: aNumber",						"",						"\tself currentValue: aNumber"					],					"body" : [						"self currentValue: aNumber"					],					"isTestMethod" : false,					"category" : "compatibility",					"comment" : [ ],					"hash" : 18098325,					"argumentNames" : [						"aNumber"					]				},				"RBSelectorNode class" : {					"sourceCode" : [						"value: aString",						"",						"\t^ self value: aString start: #( 0 )"					],					"body" : [						"^ self value: aString start: #( 0 )"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18988035,					"argumentNames" : [						"aString"					]				},				"ValueLink class" : {					"sourceCode" : [						"value: aValue",						"",						"\t^ self new value: aValue"					],					"body" : [						"^ self new value: aValue"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 19006998,					"argumentNames" : [						"aValue"					]				},				"RxsPredicate" : {					"sourceCode" : [						"value: aCharacter",						"",						"\t^ predicate value: aCharacter"					],					"body" : [						"^ predicate value: aCharacter"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19298381,					"argumentNames" : [						"aCharacter"					]				},				"ZnMonticelloServerDelegate" : {					"sourceCode" : [						"value: request",						"",						"\t\"I implement the generic #value: message as equivalent to #handleRequest:\"",						"",						"\t^ self handleRequest: request"					],					"body" : [						"^ self handleRequest: request"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [						"I implement the generic #value: message as equivalent to #handleRequest:"					],					"hash" : 19273408,					"argumentNames" : [						"request"					]				},				"PointerEyeElement" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := EyePointerWrapper wrap: anObject"					],					"body" : [						"value := EyePointerWrapper wrap: anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20849758,					"argumentNames" : [						"anObject"					]				},				"SliderPresenter" : {					"sourceCode" : [						"value: aNumber",						"",						"\t\"<api: #integer min: #min max: #max getter:#value registration: #whenValueChanged:>\"",						"",						"\t\"Set the value in a range between min and max\"",						"",						"\tvalue value == aNumber ifTrue: [ ^ self ].",						"\tvalue value: aNumber"					],					"body" : [						"value value == aNumber ifTrue: [ ^ self ].",						"value value: aNumber"					],					"isTestMethod" : false,					"category" : "api",					"comment" : [						"<api: #integer min: #min max: #max getter:#value registration: #whenValueChanged:>"					],					"hash" : 19567744,					"argumentNames" : [						"aNumber"					]				},				"SpSliderInput" : {					"sourceCode" : [						"value: aNumber",						"",						"\tslider value: aNumber"					],					"body" : [						"slider value: aNumber"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20222230,					"argumentNames" : [						"aNumber"					]				},				"GTFilter" : {					"sourceCode" : [						"value: aSpotterContext",						"",						"\t\"I provide an entry point for performing a search that is ",						"\tpolymorphic with BlockClosure>>value:. I return the list of",						"\tfiltered items.\"",						"",						"\t^ [ self applyFilterInContext: aSpotterContext ] ensure: [ ",						"\t\t  context := nil \" release the context after search is completed \" ]"					],					"body" : [						"^ [ self applyFilterInContext: aSpotterContext ] ensure: [ ",						"\t  context := nil \" release the context after search is completed \" ]"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [						"I provide an entry point for performing a search that is ",						"\tpolymorphic with BlockClosure>>value:. I return the list of",						"\tfiltered items."					],					"hash" : 23001233,					"argumentNames" : [						"aSpotterContext"					]				},				"STONTestAssociation" : {					"sourceCode" : [						"value: anObject",						"",						"\tsuper value: anObject.",						"\ttimestamp := self now"					],					"body" : [						"super value: anObject.",						"timestamp := self now"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 22028189,					"argumentNames" : [						"anObject"					]				},				"HEClassVariable" : {					"sourceCode" : [						"value: aClassVariable",						"",						"\tvalue := aClassVariable name"					],					"body" : [						"value := aClassVariable name"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18820648,					"argumentNames" : [						"aClassVariable"					]				},				"ValueNotFound" : {					"sourceCode" : [						"value: aValue",						"",						"\t^ self object: aValue"					],					"body" : [						"^ self object: aValue"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19007936,					"argumentNames" : [						"aValue"					]				},				"KeyboardKey class" : {					"sourceCode" : [						"value: aKeyValue",						"",						"\t^ KeyCodeTable at: aKeyValue"					],					"body" : [						"^ KeyCodeTable at: aKeyValue"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18850404,					"argumentNames" : [						"aKeyValue"					]				},				"ObservableValueHolder class" : {					"sourceCode" : [						"value: contents",						"",						"\t^ self new",						"\t\t  rawValue: contents;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  rawValue: contents;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18216445,					"argumentNames" : [						"contents"					]				},				"TTLAssociation" : {					"sourceCode" : [						"value: anObject",						"",						"\tsuper value: anObject.",						"\ttimestamp := self now"					],					"body" : [						"super value: anObject.",						"timestamp := self now"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19714461,					"argumentNames" : [						"anObject"					]				},				"MorphicAlarm" : {					"sourceCode" : [						"value: anArgument",						"",						"\t| nArgs |",						"\tnumArgs ifNil: [ numArgs := selector numArgs ].",						"\tnArgs := arguments ifNil: [ 0 ] ifNotNil: [ arguments size ].",						"\tnArgs = numArgs ifTrue: [ \"Ignore extra argument\" ^ self value ].",						"\t^ arguments",						"\t\t  ifNil: [ receiver perform: selector with: anArgument ]",						"\t\t  ifNotNil: [ ",						"\t\t\t  receiver",						"\t\t\t\t  perform: selector",						"\t\t\t\t  withArguments: (arguments copyWith: anArgument) ]"					],					"body" : [						"| nArgs |",						"numArgs ifNil: [ numArgs := selector numArgs ].",						"nArgs := arguments ifNil: [ 0 ] ifNotNil: [ arguments size ].",						"nArgs = numArgs ifTrue: [ \"Ignore extra argument\" ^ self value ].",						"^ arguments",						"\t  ifNil: [ receiver perform: selector with: anArgument ]",						"\t  ifNotNil: [ ",						"\t\t  receiver",						"\t\t\t  perform: selector",						"\t\t\t  withArguments: (arguments copyWith: anArgument) ]"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [ ],					"hash" : 18808571,					"argumentNames" : [						"anArgument"					]				},				"HEMethodLiteral" : {					"sourceCode" : [						"value: aMethod",						"",						"\tclassName := aMethod methodClass name.",						"\tselector := aMethod selector"					],					"body" : [						"className := aMethod methodClass name.",						"selector := aMethod selector"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18828124,					"argumentNames" : [						"aMethod"					]				},				"RBValueToken" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19019416,					"argumentNames" : [						"anObject"					]				},				"FFIExternalValueHolder" : {					"sourceCode" : [						"value: anObject",						"",						"\tself type handle: data at: 1 put: anObject"					],					"body" : [						"self type handle: data at: 1 put: anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18350816,					"argumentNames" : [						"anObject"					]				},				"MorphicSliderAdapter" : {					"sourceCode" : [						"value: aValue",						"",						"\t^ self model value: aValue"					],					"body" : [						"^ self model value: aValue"					],					"isTestMethod" : false,					"category" : "widget API",					"comment" : [ ],					"hash" : 19607595,					"argumentNames" : [						"aValue"					]				},				"FFIEnumeration" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18314390,					"argumentNames" : [						"anObject"					]				},				"BlockClosure" : {					"sourceCode" : [						"value: anArg",						"",						"\t\"Activate the receiver, creating a closure activation (MethodContext)",						"\t whose closure is the receiver and whose caller is the sender of this message.",						"\t Supply the argument and copied values to the activation as its arguments and copied temps.",						"\t Primitive. Optional (but you're going to want this for performance).\"",						"",						"\t<primitive: 202>",						"\tnumArgs ~= 1 ifTrue: [ self numArgsError: 1 ].",						"\tself primitiveFailed"					],					"body" : [						"numArgs ~= 1 ifTrue: [ self numArgsError: 1 ].",						"self primitiveFailed"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [						"Activate the receiver, creating a closure activation (MethodContext)",						"\t whose closure is the receiver and whose caller is the sender of this message.",						"\t Supply the argument and copied values to the activation as its arguments and copied temps.",						"\t Primitive. Optional (but you're going to want this for performance)."					],					"hash" : 17909686,					"argumentNames" : [						"anArg"					]				},				"ZnReadEvalPrintDelegate" : {					"sourceCode" : [						"value: request",						"",						"\t\"I implement the generic #value: message as equivalent to #handleRequest:\"",						"",						"\t^ self handleRequest: request"					],					"body" : [						"^ self handleRequest: request"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [						"I implement the generic #value: message as equivalent to #handleRequest:"					],					"hash" : 22059968,					"argumentNames" : [						"request"					]				},				"TKTFutureFailure" : {					"sourceCode" : [						"value: aValue",						"",						"\tvalue := aValue"					],					"body" : [						"value := aValue"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18245270,					"argumentNames" : [						"aValue"					]				},				"RBLiteralNode class" : {					"sourceCode" : [						"value: aValue",						"",						"\t^ ((aValue class == Array or: [ aValue class == ByteArray ])",						"\t\t   ifTrue: [ RBLiteralArrayNode ]",						"\t\t   ifFalse: [ RBLiteralValueNode ]) value: aValue"					],					"body" : [						"^ ((aValue class == Array or: [ aValue class == ByteArray ])",						"\t   ifTrue: [ RBLiteralArrayNode ]",						"\t   ifFalse: [ RBLiteralValueNode ]) value: aValue"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18993850,					"argumentNames" : [						"aValue"					]				},				"Slider" : {					"sourceCode" : [						"value: newValue",						"",						"\t\"Drive the slider position externally...\"",						"",						"\tvalue := newValue min: 1.0 max: 0.0.",						"\tself computeSlider"					],					"body" : [						"value := newValue min: 1.0 max: 0.0.",						"self computeSlider"					],					"isTestMethod" : false,					"category" : "model access",					"comment" : [						"Drive the slider position externally..."					],					"hash" : 20039837,					"argumentNames" : [						"newValue"					]				},				"ClapExpression" : {					"sourceCode" : [						"value: arg",						"",						"\t^ specification valueFor: self with: arg"					],					"body" : [						"^ specification valueFor: self with: arg"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [ ],					"hash" : 18225361,					"argumentNames" : [						"arg"					]				},				"IncrementalSliderMorph" : {					"sourceCode" : [						"value: aNumber",						"",						"\t\"Set the slider value.\"",						"",						"\t(self sliderMorph ifNil: [ ^ self ]) scaledValue: aNumber.",						"\tself model ifNotNil: [ ",						"\t\tself setValueSelector ifNotNil: [ ",						"\t\t\tself model",						"\t\t\t\tperform: self setValueSelector",						"\t\t\t\twith: self sliderMorph scaledValue ] ].",						"\tself",						"\t\tchanged: #minEnabled;",						"\t\tchanged: #maxEnabled"					],					"body" : [						"(self sliderMorph ifNil: [ ^ self ]) scaledValue: aNumber.",						"self model ifNotNil: [ ",						"\tself setValueSelector ifNotNil: [ ",						"\t\tself model",						"\t\t\tperform: self setValueSelector",						"\t\t\twith: self sliderMorph scaledValue ] ].",						"self",						"\tchanged: #minEnabled;",						"\tchanged: #maxEnabled"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Set the slider value."					],					"hash" : 20034696,					"argumentNames" : [						"aNumber"					]				},				"RBLiteralArrayNode class" : {					"sourceCode" : [						"value: aValue",						"",						"\t^ self new",						"\t\t  startPosition: 0",						"\t\t  contents:",						"\t\t\t  (aValue asArray collect: [ :each | RBLiteralNode value: each ])",						"\t\t  stopPosition: -1",						"\t\t  isByteArray: aValue class ~~ Array;",						"\t\t  yourself"					],					"body" : [						"^ self new",						"\t  startPosition: 0",						"\t  contents:",						"\t\t  (aValue asArray collect: [ :each | RBLiteralNode value: each ])",						"\t  stopPosition: -1",						"\t  isByteArray: aValue class ~~ Array;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18995155,					"argumentNames" : [						"aValue"					]				},				"DerivedUnit" : {					"sourceCode" : [						"value: myUnitValue",						"",						"\tunitValue := myUnitValue"					],					"body" : [						"unitValue := myUnitValue"					],					"isTestMethod" : false,					"category" : "initialization",					"comment" : [ ],					"hash" : 20481177,					"argumentNames" : [						"myUnitValue"					]				},				"Symbol" : {					"sourceCode" : [						"value: anObject",						"",						"\t^ anObject perform: self"					],					"body" : [						"^ anObject perform: self"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [ ],					"hash" : 18624960,					"argumentNames" : [						"anObject"					]				},				"SliderInput" : {					"sourceCode" : [						"value: aNumber",						"",						"\tslider value: aNumber"					],					"body" : [						"slider value: aNumber"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19632177,					"argumentNames" : [						"aNumber"					]				},				"GLMPort" : {					"sourceCode" : [						"value: anObject",						"",						"\tself value: anObject in: GLMTransmissionContext new"					],					"body" : [						"self value: anObject in: GLMTransmissionContext new"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 22727493,					"argumentNames" : [						"anObject"					]				},				"FFIConstantArgument" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18351257,					"argumentNames" : [						"anObject"					]				},				"GLMContextChanged" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 22713240,					"argumentNames" : [						"anObject"					]				},				"SpMorphicSliderAdapter" : {					"sourceCode" : [						"value: aValue",						"",						"\t| value |",						"\tvalue := aValue isNumber",						"\t\t         ifTrue: [ aValue ]",						"\t\t         ifFalse: [ ",						"\t\t\t         (aValue includes: $/)",						"\t\t\t\t         ifTrue: [ (NumberParser on: aValue) nextFraction ]",						"\t\t\t\t         ifFalse: [ aValue asNumber ] ].",						"",						"\t^ self presenter value: value asFloat"					],					"body" : [						"| value |",						"value := aValue isNumber",						"\t         ifTrue: [ aValue ]",						"\t         ifFalse: [ ",						"\t\t         (aValue includes: $/)",						"\t\t\t         ifTrue: [ (NumberParser on: aValue) nextFraction ]",						"\t\t\t         ifFalse: [ aValue asNumber ] ].",						"",						"^ self presenter value: value asFloat"					],					"isTestMethod" : false,					"category" : "widget API",					"comment" : [ ],					"hash" : 20859020,					"argumentNames" : [						"aValue"					]				},				"Unit" : {					"sourceCode" : [						"value: number",						"",						"\t\"Coerce the receiver to be a UnitValue with the given value.\"",						"",						"\t^ UnitValue unit: self value: number"					],					"body" : [						"^ UnitValue unit: self value: number"					],					"isTestMethod" : false,					"category" : "conversion",					"comment" : [						"Coerce the receiver to be a UnitValue with the given value."					],					"hash" : 20477683,					"argumentNames" : [						"number"					]				},				"HEExportedLiteral" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18811030,					"argumentNames" : [						"anObject"					]				},				"SpMillerActivation" : {					"sourceCode" : [						"value: anInteger",						"",						"\tvalue := anInteger"					],					"body" : [						"value := anInteger"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18807446,					"argumentNames" : [						"anInteger"					]				},				"FullBlockClosure" : {					"sourceCode" : [						"value: firstArg",						"",						"\t\"Activate the receiver, creating a closure activation (MethodContext)",						"\t whose closure is the receiver and whose caller is the sender of this",						"\t message. Supply the argument and copied values to the activation",						"\t as its argument and copied temps. Primitive. Essential.\"",						"",						"\t<primitive: 207>",						"\t| newContext |",						"\tnumArgs ~= 1 ifTrue: [ self numArgsError: 1 ].",						"\tfalse",						"\t\tifTrue: [ \"Old code to simulate the closure value primitive on VMs that lack it.\"",						"\t\t\tnewContext := self asContextWithSender: thisContext sender.",						"\t\t\tnewContext at: 1 put: firstArg.",						"\t\t\tthisContext privSender: newContext ]",						"\t\tifFalse: [ self primitiveFailed ]"					],					"body" : [						"| newContext |",						"numArgs ~= 1 ifTrue: [ self numArgsError: 1 ].",						"false",						"\tifTrue: [ \"Old code to simulate the closure value primitive on VMs that lack it.\"",						"\t\tnewContext := self asContextWithSender: thisContext sender.",						"\t\tnewContext at: 1 put: firstArg.",						"\t\tthisContext privSender: newContext ]",						"\tifFalse: [ self primitiveFailed ]"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [						"Activate the receiver, creating a closure activation (MethodContext)",						"\t whose closure is the receiver and whose caller is the sender of this",						"\t message. Supply the argument and copied values to the activation",						"\t as its argument and copied temps. Primitive. Essential."					],					"hash" : 18174381,					"argumentNames" : [						"firstArg"					]				},				"Character class" : {					"sourceCode" : [						"value: anInteger",						"",						"\t\"Answer the Character whose value is anInteger.\"",						"",						"\t<primitive: 170>",						"\t^ self primitiveFailed"					],					"body" : [						"^ self primitiveFailed"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [						"Answer the Character whose value is anInteger."					],					"hash" : 18687508,					"argumentNames" : [						"anInteger"					]				},				"NewValueHolder" : {					"sourceCode" : [						"value: anObject",						"",						"\tself handleCircularReferencesWhile: [ ",						"\t\t| oldValue |",						"\t\toldValue := value.",						"\t\tvalue := anObject.",						"\t\tself valueChanged: oldValue ]"					],					"body" : [						"self handleCircularReferencesWhile: [ ",						"\t| oldValue |",						"\toldValue := value.",						"\tvalue := anObject.",						"\tself valueChanged: oldValue ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18529188,					"argumentNames" : [						"anObject"					]				},				"ZnCookie" : {					"sourceCode" : [						"value: aValue",						"",						"\tattributes at: 'value' put: aValue"					],					"body" : [						"attributes at: 'value' put: aValue"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19254603,					"argumentNames" : [						"aValue"					]				},				"TKTFutureSuccess" : {					"sourceCode" : [						"value: aValue",						"",						"\tvalue := aValue"					],					"body" : [						"value := aValue"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18246294,					"argumentNames" : [						"aValue"					]				},				"Continuation" : {					"sourceCode" : [						"value: anObject",						"",						"\t\"Invoke the continuation and answer anObject as return value.\"",						"",						"\tself terminate: thisContext.",						"\tself restoreValues.",						"\tthisContext swapSender: values first.",						"\t^ anObject"					],					"body" : [						"self terminate: thisContext.",						"self restoreValues.",						"thisContext swapSender: values first.",						"^ anObject"					],					"isTestMethod" : false,					"category" : "evaluating",					"comment" : [						"Invoke the continuation and answer anObject as return value."					],					"hash" : 18752011,					"argumentNames" : [						"anObject"					]				},				"HEPragma" : {					"sourceCode" : [						"value: aPragma",						"",						"\tmethod := aPragma method asExportedLiteral.",						"\tkeyword := aPragma selector asExportedLiteral.",						"\targuments := aPragma arguments asExportedLiteral"					],					"body" : [						"method := aPragma method asExportedLiteral.",						"keyword := aPragma selector asExportedLiteral.",						"arguments := aPragma arguments asExportedLiteral"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18830338,					"argumentNames" : [						"aPragma"					]				},				"HEGlobalVariable" : {					"sourceCode" : [						"value: aClassVariable",						"",						"\tvalue := aClassVariable name"					],					"body" : [						"value := aClassVariable name"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18824488,					"argumentNames" : [						"aClassVariable"					]				},				"SpStyleVariable" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 20545686,					"argumentNames" : [						"anObject"					]				},				"LabelledSliderInput" : {					"sourceCode" : [						"value: aNumber",						"",						"\t^ self sliderInput value: aNumber"					],					"body" : [						"^ self sliderInput value: aNumber"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19627563,					"argumentNames" : [						"aNumber"					]				},				"HEAssociation" : {					"sourceCode" : [						"value: anAssociation",						"",						"\tvalue := anAssociation value asExportedLiteral.",						"\tkey := anAssociation key asExportedLiteral"					],					"body" : [						"value := anAssociation value asExportedLiteral.",						"key := anAssociation key asExportedLiteral"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18813633,					"argumentNames" : [						"anAssociation"					]				},				"ZnImageExampleDelegate" : {					"sourceCode" : [						"value: request",						"",						"\t\"I implement the generic #value: message as equivalent to #handleRequest:\"",						"",						"\t^ self handleRequest: request"					],					"body" : [						"^ self handleRequest: request"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [						"I implement the generic #value: message as equivalent to #handleRequest:"					],					"hash" : 22059456,					"argumentNames" : [						"request"					]				},				"OSJoyAxisEvent" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19789466,					"argumentNames" : [						"anObject"					]				},				"FFILiteralArgument class" : {					"sourceCode" : [						"value: aValue",						"",						"\t^ self new value: aValue"					],					"body" : [						"^ self new value: aValue"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 18353686,					"argumentNames" : [						"aValue"					]				},				"MetacelloAbstractVersionConstructor" : {					"sourceCode" : [						"value: anObject",						"",						"\tself root value: anObject constructor: self"					],					"body" : [						"self root value: anObject constructor: self"					],					"isTestMethod" : false,					"category" : "api",					"comment" : [ ],					"hash" : 19323525,					"argumentNames" : [						"anObject"					]				},				"PRParameterValue class" : {					"sourceCode" : [						"value: aString",						"",						"\t^ self new value: aString"					],					"body" : [						"^ self new value: aString"					],					"isTestMethod" : false,					"category" : "instance creation",					"comment" : [ ],					"hash" : 23469334,					"argumentNames" : [						"aString"					]				},				"ZnTestRunnerDelegate" : {					"sourceCode" : [						"value: request",						"",						"\t\"I implement the generic #value: message as equivalent to #handleRequest:\"",						"",						"\t^ self handleRequest: request"					],					"body" : [						"^ self handleRequest: request"					],					"isTestMethod" : false,					"category" : "public",					"comment" : [						"I implement the generic #value: message as equivalent to #handleRequest:"					],					"hash" : 22060480,					"argumentNames" : [						"request"					]				},				"RBAssignmentNode" : {					"sourceCode" : [						"value: aValueNode",						"",						"\tvalue := aValueNode.",						"\tvalue parent: self"					],					"body" : [						"value := aValueNode.",						"value parent: self"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19039081,					"argumentNames" : [						"aValueNode"					]				},				"ObservableValueHolder" : {					"sourceCode" : [						"value: anObject",						"",						"\t\"Handle circular references as explained in the class comment\"",						"",						"\tlock ifTrue: [ ^ self ].",						"",						"\tlock := true.",						"",						"\t[ ",						"\t| oldValue |",						"\toldValue := value.",						"\tvalue := anObject.",						"\tself valueChanged: oldValue ] ensure: [ lock := false ]"					],					"body" : [						"lock ifTrue: [ ^ self ].",						"",						"lock := true.",						"",						"[ ",						"| oldValue |",						"oldValue := value.",						"value := anObject.",						"self valueChanged: oldValue ] ensure: [ lock := false ]"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [						"Handle circular references as explained in the class comment"					],					"hash" : 18217387,					"argumentNames" : [						"anObject"					]				},				"RBSelectorNode" : {					"sourceCode" : [						"value: aString",						"",						"\tvalue := aString asSymbol"					],					"body" : [						"value := aString asSymbol"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19041323,					"argumentNames" : [						"aString"					]				},				"HETraitLiteral" : {					"sourceCode" : [						"value: aTrait",						"",						"\tvalue := aTrait name"					],					"body" : [						"value := aTrait name"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18832168,					"argumentNames" : [						"aTrait"					]				},				"ValueLink" : {					"sourceCode" : [						"value: aValue",						"",						"\tvalue := aValue"					],					"body" : [						"value := aValue"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19007127,					"argumentNames" : [						"aValue"					]				},				"LiteralVariable" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 18673559,					"argumentNames" : [						"anObject"					]				},				"RGGlobalVariableDefinition" : {					"sourceCode" : [						"value: anObject",						"",						"\tvalue := anObject"					],					"body" : [						"value := anObject"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 19179160,					"argumentNames" : [						"anObject"					]				}			},			"senders" : [				"ACL>>#valueWithArguments:",				"ACL>>#rewriting:rewritten:focusAST:focusVar:do:",				"AColorSelectorMorph>>#initialize",				"ASTEvaluationTest>>#testEvaluate",				"AbstractEyeElement>>#selectedObjectDo:",				"AbstractFileReference>>#writeStreamDo:",				"AbstractFileReference>>#readStreamDo:",				"AbstractFileReference>>#readStreamEncoded:do:",				"AbstractFileReference>>#binaryWriteStreamDo:",				"AbstractFileReference>>#binaryReadStreamDo:",				"AbstractFileReference>>#writeStreamEncoded:do:",				"AbstractFormButtonPresenter>>#deactivationAction:",				"AbstractFormButtonPresenter>>#activationAction:",				"AbstractFormButtonPresenter>>#labelClickable:",				"AbstractFormButtonPresenter>>#state:",				"AbstractFormButtonPresenter>>#label:",				"AbstractWidgetPresenter>>#wantDropBlock:",				"AbstractWidgetPresenter>>#acceptDropBlock:",				"AbstractWidgetPresenter>>#borderWidth:",				"AbstractWidgetPresenter>>#enabled:",				"AbstractWidgetPresenter>>#help:",				"AbstractWidgetPresenter>>#borderColor:",				"AbstractWidgetPresenter>>#dragTransformationBlock:",				"AbstractWidgetPresenter>>#dragEnabled:",				"AbstractWidgetPresenter>>#transferBlock:",				"AbstractWidgetPresenter>>#color:",				"AbstractWidgetPresenter>>#dropEnabled:",				"AdditionalMethodState>>#at:put:",				"AdditionalMethodState>>#at:ifPresent:",				"AdditionalMethodState>>#pragmasDo:",				"Alien>>#freeAfter:",				"AnnouncementDeliveryCondition>>#handlesAnnouncement:",				"Announcer>>#gtInspectorAnnouncementsIn:context:",				"AnnouncerTest>>#testSubscribeSend",				"AnnouncerTest>>#testUnsubscribeSend",				"AnnouncerTest>>#testPreparationAnnouncementDeliveryWhenNoSubscriptions",				"AnnouncerTest>>#testPreparationAnnouncementDelivery",				"Archive>>#addTree:removingFirstCharacters:match:",				"ArithTest>>#testGreaterThanOneo",				"ArithTest>>#testPositiveo",				"ArithTheory>>#oneo",				"ArithTheory>>#zeroo",				"ArithTheory>>#positiveo",				"ArithTheory>>#bitAndo",				"ArithTheory>>#addero",				"ArithTheory>>#bitXoro",				"ArithTheory>>#greaterThanOneo",				"Array>>#hasLiteralSuchThat:",				"ArrayedCollection>>#fillFrom:with:",				"ArrayedCollection>>#bisect:from:to:baseBlock:",				"ArrayedCollection>>#countingSort:maximum:",				"AsciiCharset class>>#toUppercase:",				"AsciiCharset class>>#toLowercase:",				"AsciiCharsetTest>>#testIsCasedLetter",				"AsciiCharsetTest>>#testIsInitialQuote",				"AsciiCharsetTest>>#testIsDecimalDigit",				"AsciiCharsetTest>>#testIsLetter",				"AsciiCharsetTest>>#testIsOtherPunctuation",				"AsciiCharsetTest>>#testIsModifierSymbol",				"AsciiCharsetTest>>#testIsOtherSymbol",				"AsciiCharsetTest>>#testIsTitlecaseLetter",				"AsciiCharsetTest>>#testIsFinalQuote",				"AsciiCharsetTest>>#testIsOtherLetter",				"AsciiCharsetTest>>#testIsDigit",				"AsciiCharsetTest>>#testIsConnectorPunctuation",				"AsciiCharsetTest>>#testIsEnclosingMark",				"AsciiCharsetTest>>#testIsNonspacingMark",				"AsciiCharsetTest>>#testIsLetterNumber",				"AsciiCharsetTest>>#testIsOpenPunctuation",				"AsciiCharsetTest>>#testIsUppercase",				"AsciiCharsetTest>>#testIsPrivateOther",				"AsciiCharsetTest>>#testIsDashPunctuation",				"AsciiCharsetTest>>#testIsMathSymbol",				"AsciiCharsetTest>>#testIsSurrogateOther",				"AsciiCharsetTest>>#testIsControlOther",				"AsciiCharsetTest>>#testIsCurrencySymbol",				"AsciiCharsetTest>>#testIsLineSeparator",				"AsciiCharsetTest>>#testIsFormatOther",				"AsciiCharsetTest>>#testIsLowercase",				"AsciiCharsetTest>>#testIsSpaceSeparator",				"AsciiCharsetTest>>#testIsOtherNumber",				"AsciiCharsetTest>>#testIsClosePunctuation",				"AsciiCharsetTest>>#testIsSpacingCombiningMark",				"AsciiCharsetTest>>#testIsLetterModifier",				"AsciiCharsetTest>>#testIsParagraphSeparator",				"AsyncFile>>#readByteCount:fromFilePosition:onCompletionDo:",				"AthensBalloonSurface>>#createPath:",				"AthensCairoCanvas>>#transformBy:withClip:in:during:",				"AthensCairoPathBuilder>>#createPath:",				"AthensCairoSurface>>#drawDuring:",				"AthensCairoSurface class>>#createFromFile:ifFailed:",				"AthensCanvasWrapper>>#transformBy:clippingTo:during:smoothing:",				"AthensCanvasWrapper>>#clipBy:during:",				"AthensCanvasWrapper>>#clipWrapperTransformBy:clippingTo:during:smoothing:",				"AthensCanvasWrapper>>#translateBy:clippingTo:during:",				"AthensCanvasWrapper>>#clipWrapperAndAthensTransformBy:clippingTo:during:smoothing:",				"AthensPathSegment>>#do:",				"AthensSimplePathBuilder>>#createPath:",				"AthensSurface>>#drawDuring:",				"AthensSurfaceExamples>>#renderOn:",				"AthensTextDisplayCommand>>#do:",				"AthensTiger>>#readParts",				"AthensTreeDemo>>#buildSubtreeFor:level:",				"Bag>>#do:",				"BalloonEngineConstants class>>#initializeInstVarNames:prefixedBy:",				"BaselineOfMetaSTExporter>>#scriptExportExampleMessagesForDoc",				"BaselineOfMetaSTExporter>>#manuallyExportExampleMessagesForDoc",				"BaselineOfMetaSTExporter>>#scriptExportCoreMessagesForDoc",				"BaselineOfMorphic>>#cleanUpAfterMorphicInitialization",				"BasicBehaviorClassMetaclassTest>>#testSuperclass",				"Behavior>>#whichSuperclassSatisfies:",				"Behavior>>#withThorougMethodsReferTo:do:",				"Behavior>>#allSuperclassesDo:",				"Behavior>>#selectSuperclasses:",				"Behavior>>#selectSubclasses:",				"Behavior>>#withAllSuperAndSubclassesDo:",				"Behavior>>#withAllSuperclassesDo:",				"Behavior>>#withMethodsReferTo:do:",				"Behavior>>#allInstancesDo:",				"Behavior>>#allSubclassesDo:",				"Bezier2Segment>>#controlPointsDo:",				"Bezier3Segment>>#controlPointsDo:",				"BitArray>>#do:iter:byte:",				"BitArray>>#blend:len:",				"BitArray class>>#getIndex:byte:byte:size:tabulate:",				"BlockClosure>>#'<~~>'",				"BlockClosure>>#cull:",				"BlockClosure>>#valueWithExit",				"BlockClosure>>#srfi41Iter:",				"BlockClosure>>#B",				"BlockClosure>>#repeatWithGCIf:",				"BlockClosure>>#'<~>'",				"BlockClosure>>#split:indicesDo:",				"BlockClosure>>#S",				"BlockClosure>>#'<~~~>'",				"BlockClosure>>#W",				"BlockClosure>>#valueWithPossibleArgument:",				"BlockClosure>>#C",				"BlockClosure>>#memoizedUsing:",				"BlockClosure>>#R",				"BlockClosure>>#'>>~'",				"BlockClosure>>#srfi41ConsInjectCar:",				"BlockClosure>>#,",				"BlockClosure>>#tabled",				"BlockClosure class>>#B",				"BlockClosureTest>>#testC",				"BlockClosureTest>>#testK",				"BlockClosureTest>>#testMemoizedLRUCache",				"BlockClosureTest>>#testD2",				"BlockClosureTest>>#testZ",				"BlockClosureTest>>#testI",				"BlockClosureTest>>#testMemoizedDictionary",				"BlockClosureTest>>#testB",				"BlockClosureTest>>#testW",				"BlockClosureTest>>#testS",				"BlockClosuresTestCase>>#testCannotReturn",				"BlockClosuresTestCase>>#gpsExample1:",				"BlockClosuresTestCase>>#gpsExample2:",				"BlockClosuresTestCase>>#example2:",				"BlockClosuresTestCase>>#testReentrantBlockOldEnvironment",				"BlockClosuresTestCase>>#constructFibonacciBlockInDeadFrame",				"BlockClosuresTestCase>>#nestedLoopsExample:",				"BlockClosuresTestCase>>#testSharedClosureEnvironment",				"BlockClosuresTestCase>>#continuationExample3:",				"BlockClosuresTestCase>>#example1:",				"BlockClosuresTestCase>>#testReentrantBlock",				"BlockClosuresTestCase>>#continuationExample1:",				"BlockClosuresTestCase>>#continuationExample2:",				"Boolean>>#asExternalTypeOn:",				"ButtonPresenter>>#font:",				"ButtonPresenter>>#action:",				"ButtonPresenter>>#shortcut:",				"ButtonPresenter>>#icon:",				"ButtonPresenter>>#menu:",				"ButtonPresenter>>#label:",				"ButtonPresenter>>#state:",				"ButtonPresenter>>#performAction",				"ButtonPresenter>>#iconName:",				"ButtonPresenter>>#askBeforeChanging:",				"ByteArray>>#hexDumpOn:max:",				"ByteArray>>#byteAt:update:",				"ByteString>>#at:",				"ByteSymbol>>#at:",				"ByteTextConverter class>>#initializeTables",				"ByteTextConverter class>>#parseUnicodeOrgSpec:",				"BytecodeEncoder class>>#specialSelectors",				"Canvas>>#cache:using:during:",				"Canvas>>#translateBy:clippingTo:during:",				"Canvas>>#preserveStateDuring:",				"ChangeSet class>>#changeSetsNamedSuchThat:",				"Character>>#basicPharoToIso",				"Character>>#to:",				"Character>>#isSafeForHTTP",				"Character class>>#nbsp",				"Character class>>#cr",				"Character class>>#digitValue:",				"Character class>>#enter",				"Character class>>#null",				"Character class>>#space",				"Character class>>#delete",				"Character class>>#materializeFrom:",				"Character class>>#backspace",				"Character class>>#insert",				"Character class>>#codePoint:",				"Character class>>#pageDown",				"Character class>>#linefeed",				"Character class>>#arrowDown",				"Character class>>#tab",				"Character class>>#euro",				"Character class>>#arrowLeft",				"Character class>>#end",				"Character class>>#arrowRight",				"Character class>>#arrowUp",				"Character class>>#pageUp",				"Character class>>#escape",				"Character class>>#newPage",				"Character class>>#separators",				"Character class>>#allByteCharacters",				"Character class>>#leadingChar:code:",				"Character class>>#lf",				"Character class>>#home",				"CharacterSet>>#do:",				"CharacterSet class>>#allCharacters",				"CharacterSetComplement>>#do:",				"CharacterTest>>#testInstanceCreation",				"CharacterTest>>#testPrintString",				"CharacterTest>>#testStoreString",				"CharacterTest>>#testMaxVal",				"ChildTestPredicate>>#goal",				"ClapApplication>>#outputStreamDo:",				"ClapCommand>>#valueFor:with:",				"ClapCommand class>>#forHelp",				"ClapCommandLineExamples>>#argumentAt:",				"ClapCommandLineExamples>>#recipients",				"ClapCommandLineExamples class>>#hello",				"ClapContext>>#executeToExit:",				"ClapDocumentationFormatter>>#section:with:",				"ClapDocumenter class>>#stringFrom:",				"ClapExplicit>>#wordsDo:",				"ClapExpression>>#value",				"ClapImplicit>>#allOccurrencesCollect:",				"ClapImplicit>>#allOccurrencesDo:",				"ClapParameter>>#validationDiagnosticsFor:",				"ClassAnnotationRegistry class>>#annotationPragmasIn:do:",				"ClassDescription>>#instanceVariableNamesDo:",				"ClyAbstractClassScope>>#processDynamicMethodGroups:by:",				"ClyAbstractClassScope>>#instanceVariablesOf:do:",				"ClyAbstractClassScope>>#classVariablesOf:do:",				"ClyAddConditionalBreakpointCommand>>#conditionBlockProducerMethodAST:",				"ClyAddConditionalBreakpointCommand>>#rewriteASTToSimulateExecutionInADifferentContext:",				"ClyBothMetaLevelClassScope>>#classesDo:",				"ClyBothMetaLevelClassScope class>>#metaLevelsOf:do:",				"ClyBrowserItem>>#hasChildrenWhich:",				"ClyBrowserMorph>>#navigationContextsDo:",				"ClyBrowserMorph>>#allContextsDo:",				"ClyBrowserQueryResultTestCase>>#assertItems:withValue:",				"ClyBrowserToolMorph>>#whenReadyDo:",				"ClyClassHierarchyMap>>#allChildrenOf:do:",				"ClyClassHierarchyMap>>#doInOrder:",				"ClyClassScope class>>#metaLevelsOf:do:",				"ClyInterestingSuperclassScope class>>#classesRelatedTo:do:",				"ClyMetaLevelClassScope class>>#metaLevelsOf:do:",				"ClyOldMessageBrowserQuery>>#selectsMethod:",				"ClyPackageScope>>#classGroupsDo:",				"ClyQueryBrowserFilter>>#matchesByScript:",				"ClyQueryResult>>#rawItemsOf:do:",				"ClyQueryResultBrowserAdapter>>#itemsWhere:",				"ClyQueryResultBrowserAdapter>>#itemsStartingWhere:count:",				"ClyQueryViewMorph>>#findAllItemsBy:stopLookupWhen:",				"ClyRunTestsFromMethodDataSourceCommand>>#testMethodsDo:",				"ClySingleClassGroupProvider>>#classGroupsIn:do:",				"ClyStringPattern class>>#with:",				"ClySubstringPatternTest>>#testComparison",				"ClySuperclassScope class>>#classesRelatedTo:do:",				"ClyTableColumn>>#displayItemPropertyBy:",				"ClyTableFilterFactory>>#pattern:",				"ClyTaggedClassGroupProvider>>#classGroupsIn:do:",				"CmBlockCommand>>#canBeExecuted",				"CmBlockCommand>>#execute",				"CmUICommandDisplayStrategy>>#display:in:do:",				"CmUIDisableWhenCantBeRun>>#display:in:do:",				"CmUIDisplayAsGroup>>#display:in:do:",				"CmUIDisplayAsSubMenu>>#fillSubMenuIn:with:do:",				"CmUIHideWhenCantBeRun>>#display:in:do:",				"CmdCommandActivationStrategy class>>#activateAllInContext:by:",				"CmdMenuGroup>>#allItemsWhich:",				"CmdMenuGroup>>#allGroupsWhich:",				"CmdSpecDragPassenger>>#asDraggableMorph",				"CoAvoidRepeatedFetcher>>#entriesDo:",				"CoClassImplementedMessagesFetcher>>#entriesDo:",				"CoClassVariableFetcher>>#entriesDo:",				"CoFilterFetcher>>#entriesDo:",				"CoGlobalVariableFetcher>>#entriesDo:",				"CoInstanceVariableFetcher>>#entriesDo:",				"CoMappingFetcher>>#entriesDo:",				"CoMethodVariableFetcher>>#entriesDo:",				"CoPackageImplementedMessagesFetcher>>#entriesDo:",				"CoSharedPoolVariableFetcher>>#entriesDo:",				"CoVariableValueMessageHeuristic>>#valueOfVariable:inContext:ifPresent:",				"CollectVisitor>>#visitReference:",				"Collection>>#reject:thenDo:",				"Collection>>#reject:",				"Collection>>#collect:thenDo:",				"Collection>>#detectMin:",				"Collection>>#removeAllSuchThat:",				"Collection>>#detectMax:",				"Collection>>#select:thenDo:",				"Collection>>#sum:ifEmpty:",				"Collection>>#sumNumbers:",				"Collection>>#detectSum:",				"Collection>>#noneSatisfy:",				"Collection>>#flatCollect:as:",				"Collection>>#do:without:",				"Collection>>#fillFrom:with:",				"Collection>>#do:separatedBy:",				"Collection>>#select:",				"Collection>>#count:",				"Collection>>#allSatisfy:",				"Collection>>#collect:",				"Collection>>#groupedBy:",				"Collection>>#do:displayingProgress:every:",				"Collection>>#anySatisfy:",				"Collection>>#collectAll:",				"Collection>>#maxValue:",				"Collection>>#selectEvery:",				"Collection>>#detect:ifFound:ifNone:",				"CollectionCombinator>>#combineFromIdx:",				"ColorMappingCanvas>>#translateBy:clippingTo:during:",				"ColorMappingCanvas>>#translateTo:clippingTo:during:",				"ColorMappingCanvas>>#translateBy:during:",				"ColorMappingCanvas>>#transformBy:clippingTo:during:smoothing:",				"ColorMappingCanvas>>#clipBy:during:",				"CombinatoricsTheoryTest>>#testDycko",				"CommandLineArguments>>#withFirstArgument:",				"CommandLineArguments>>#optionAt:ifPresent:",				"CommandLineArguments>>#optionAt:ifPresent:ifAbsent:",				"CommandLineUIManager>>#logColored:during:",				"CommandLineUIManager>>#logDuring:",				"CompiledCode>>#withAllBlocksDo:",				"CompiledCode>>#abstractBytecodeMessagesFrom:to:do:",				"CompiledCode>>#innerCompiledBlocksDo:",				"CompiledCode>>#literalsDo:",				"CompiledCode>>#hasLiteralSuchThat:",				"CompiledCode>>#innerCompiledBlocksAnySatisfy:",				"CompiledMethodTrailer>>#decodeEmbeddedSourceQCompress",				"ComposablePresenter>>#keyStrokeForNextFocus:",				"ComposablePresenter>>#keyStrokesForNextFocus:",				"ComposablePresenter>>#extent:",				"ComposablePresenter>>#ensureMorphicAdapterDo:",				"ComposablePresenter>>#needRebuild:",				"ComposablePresenter>>#keyStrokesForPreviousFocus:",				"ComposablePresenter>>#openWithSpecLayout:",				"ComposablePresenter>>#openWorldWithSpecLayout:",				"ComposablePresenter>>#askOkToClose:",				"ComposablePresenter>>#aboutText",				"ComposablePresenter>>#title:",				"ComposablePresenter>>#windowIcon:",				"ComposablePresenter>>#openDialogWithSpecLayout:",				"ComposablePresenter>>#keyStrokeForPreviousFocus:",				"ComposablePresenter>>#aboutText:",				"ComposablePresenterWithModel>>#model:",				"ComposablePresenterWithModelTest>>#testUpdateModelWithValueHolder",				"ComposablePresenterWithModelTest>>#testModelSettingValueHolderToValueHolder",				"ComposablePresenterWithModelTest>>#testModelSettingValueHolderToModel",				"CompoundUnit>>#printUnitsWhereExponent:on:pluralized:",				"CompressedBoundaryShape>>#segmentsDo:",				"CompressingFindStrategy>>#at:in:do:",				"CompressingFindStrategy>>#at:in:select:",				"ConfigurableHistoryIterator>>#undoIfEmpty:",				"ConfigurableHistoryIterator>>#redoIfEmpty:",				"Cons>>#collect:",				"Context>>#storeIntoLiteralVariable:",				"Context>>#popIntoLiteralVariable:",				"Context>>#callChainAnySatisfy:",				"Context>>#findContextSuchThat:",				"Context>>#runSimulated:contextAtEachStep:",				"Context class>>#allInstancesDo:",				"ContextTest>>#privRestartArgBlockTest",				"Continuation>>#value",				"Continuation>>#valueWithArguments:",				"Continuation class>>#tries:otherwise:",				"Continuation class>>#currentDo:",				"Continuation class>>#try:otherwise:",				"ContinuationTest>>#leftmost:tree:continuation:",				"ContinuationTest>>#testBlockVars",				"ContinuationTest>>#testSimplestCallCC",				"ContinuationTest>>#testSimpleCallCC",				"ContinuationTest>>#testSimpleStoreCallCC",				"ContinuationTest>>#intersectWithCC:withAll:continuation:",				"ContinuationTest>>#testMethodTemps",				"ContinuationTest>>#remove:oneStar:sentinel:continuation:",				"ContinuationTest>>#remove:oneStarWithTry:continuation:",				"ContinuationTest>>#testBlockTemps",				"ContinuationTest>>#intersect:withAll:continuation:",				"ContinuationTest>>#intersect:withCollection:continuation:",				"ContinuationTest>>#remove:uptoLastValueLink:continuation:",				"ContinuationTest>>#testReentrant",				"CriticToolbar>>#rule:",				"CriticToolbar>>#critic:",				"CurrentExecutionEnvironment class>>#activate:for:",				"CurrentExecutionEnvironment class>>#restoreDefault",				"Cursor class>>#makeCursorsWithMask",				"CustomHelp class>>#newColoredText:withClipboardAction:",				"CustomHelp class>>#newColoredText:withRunAction:",				"DTFilterableListPresenter>>#filterList",				"DTResultTreeView>>#resultTreeFor:",				"DTTreeNode>>#drTestsName",				"DTTreeNode>>#drTestsBuildContextMenu:",				"DateAndTime>>#setTimestampInMetacelloVersion:",				"DatePresenter>>#date:",				"DatePresenter>>#displayBlock:",				"DependentsArray>>#collect:",				"DependentsArray>>#select:",				"DependentsArray>>#reverseDo:",				"DependentsArray>>#do:",				"DerivedUnit class>>#abbreviation:name:pluralName:value:",				"DialogWindowPresenter>>#toolbar:",				"Dictionary>>#associationsDo:",				"Dictionary>>#at:put:",				"Dictionary>>#fillFrom:with:",				"Dictionary>>#valueAtNewKey:put:atIndex:declareFrom:",				"Dictionary>>#select:",				"Dictionary>>#valuesDo:",				"Dictionary>>#asValueHolder",				"Dictionary>>#collect:",				"Dictionary>>#at:update:initial:",				"Dictionary>>#keysDo:",				"Dictionary>>#add:",				"Dictionary>>#associationsSelect:",				"DictionaryValueHolder>>#fillFrom:with:",				"DictionaryValueHolder>>#initialize",				"DiffMorph>>#verticalScroll:",				"DiffPresenter>>#showOnlySource:",				"DiffPresenter>>#showOptions:",				"DiffPresenter>>#rightLabel:",				"DiffPresenter>>#showOnlyDestination:",				"DiffPresenter>>#contextClass:",				"DiffPresenter>>#leftLabel:",				"DiffPresenter>>#rightText:",				"DiffPresenter>>#leftText:",				"DigitalSignatureAlgorithm class>>#timeDecode:",				"DiskDirectoryEntry>>#gtInspectAttributesIn:",				"DiskFileAttributesTest>>#collectionAssert:equals:",				"DiskFileAttributesTest>>#collectionAssert:",				"DiskStore>>#directoryAt:directoryNodesDo:",				"DiskStore>>#basicEntry:path:nodesDo:",				"DiskStore>>#directoryAt:nodesDo:",				"DiskStore>>#directoryAt:fileNodesDo:",				"DoubleLink>>#asSpotterDoubleLink",				"DoubleLink class>>#value:",				"DoubleLinkedList>>#noneSatisfy:",				"DoubleLinkedList>>#reject:",				"DoubleLinkedList>>#linksDo:",				"DoubleLinkedList>>#collect:",				"DoubleLinkedList>>#select:",				"DoubleLinkedList>>#reverseDo:",				"DoubleLinkedList>>#reverseLinksDo:",				"DoubleLinkedList>>#do:",				"DropListItem>>#action:",				"DropListPresenter>>#iconHolder:",				"DropListPresenter>>#setIndex:",				"DropListPresenter>>#displayBlock:",				"DropListPresenter>>#setSelectedIndex:",				"DropListPresenter>>#setSelectedItem:",				"DropListPresenter>>#silentlySetSelectedIndex:",				"DropListPresenter>>#items:",				"DropListPresenter>>#emptyList",				"DummyUIManager>>#informUserDuring:",				"DynamicComposablePresenter>>#layout:",				"DynamicEyeElement>>#save:",				"DynamicEyeElement class>>#host:label:value:",				"DynamicEyeElement class>>#host:value:",				"DynamicPresentersListBuilder>>#instVarNamesAndPresenterNamesArray",				"DynamicPresentersListBuilder>>#buildDynamicPresenter",				"DynamicPresentersListBuilderTest>>#testPresenterConfiguredAs",				"DynamicPresentersListBuilderTest>>#testPresenterProvidedByConfiguredAs",				"DynamicSpecExample>>#object:",				"DynamicSpecExample>>#openOnInteger",				"EFBenchTest>>#longNestedMethodShort",				"EFBenchTest>>#longNestedMethod",				"EFFormatter>>#newLinesBeforeStartingAt:",				"EFLiteralValueExpressionTest>>#testNotLitteral",				"EUCTextConverter>>#nextPut:toStream:",				"EncodedCharSet class>>#charFromUnicode:",				"EntryCompletion>>#filteredValuesWith:",				"EntryCompletion>>#choose:",				"EpApplyPreviewerTest>>#assertOutputsEventsWith:",				"EpApplyPreviewerTest>>#assertOutputsAnEventWith:",				"EpLog>>#from:detect:ifNotFound:",				"EpLog>>#priorEntriesFrom:do:",				"EpMonitor>>#addEvent:newEntryDo:triggerReference:",				"EpPluggableFilter>>#accepts:",				"Ephemeron class>>#key:value:container:",				"EyeAbstractInspector>>#selectedObjectDo:",				"EyeAbstractInspector>>#object:",				"EyeInspectorNavigator>>#basicInspector:",				"EyePointerExplorer>>#selectedObjectDo:",				"FBDASTBuilder>>#codeLiteral:",				"FBDASTBuilder>>#codeLiteralValue:",				"FBDASTBuilder>>#codeReturn:",				"FBDDecompiler>>#pragmasForMethod:",				"FBDExamples>>#exampleBlockExternalArg",				"FBDExamples>>#singleRemoteDifferentBlocksSameArgumentName",				"FBDExamples>>#exampleSimpleBlockArgument1",				"FBDExamples>>#exampleNestedBlockScoping",				"FBDExamples>>#exampleBlockMethodArgument:",				"FBDExamples>>#exampleSimpleBlockLocalWhile",				"FBDExamples>>#noRemoteBlockTemp",				"FBDExamples>>#exampleBlockArgument",				"FBDExamples>>#noRemoteBlockArgument",				"FBDExamples>>#exampleSimpleBlockLocal",				"FFICalloutAPITest>>#testCallWithSelfParameter",				"FFICalloutAPITest>>#testCharCall",				"FFICalloutAPITest>>#testCallWithObjectParameter",				"FFICalloutMethodBuilder>>#build:",				"FFIConst class>>#value:type:",				"FFIConst class>>#value:",				"FFIConstantArgument>>#resolveUsing:",				"FFIConstantArgument class>>#value:typeName:arity:",				"FFIConstantHandleTest>>#testReturn",				"FFIEnumeration class>>#buildClassVarNamed:with:",				"FFIEnumeration class>>#buildClassVariables",				"FFIEnumeration class>>#initializeEnumeration",				"FFIExternalArray>>#initializeType:size:handleProducer:",				"FFIExternalValueHolderTest>>#testCreateValueHolder",				"FFIFunctionParser>>#integerConstantArgument:",				"FFIFunctionParser>>#integerConstantArgument:type:",				"FFIFunctionParser>>#argName:indirectIndex:type:ptrArity:",				"FFIFunctionResolutionTest>>#testResolveConstantNilShouldBeVoidPointerType",				"FFIFunctionResolutionTest>>#testResolveConstantSelfStringInStrictResolverFails",				"FFIFunctionResolutionTest>>#testResolveConstantIntegerShouldBeInt32",				"FFIFunctionResolutionTest>>#testResolveConstantNULLShouldBeVoidPointerType",				"FFIFunctionResolutionTest>>#testResolveConstantIntegerShouldSetConstantLoader",				"FFIFunctionResolutionTest>>#testResolveConstantSelfStringShouldSetConstantLoader",				"FFIFunctionResolutionTest>>#testResolveConstantSelfOfExternalObjectShouldSetConstantFirstInstanceVariableLoader",				"FFIFunctionResolutionTest>>#testResolveConstantTrueShouldSetConstantOneLoader",				"FFIFunctionResolutionTest>>#testResolveConstantNilShouldSetConstantNullLoader",				"FFIFunctionResolutionTest>>#testResolveConstantTrueShouldBeInt32Type",				"FFIFunctionResolutionTest>>#testResolveConstantSelfShouldResolveToExternalObjectType",				"FFIFunctionResolutionTest>>#testResolveConstantNULLShouldSetConstantNullLoader",				"FFIFunctionResolutionTest>>#testResolveConstantFalseShouldBeInt32Type",				"FFIFunctionResolutionTest>>#testResolveConstantFalseShouldSetConstantZeroLoader",				"FFILiteralArgument class>>#value:type:",				"FFILiteralArgument class>>#value:",				"FLAnalyzer>>#analysisFor:",				"FLBasicSerializationTest>>#testCharacter",				"FLBasicSerializationTest>>#testWideStringGlobal",				"FLBasicSerializationTest>>#testWideAndByteCharacters",				"FLBasicSerializationTest>>#testWideStringClassName",				"FLBinaryFileStreamStrategy>>#writeStreamDo:",				"FLBinaryFileStreamStrategy>>#readStreamDo:",				"FLByteArrayStreamStrategy>>#writeStreamDo:",				"FLByteArrayStreamStrategy>>#readStreamDo:",				"FLCharacter32Cluster>>#materializeInstanceWith:",				"FLCompiledCodeCluster>>#referencesOf:do:",				"FLCompiledMethodCluster>>#serializeInstance:with:",				"FLDictionaryCollectionCluster>>#referencesOf:do:",				"FLEncoder class>>#on:globalEnvironment:do:",				"FLFileStreamStrategy>>#readStreamDo:",				"FLFileStreamStrategy>>#writeStreamDo:",				"FLHookPrimitiveCluster>>#clusterReferencesDo:",				"FLLargeIdentityDictionary>>#valuesDo:",				"FLLargeIdentityDictionary>>#keysDo:",				"FLLargeIdentitySet>>#do:",				"FLMaterializer>>#decodeHeaderWith:",				"FLMaterializer>>#materializeFrom:",				"FLMultiByteStreamStrategy>>#writeStreamDo:",				"FLMultiByteStreamStrategy>>#readStreamDo:",				"FLObjectCluster>>#clusterReferencesDo:",				"FLPharo7Platform>>#fileNamed:readStreamDo:",				"FLPharo7Platform>>#fileNamed:writeStreamDo:",				"FLPluggableSubstitutionMapper>>#mapAndTrace:",				"FLPluggableSubstitutionMapper>>#mapAndTraceSubstitutionIfNotRecursive:",				"FLPointCluster>>#referencesOf:do:",				"FLRectangleCluster>>#referencesOf:do:",				"FLSimpleCollectionCluster>>#referencesOf:do:",				"FLVariableObjectCluster>>#variablePartReferencesOf:do:",				"FLVariablesMapping>>#referencesOf:do:",				"FLWeakVariableObjectCluster>>#clusterReferencesDo:",				"FTBasicItem>>#getChildren",				"FTBasicTreeListDataSource>>#childrenFor:",				"FTBasicTreeListDataSource>>#elementAt:",				"FTBasicTreeListItem>>#hasChildren",				"FTEasyListDataSource>>#displayFor:",				"FTEasyListDataSource>>#iconFor:",				"FTEasyListDataSource>>#menuColumn:row:",				"FTPClient>>#lookForCode:ifDifferent:",				"FTPropertyColumnSortingStrategy>>#ascendingSortFunction",				"FTTableMorph>>#moveShowIndexTo:",				"FTTableMorph>>#resetPosition",				"FTTableMorph>>#resizeAllSubviews",				"FastTablePresenter>>#icons:",				"FastTablePresenter>>#doubleClickAction:",				"FastTablePresenter>>#handlesDoubleClick:",				"File>>#readStreamDo:",				"File>>#writeStreamDo:",				"File class>>#retryWithGC:until:forFileNamed:",				"FileList>>#addNew:byEvaluating:",				"FileStream class>>#detectFile:do:",				"FileSystem>>#filesAt:do:",				"FileSystem>>#childNamesAt:do:",				"FileSystem>>#directoriesAt:do:",				"FileSystem>>#childrenAt:do:",				"FileSystem>>#directoryNamesAt:do:",				"FileSystem>>#entriesAt:do:",				"FileSystem>>#fileNamesAt:do:",				"FileSystem>>#entriesAt:ifAbsent:do:",				"FileSystemDirectoryEntry>>#printAttribute:on:",				"FileSystemStore>>#directoryAt:directoryNodesDo:",				"FileSystemStore>>#directoryAt:ifAbsent:directoryNodesDo:",				"FileSystemStore>>#directoryAt:fileNodesDo:",				"FileSystemStore>>#directoryAt:ifAbsent:fileNodesDo:",				"Finder>>#methodSearch:",				"Finder>>#classSearch:",				"FontChooserMorph>>#widthRequiredFor:from:noLessThan:",				"FontChooserMorph>>#previewText",				"Form>>#findShapeAroundSeedBlock:",				"Form>>#fillFromXColorBlock:",				"Form>>#wipeImage:at:clippingBox:rectForIndex:",				"Form>>#collectColors:",				"Form>>#fillFromYColorBlock:",				"FormCanvas>>#transformBy:clippingTo:during:smoothing:",				"FormCanvas>>#clipBy:during:",				"FormCanvas>>#translateTo:clippingTo:during:",				"FormCanvas>>#translateBy:during:",				"FreeTypeFont>>#linearKerningLeft:right:",				"FreshRB>>#onState:withVars:",				"FuzzyMatcher>>#match:ifScored:",				"FuzzyMatcher class>>#allSortedByScoreMatching:in:by:",				"FuzzyMatcher class>>#allMatching:in:by:",				"GB2312 class>>#nextPutValue:toStream:withShiftSequenceIfNeededForTextConverterState:",				"GLMAnnouncementPropagationTest>>#testPropagationDuringCircularDependencies",				"GLMAnnouncementPropagationTest>>#testSimpleEmptyPane",				"GLMBrick>>#allSubbricksDo:",				"GLMBrickStructureTrait>>#allSubbricksDo:",				"GLMBrowserTest>>#testStatusbarTransmissionsTriggered",				"GLMBrowserTest>>#testWatcherCopy",				"GLMBrowserTest>>#testWatcherCreation",				"GLMBundleTransmissionTest>>#testPresentations",				"GLMBundleTransmissionTest>>#testTransmitting",				"GLMBundleTransmissionTest>>#testPorts",				"GLMBundleTransmissionTest>>#testCopy",				"GLMCompositePresentation>>#composite:",				"GLMCustomColumn>>#addRow:",				"GLMCustomRow>>#addColumn:",				"GLMDynamicPresentationTest>>#testDirectEventsPropagationTransformation",				"GLMEmptyPopupBrick class>>#createLabel:",				"GLMExpander>>#innerPortEvent:",				"GLMExpander>>#outerPortEvent:",				"GLMExplicitBrowserTest>>#testPresentationBoundPort",				"GLMExplicitBrowserTest>>#testJumpstartTransmission",				"GLMExplicitBrowserTest>>#testTriggeringConditions",				"GLMFastTableDataSource>>#editRowMorphForColumn:node:withIndex:",				"GLMFastTreeTableDataSource>>#editRowMorphForColumn:node:withIndex:",				"GLMFinder>>#innerPortEvent:",				"GLMFinderMorphicTest>>#testOneFixedSizePane",				"GLMFinderMorphicTest>>#testEmbeddedBrowserRefreshesRendering",				"GLMFinderMorphicTest>>#testRemovingVariableSizePanes",				"GLMFinderMorphicTest>>#testDefaultFixedSizePanes",				"GLMFinderMorphicTest>>#testFinderWithEmbeddedBrowser",				"GLMFinderMorphicTest>>#testMultiplePresentationsValidation",				"GLMFinderTest>>#testPaneReplacedAnnouncement",				"GLMFinderTest>>#testLastActivePresentation",				"GLMFinderTest>>#testPaneAddedAnnouncement",				"GLMFinderTest>>#testUnregisterAnnouncementsWhenRemovingPane",				"GLMFinderTest>>#testPaneRemovedAnnouncement",				"GLMFinderTest>>#testPanesHaveDifferentRegistries",				"GLMFinderTest>>#testPortPublishing",				"GLMFinderTest>>#testPaneName",				"GLMFinderTest>>#testPaneCreation",				"GLMFinderTest>>#testValidSubscriptionsInComplexBrowser",				"GLMListMorphicTest>>#testMultipleSelectionWithChange",				"GLMListMorphicTest>>#testMultipleSelectionWithChangeFromModel",				"GLMListMorphicTest>>#testUpdateFromModel",				"GLMListingPresentation>>#selectionPath:",				"GLMMorphTreeColumn>>#rowMorphFor:",				"GLMMorphicRubricTextRenderer>>#actOnTextEditorRequest:",				"GLMMorphicTest>>#findLastSatisfying:in:",				"GLMMorphicTest>>#findSatisfying:in:",				"GLMNestedBrowserTest>>#testCondition",				"GLMNestedBrowserTest>>#testEntityPropogation",				"GLMNestedBrowserTest>>#testNestedBrowsersWithMultipleOrigins",				"GLMNestedBrowserTest>>#testInnerTransmissions",				"GLMNewScriptingTest>>#testSimpleTransmissionWithTransformation",				"GLMNewScriptingTest>>#testSimpleTransmissionWithCondition",				"GLMNewScriptingTest>>#testBundleTransmissionWithTransformation",				"GLMNewScriptingTest>>#testSelectionValidation",				"GLMOSWindowWorldMorph>>#actOnWindowRequest:",				"GLMOriginPortReference>>#value",				"GLMPagerModel>>#notifySynchronizeScrollTo:",				"GLMPane>>#lastActivePresentation:",				"GLMPane>>#withAllPanesAndPresentationsDo:",				"GLMPaneTest>>#testPresentationAndBrowserConditions",				"GLMPaneTest>>#testPresentationConditions",				"GLMPort>>#transientValue:",				"GLMPortEventTest>>#testPortName",				"GLMPortEventTest>>#testCreationWithTransmissionContext",				"GLMPortEventTest>>#testCreation",				"GLMPortEventTest>>#testInterdependentPanesCycleBreak",				"GLMPortEventTest>>#testInterdependentPanesProperPorts",				"GLMPortReferenceTest>>#testOriginTransformedValue",				"GLMPortReferenceTest>>#testOriginValue",				"GLMPortTest>>#testResetValue",				"GLMPortTest>>#testPanePortTransmissionCallingReceiveIn",				"GLMPortTest>>#testPortInitializationDoesNotAffectTransmissionPort",				"GLMPortTest>>#testSimplePort",				"GLMPortTest>>#testPortInitializationFromTransmission",				"GLMPortTest>>#testPresentationBoundPort",				"GLMPortUpdater>>#glamourValueWithArgs:",				"GLMPresentation>>#initializePresentation",				"GLMPresentation>>#outerPortEvent:",				"GLMPresentation>>#withAllPanesAndPresentationsDo:",				"GLMPresentation>>#entity:",				"GLMPresentation>>#selection:",				"GLMPresentation>>#status:",				"GLMPresentation>>#strongSelection:",				"GLMPresentation>>#with:",				"GLMPresentationTest>>#testImplicitNotNilMultipleValues",				"GLMPresentationTest>>#testMatching",				"GLMPresentationTest>>#testUpdateConditionallyTriggered",				"GLMPresentationTest>>#testPresentationInitializationBlock",				"GLMPresentationTest>>#testOnChangeOfPortAct",				"GLMPresentationTest>>#testContext",				"GLMPresentationTest>>#testExplicitNotNilMultipleValues",				"GLMPresentationTest>>#testCopyTheTransformation",				"GLMPresentationTest>>#testAnnouncement",				"GLMScriptingTest>>#testTransmissionWithTwoOrigins",				"GLMScriptingTest>>#testFinderWithPreviousPort",				"GLMScriptingTest>>#testNestedBrowserOther",				"GLMScriptingTest>>#testTwoTransmissionsWithOnlyOneEvent",				"GLMScriptingTest>>#testAllowNil",				"GLMScriptingTest>>#testPublishing",				"GLMScriptingTest>>#testDynamicActions",				"GLMScriptingTest>>#testPublishingToOutsideFinder",				"GLMScriptingTest>>#testConditionalPresentation",				"GLMScriptingTest>>#testThreePanesTransmissions",				"GLMSystemWindow>>#actOnWindowRequest:",				"GLMTablePresentation>>#withChildrenOf:do:",				"GLMTabulatorMorphicTest>>#testMultipleInitialSelection",				"GLMTabulatorMorphicTest>>#testStatusbar",				"GLMTextualPresentation>>#selectionInterval:",				"GLMTextualPresentation>>#text:",				"GLMTextualPresentation>>#selectedText:",				"GLMTransmissionTest>>#testNoOverrideStrategy",				"GLMTransmissionTest>>#testSimple",				"GLMTransmissionTest>>#testWhenCondition",				"GLMTransmissionTest>>#testBundleStrategy",				"GLMTreeMorphNodeModel>>#withContentsDo:",				"GLMTreePresentation>>#withChildrenOf:do:",				"GLMUpdateInterdependentPanesTest>>#testOnePanesShouldUpdateTheRenderedSelectionOnTheTriggerPane",				"GLMUpdateInterdependentPanesTest>>#testAllowNil",				"GLMUpdateInterdependentPanesTest>>#testTwoInterdependentPanesShouldUpdateTheRenderedSelectionOnTheTriggerPane",				"GLMUpdateInterdependentPanesTest>>#testInterdependentPanesShouldUpdateTheFocusTriggerPane",				"GLMUpdateInterdependentPanesTest>>#testInterdependentPanesShouldUpdateTheFocusTriggerPaneWithText",				"GLMUpdateMorphicTest>>#testInvalidateSelection",				"GTDebugActionButton>>#debugAction:",				"GTDebuggerSmokeTest>>#initializeSessionForContext:withStepBlock:",				"GTFilterRegex>>#applyFilterInContext:error:",				"GTGenericStackDebugger>>#selectTopContext",				"GTGenericStackDebugger>>#selectionInterval:",				"GTGenericStackDebugger>>#sourceCode:",				"GTMoldableDebugger>>#session:",				"GTMoldableDebugger>>#updateBrowser",				"GTPlayPage class>>#loadFromPublishUrl:thenDo:",				"GTSUnitDebugger>>#updateBrowser",				"GTSelector>>#spotterUsersFor:",				"GTSelector class>>#substring:filter:",				"GTSimpleMethodsBrowser>>#evaluationAction",				"GTSimpleMethodsBrowser>>#updateOuterPaneFrom:for:",				"GTSpotter>>#concreteMethodsInContext:usingFilter:",				"GTSpotter>>#evaluateExpressionInContext:usingFilter:",				"GTSpotterCandidateLink>>#copy",				"GTSpotterContext>>#doContinueFilterForProcessor:",				"GTSpotterContext>>#doFilter:forProcessor:",				"GTSpotterIterator>>#reject:thenDo:",				"GTSpotterIterator>>#collect:as:",				"GTSpotterIterator>>#allSatisfy:",				"GTSpotterIterator>>#detect:ifFound:ifNone:",				"GTSpotterIterator>>#select:thenCollect:as:",				"GTSpotterIterator>>#select:as:",				"GTSpotterIterator>>#reject:as:",				"GTSpotterIterator>>#select:thenDo:",				"GTSpotterIterator>>#reject:thenCollect:as:",				"GTSpotterIterator>>#anySatisfy:",				"GTSpotterIterator>>#do:",				"GTSpotterStep>>#configureProcessorsStartingAt:with:",				"GTSpotterStepTest>>#assertProcessorMatching:",				"GTSpotterStepTest>>#assertCandidateMatching:",				"GTSpotterTest>>#testHistorizingTheSameObjectRemovesPreviousOccurrences",				"Generator>>#fork",				"GeneratorBlockIteratorTest>>#testIteratorWithInfiniteBlockNotCallIfNotUsed",				"GeneratorBlockIteratorTest>>#testIteratorWithSingleElementIsAtEndAfterNext",				"GeneratorBlockIteratorTest>>#testIteratorWithInfiniteBlockOnlyCallFirstTimes",				"GenericPaintPatch>>#addToCairoMeshGradientPaint:",				"GlamourousBenchmark>>#measureSelectionTimeInFinderForSize:",				"GlamourousBenchmark>>#measureSelectionTimeForSize:",				"GoalTest>>#testUnifyThreeWithThree",				"GoalTest>>#testConjFalseThreeWithVar",				"GoalTest>>#testLolo",				"GoalTest>>#testDisjThreeFourThenFive",				"GoalTest>>#testAlphaRuleo",				"GoalTest>>#testUnifyWithTopmostSharing",				"GoalTest>>#nats:stage:offset:",				"GoalTest>>#testTablingAnswersInsteadOfSubstitutions",				"GoalTest>>#testDisjThreeWithVarOrThreeWithVar",				"GoalTest>>#testConjTrueThreeWithThree",				"GoalTest>>#testListo",				"GoalTest>>#testUnifyWithTopmostWithoutSharing",				"GoalTest>>#testConde",				"GoalTest>>#testConso",				"GoalTest>>#testCutOverMultipleRules",				"GoalTest>>#testCutAndFail",				"GoalTest>>#testUnifyFourWithThree",				"GoalTest>>#testDisjFourWithVarOrThreeWithVar",				"GoalTest>>#swappedfives:",				"GoalTest>>#testFivesByPredicate",				"GoalTest>>#testConjThreeFourWithTwoVars",				"GoalTest>>#testConjThreeFresh",				"GoalTest>>#testConjSymmetry",				"GoalTest>>#testDisjThreeThenFourFive",				"GoalTest>>#testDisjThreeWithVarOrFourWithVar",				"GoalTest>>#testCutUnifyThenFail",				"GoalTest>>#teaCupSpoon:",				"GoalTest>>#testConjSucceedingSharing",				"GoalTest>>#teacup:",				"GoalTest>>#testUnifyWithTopmostSharingWithRepetition",				"GoalTest>>#fives:",				"GoalTest>>#testConjThreeFour",				"GoalTest>>#testConjDisj",				"GoalTest>>#testUnifySymmetryVarWithFour",				"GoalTest>>#testCut",				"GoalTest>>#testConjFailingSharing",				"GoalTest>>#testTablingMutuallyRecursive",				"GoalTest>>#testUnifySymmetryFourWithVar",				"GoalTest>>#testDisjThreeWithThreeOrFourWithVar",				"GoalTest>>#testUnifySharing",				"Gofer>>#execute:do:",				"GoferConstraintReference>>#matches:",				"GradientFillStyle>>#copyWith:atRamp:",				"GradientFillStyle>>#changeColorAt:to:",				"Graph>>#asGoal",				"Graph>>#gtInspectorGraphViewUsingMondrianBuilder:vertex:edge:layout:",				"HSVAColorSelectorMorph>>#selectedColor:",				"HSVColorSelectorMorph>>#hue:",				"HTTPEncodingTest>>#testPercentEncodingHiragana",				"Halt class>>#onCountWithBehavior:",				"HandMorph>>#captureEventsWhile:",				"HandMorph>>#handleEvent:",				"HandMorph>>#captureEventsUntil:",				"HandleMorph>>#step",				"HandleMorph>>#justDroppedInto:event:",				"Heap>>#do:",				"HelpTopic>>#pathToTopicSatisfying:",				"HiRulerBuilder>>#stackLinksFrom:in:",				"HookGenerator>>#wrapCondition:link:",				"HookGenerator>>#hookFor:",				"HookGenerator>>#wrapInContext:link:",				"IRBuilder class>>#buildIR:",				"IRBuilderTest>>#testPushClosureCopyNoCopiedArgNamed",				"IRBuilderTest>>#testPushClosureCopyOneCopiedArg",				"IRBuilderTest>>#testPushClosureCopyNoCopiedArg",				"IRBuilderTest>>#testPushClosureCopyOneCopiedTempArg",				"IRMethod>>#allInstructionsMatching:",				"IRMethod>>#firstInstructionMatching:",				"IRPushLiteral>>#isPushLiteral:",				"IRRemoteArray>>#do:",				"IRSequence>>#withAllSuccessorsDo:alreadySeen:",				"IRSequence>>#withNonBodySuccessorsDo:alreadySeen:",				"IceAbstractCommitWalk>>#commitsDo:",				"IceAbstractCommitWalk>>#versionsFor:detect:ifNone:",				"IceAnnouncer>>#isAnnouncementSuspended:",				"IceDiff>>#buildForPackages:",				"IceDiff>>#build",				"IceDiff>>#buildFull",				"IceEmptyNode>>#firstNodeSuchThat:ifNone:",				"IceGitHubSelectListModel>>#confirmSelection",				"IceGitHubSelectListModel>>#createCheckboxFor:",				"IceGitRemote>>#remoteBranchNamed:ifPresent:ifAbsent:",				"IceLibgitCommitWalk>>#commitsDo:",				"IceLibgitRepository>>#locationIfPresent:ifAbsent:",				"IceLibgitRepository>>#remoteBranchNamed:ifPresent:ifAbsent:",				"IceLibgitRepository>>#branchNamed:ifPresent:ifAbsent:",				"IceMerge>>#conflictsDo:",				"IceNode>>#collectWithPath:",				"IceNode>>#select:",				"IceNode>>#resolve:ifPresent:ifAbsent:",				"IceNode>>#mergeWith:onLeft:onRight:onMerge:",				"IceNode>>#firstNodeSuchThat:ifNone:",				"IceNode>>#count:",				"IceNode>>#nextChildNodeStartingFrom:suchThat:ifNone:",				"IceNode>>#nextNodeSuchThat:ifNone:",				"IceNode>>#addChild:",				"IceNode>>#do:",				"IceNode>>#nextNodeSuchThat:ifFound:",				"IceNode>>#allSatisfy:",				"IceNode>>#allChildrenDo:",				"IceNode>>#collect:",				"IceNode>>#anySatisfy:",				"IceNode class>>#value:parent:",				"IceNode class>>#value:",				"IceProxyMCVersionInfo>>#asSpotterCandidateLink",				"IceTipCheckoutNewBranchPanel>>#doAccept",				"IceTipCreateTagPanel>>#initializeNextTagPanel",				"IceTipCreateTagPanel>>#doAccept",				"IceTipEntityModel>>#createTag:thenDo:",				"IceTipFetchAllProjectCommand>>#execute",				"IceTipRepairAction>>#fetchAllRemotes",				"IceTipRepositoryModel>>#checkoutNewBranchNamed:inCommit:thenDo:",				"IceTipRepositoryModel>>#verifyDirectoryStructureIfMissing:",				"IceTipTableColumn>>#readIcon:",				"IceTipTableColumn>>#read:",				"IceTipTreeDataSource>>#toString:",				"IceTipTreeDataSource>>#iconFor:",				"IceTipTreeDataSource>>#indexOfElementMatching:",				"IceWorkingCopy>>#markAsCleanPackagesThat:",				"IconListPresenter>>#icons:",				"IdentifierChooserMorph>>#switchToOtherColumn:",				"IdentifierChooserMorph>>#choose:",				"IdentityNewValueHolder>>#value:",				"ImageCleaner>>#removeEmptyCategories",				"ImagePresenter>>#image:",				"ImagePresenter>>#action:",				"ImagePresenter>>#switchAutoscale",				"IncrementalSliderMorph>>#newSliderMorph",				"IncrementalSliderMorph>>#decrement",				"IncrementalSliderMorph>>#increment",				"IndentingListItemMorph>>#childrenDo:",				"IndentingListItemMorph>>#withSiblingsDo:",				"InputEventLog>>#handleEvent:",				"InputEventSensor>>#characterForEvent:",				"InstanceVariableSlot class>>#resetIvarSlots",				"InstructionStream>>#interpretNext2ByteSistaV1Instruction:for:extA:extB:startPC:",				"InstructionStream>>#scanFor:",				"Integer>>#binaryCanonicalDenseRepresentationWith:",				"Integer>>#asGraphWithRecurrence:",				"Integer>>#Z",				"Integer>>#srfi41ParkMiller",				"Integer>>#srfi41Collatz",				"Integer>>#asCharacter",				"Integer>>#srfi41UniformContinuedFraction",				"Integer>>#bitString",				"Integer>>#srfi41RationalsWithoutDuplicates",				"Integer class>>#largePrimesUpTo:do:",				"Integer class>>#primesUpTo:do:",				"Interval>>#collect:",				"Interval>>#reverseDo:",				"Interval>>#do:",				"IterativeFindStrategy>>#at:in:select:",				"JISX0208 class>>#nextPutValue:toStream:withShiftSequenceIfNeededForTextConverterState:",				"JISX0208 class>>#initialize",				"Job>>#lookup:ifNone:",				"JobProgressBarMorph>>#progress:",				"JobProgressBarMorph>>#value:",				"JobProgressMorph>>#current:",				"JobProgressMorph>>#do:",				"Just>>#ifNothing:ifJust:",				"KMDispatchChain>>#do:",				"KMKeyCombination>>#combinationsDo:",				"KMNamedCharKeyCombination class>>#ifSpecialKey:do:",				"KMPlatformSpecificKeyCombination>>#combinationsDo:",				"KMShortcutPrinter class>>#createSymbolTable",				"KMShortcutPrinterTest class>>#testParameters",				"KMUntypeableSingleKeyCombination class>>#ifSpecialKey:do:",				"KSX1001 class>>#nextPutValue:toStream:withShiftSequenceIfNeededForTextConverterState:",				"KeyboardEvent>>#keyCharacter",				"KeyboardKey class>>#initializeMacOSVirtualKeyTable",				"KeyboardKey class>>#initializeUnixVirtualKeyTable",				"KeyboardKey class>>#initializeWindowsVirtualKeyTable",				"KeyboardKeyTest>>#testNamed",				"KeyboardKeyTest>>#testValue",				"LGitBlameFlagTypeEnum class>>#git_blame_normal",				"LGitBlameFlagTypeEnum class>>#git_blame_track_copies_same_commit_moves",				"LGitBlameFlagTypeEnum class>>#git_blame_track_copies_same_commit_copies",				"LGitBlameFlagTypeEnum class>>#git_blame_first_parent",				"LGitBlameFlagTypeEnum class>>#git_blame_track_copies_same_file",				"LGitBlameFlagTypeEnum class>>#git_blame_track_copies_any_commit_copies",				"LGitBranchTypeEnum class>>#git_branch_local",				"LGitBranchTypeEnum class>>#git_branch_remote",				"LGitBranchTypeEnum class>>#git_branch_all",				"LGitCheckoutNotifyTypeEnum class>>#git_checkout_notify_ignored",				"LGitCheckoutNotifyTypeEnum class>>#git_checkout_notify_updated",				"LGitCheckoutNotifyTypeEnum class>>#git_checkout_notify_untracked",				"LGitCheckoutNotifyTypeEnum class>>#git_checkout_notify_all",				"LGitCheckoutNotifyTypeEnum class>>#git_checkout_notify_dirty",				"LGitCheckoutNotifyTypeEnum class>>#git_checkout_notify_conflict",				"LGitCheckoutNotifyTypeEnum class>>#git_checkout_notify_none",				"LGitCheckoutStrategyEnum class>>#git_checkout_dont_overwrite_ignored",				"LGitCheckoutStrategyEnum class>>#git_checkout_skip_unmerged",				"LGitCheckoutStrategyEnum class>>#git_checkout_dont_update_index",				"LGitCheckoutStrategyEnum class>>#git_checkout_allow_conflicts",				"LGitCheckoutStrategyEnum class>>#git_checkout_recreate_missing",				"LGitCheckoutStrategyEnum class>>#git_checkout_conflict_style_diff3",				"LGitCheckoutStrategyEnum class>>#git_checkout_update_submodules_if_changed",				"LGitCheckoutStrategyEnum class>>#git_checkout_remove_untracked",				"LGitCheckoutStrategyEnum class>>#git_checkout_conflict_style_merge",				"LGitCheckoutStrategyEnum class>>#git_checkout_use_theirs",				"LGitCheckoutStrategyEnum class>>#git_checkout_skip_locked_directories",				"LGitCheckoutStrategyEnum class>>#git_checkout_dont_write_index",				"LGitCheckoutStrategyEnum class>>#git_checkout_update_only",				"LGitCheckoutStrategyEnum class>>#git_checkout_no_refresh",				"LGitCheckoutStrategyEnum class>>#git_checkout_remove_ignored",				"LGitCheckoutStrategyEnum class>>#git_checkout_update_submodules",				"LGitCheckoutStrategyEnum class>>#git_checkout_use_ours",				"LGitCheckoutStrategyEnum class>>#git_checkout_safe",				"LGitCheckoutStrategyEnum class>>#git_checkout_force",				"LGitCheckoutStrategyEnum class>>#git_checkout_disable_pathspec_match",				"LGitCheckoutStrategyEnum class>>#git_checkout_safe_create",				"LGitCheckoutStrategyEnum class>>#git_checkout_dont_remove_existing",				"LGitCheckoutStrategyEnum class>>#git_checkout_none",				"LGitCloneLocalTypeEnum class>>#git_clone_local_no_links",				"LGitCloneLocalTypeEnum class>>#git_clone_no_local",				"LGitCloneLocalTypeEnum class>>#git_clone_local",				"LGitCloneLocalTypeEnum class>>#git_clone_local_auto",				"LGitCommit>>#changesFileNamed:",				"LGitCommitStore>>#basicEntry:path:nodesDo:",				"LGitCommitStore>>#nodeAt:ifPresent:ifAbsent:",				"LGitCredentialsTypeEnum class>>#git_credtype_userpass_plaintext",				"LGitCredentialsTypeEnum class>>#git_credtype_ssh_key",				"LGitCredentialsTypeEnum class>>#git_credtype_ssh_custom",				"LGitCredentialsTypeEnum class>>#git_credtype_default",				"LGitDeltaTypeEnum class>>#git_delta_untracked",				"LGitDeltaTypeEnum class>>#git_delta_added",				"LGitDeltaTypeEnum class>>#git_delta_copied",				"LGitDeltaTypeEnum class>>#git_delta_modified",				"LGitDeltaTypeEnum class>>#git_delta_ignored",				"LGitDeltaTypeEnum class>>#git_delta_typechange",				"LGitDeltaTypeEnum class>>#git_delta_conflicted",				"LGitDeltaTypeEnum class>>#git_delta_renamed",				"LGitDeltaTypeEnum class>>#git_delta_unmodified",				"LGitDeltaTypeEnum class>>#git_delta_unreadable",				"LGitDeltaTypeEnum class>>#git_delta_deleted",				"LGitDiff>>#deltasDo:",				"LGitDiffBinaryTypeEnum class>>#git_diff_binary_literal",				"LGitDiffBinaryTypeEnum class>>#git_diff_binary_none",				"LGitDiffBinaryTypeEnum class>>#git_diff_binary_delta",				"LGitDiffFindTypeEnum class>>#git_diff_find_all",				"LGitDiffFindTypeEnum class>>#git_diff_find_renames_from_rewrites",				"LGitDiffFindTypeEnum class>>#git_diff_find_by_config",				"LGitDiffFindTypeEnum class>>#git_diff_find_dont_ignore_whitespace",				"LGitDiffFindTypeEnum class>>#git_diff_find_rewrites",				"LGitDiffFindTypeEnum class>>#git_diff_find_for_untracked",				"LGitDiffFindTypeEnum class>>#git_diff_find_and_break_rewrites",				"LGitDiffFindTypeEnum class>>#git_diff_find_ignore_whitespace",				"LGitDiffFindTypeEnum class>>#git_diff_break_rewrites",				"LGitDiffFindTypeEnum class>>#git_diff_find_copies",				"LGitDiffFindTypeEnum class>>#git_diff_find_renames",				"LGitDiffFindTypeEnum class>>#git_diff_break_rewrites_for_renames_only",				"LGitDiffFindTypeEnum class>>#git_diff_find_copies_from_unmodified",				"LGitDiffFindTypeEnum class>>#git_diff_find_exact_match_only",				"LGitDiffFindTypeEnum class>>#git_diff_find_remove_unmodified",				"LGitDiffFlagTypeEnum class>>#git_diff_flag_valid_id",				"LGitDiffFlagTypeEnum class>>#git_diff_flag_not_binary",				"LGitDiffFlagTypeEnum class>>#git_diff_flag_binary",				"LGitDiffFormatTypeEnum class>>#git_diff_format_patch_header",				"LGitDiffFormatTypeEnum class>>#git_diff_format_name_only",				"LGitDiffFormatTypeEnum class>>#git_diff_format_name_status",				"LGitDiffFormatTypeEnum class>>#git_diff_format_patch",				"LGitDiffFormatTypeEnum class>>#git_diff_format_raw",				"LGitDiffLineTypeEnum class>>#git_diff_line_add_eofnl",				"LGitDiffLineTypeEnum class>>#git_diff_line_context",				"LGitDiffLineTypeEnum class>>#git_diff_line_del_eofnl",				"LGitDiffLineTypeEnum class>>#git_diff_line_binary",				"LGitDiffLineTypeEnum class>>#git_diff_line_file_hdr",				"LGitDiffLineTypeEnum class>>#git_diff_line_hunk_hdr",				"LGitDiffLineTypeEnum class>>#git_diff_line_context_eofnl",				"LGitDiffLineTypeEnum class>>#git_diff_line_addition",				"LGitDiffLineTypeEnum class>>#git_diff_line_deletion",				"LGitDiffOptionTypeEnum class>>#git_diff_include_unmodified",				"LGitDiffOptionTypeEnum class>>#git_diff_ignore_case",				"LGitDiffOptionTypeEnum class>>#git_diff_include_unreadable",				"LGitDiffOptionTypeEnum class>>#git_diff_include_untracked",				"LGitDiffOptionTypeEnum class>>#git_diff_ignore_whitespace_eol",				"LGitDiffOptionTypeEnum class>>#git_diff_force_text",				"LGitDiffOptionTypeEnum class>>#git_diff_show_binary",				"LGitDiffOptionTypeEnum class>>#git_diff_include_ignored",				"LGitDiffOptionTypeEnum class>>#git_diff_ignore_filemode",				"LGitDiffOptionTypeEnum class>>#git_diff_enable_fast_untracked_dirs",				"LGitDiffOptionTypeEnum class>>#git_diff_ignore_submodules",				"LGitDiffOptionTypeEnum class>>#git_diff_include_unreadable_as_untracked",				"LGitDiffOptionTypeEnum class>>#git_diff_ignore_whitespace_change",				"LGitDiffOptionTypeEnum class>>#git_diff_recurse_ignored_dirs",				"LGitDiffOptionTypeEnum class>>#git_diff_force_binary",				"LGitDiffOptionTypeEnum class>>#git_diff_ignore_whitespace",				"LGitDiffOptionTypeEnum class>>#git_diff_skip_binary_check",				"LGitDiffOptionTypeEnum class>>#git_diff_update_index",				"LGitDiffOptionTypeEnum class>>#git_diff_disable_pathspec_match",				"LGitDiffOptionTypeEnum class>>#git_diff_reverse",				"LGitDiffOptionTypeEnum class>>#git_diff_include_typechange_trees",				"LGitDiffOptionTypeEnum class>>#git_diff_show_untracked_content",				"LGitDiffOptionTypeEnum class>>#git_diff_patience",				"LGitDiffOptionTypeEnum class>>#git_diff_show_unmodified",				"LGitDiffOptionTypeEnum class>>#git_diff_recurse_untracked_dirs",				"LGitDiffOptionTypeEnum class>>#git_diff_normal",				"LGitDiffOptionTypeEnum class>>#git_diff_minimal",				"LGitDiffOptionTypeEnum class>>#git_diff_include_typechange",				"LGitDiffStatsFormatTypeEnum class>>#git_diff_stats_include_summary",				"LGitDiffStatsFormatTypeEnum class>>#git_diff_stats_short",				"LGitDiffStatsFormatTypeEnum class>>#git_diff_stats_full",				"LGitDiffStatsFormatTypeEnum class>>#git_diff_stats_number",				"LGitDiffStatsFormatTypeEnum class>>#git_diff_stats_none",				"LGitDirectionEnum class>>#git_direction_push",				"LGitDirectionEnum class>>#git_direction_fetch",				"LGitErrorTypeEnum class>>#giterr_net",				"LGitErrorTypeEnum class>>#giterr_filesystem",				"LGitErrorTypeEnum class>>#giterr_repository",				"LGitErrorTypeEnum class>>#giterr_submodule",				"LGitErrorTypeEnum class>>#giterr_index",				"LGitErrorTypeEnum class>>#giterr_os",				"LGitErrorTypeEnum class>>#giterr_filter",				"LGitErrorTypeEnum class>>#giterr_describe",				"LGitErrorTypeEnum class>>#giterr_reference",				"LGitErrorTypeEnum class>>#giterr_rebase",				"LGitErrorTypeEnum class>>#giterr_callback",				"LGitErrorTypeEnum class>>#giterr_nomemory",				"LGitErrorTypeEnum class>>#giterr_invalid",				"LGitErrorTypeEnum class>>#giterr_zlib",				"LGitErrorTypeEnum class>>#giterr_indexer",				"LGitErrorTypeEnum class>>#giterr_merge",				"LGitErrorTypeEnum class>>#giterr_ssh",				"LGitErrorTypeEnum class>>#giterr_cherrypick",				"LGitErrorTypeEnum class>>#giterr_fetchhead",				"LGitErrorTypeEnum class>>#giterr_revert",				"LGitErrorTypeEnum class>>#giterr_thread",				"LGitErrorTypeEnum class>>#giterr_tree",				"LGitErrorTypeEnum class>>#giterr_ssl",				"LGitErrorTypeEnum class>>#giterr_checkout",				"LGitErrorTypeEnum class>>#giterr_regex",				"LGitErrorTypeEnum class>>#giterr_config",				"LGitErrorTypeEnum class>>#giterr_none",				"LGitErrorTypeEnum class>>#giterr_object",				"LGitErrorTypeEnum class>>#giterr_stash",				"LGitErrorTypeEnum class>>#giterr_tag",				"LGitErrorTypeEnum class>>#giterr_odb",				"LGitExternalEnumerationUInt32 class>>#fromInteger:",				"LGitFetchPruneTypeEnum class>>#git_fetch_prune",				"LGitFetchPruneTypeEnum class>>#git_fetch_no_prune",				"LGitFetchPruneTypeEnum class>>#git_fetch_prune_unspecified",				"LGitFilemodeEnum class>>#git_filemode_new",				"LGitFilemodeEnum class>>#git_filemode_blob_executable",				"LGitFilemodeEnum class>>#git_filemode_blob",				"LGitFilemodeEnum class>>#git_filemode_link",				"LGitFilemodeEnum class>>#git_filemode_tree",				"LGitFilemodeEnum class>>#git_filemode_commit",				"LGitFunctionReturn class>>#methodSelector:value:",				"LGitObjectTypeEnum class>>#git_obj_ref_delta",				"LGitObjectTypeEnum class>>#git_obj_tag",				"LGitObjectTypeEnum class>>#git_obj_any",				"LGitObjectTypeEnum class>>#git_obj_tree",				"LGitObjectTypeEnum class>>#git_obj__ext2",				"LGitObjectTypeEnum class>>#git_obj_blob",				"LGitObjectTypeEnum class>>#git_obj_bad",				"LGitObjectTypeEnum class>>#git_obj_commit",				"LGitObjectTypeEnum class>>#git_obj_ofs_delta",				"LGitObjectTypeEnum class>>#git_obj__ext1",				"LGitOpenFlagEnum class>>#git_repository_open_no_search",				"LGitOpenFlagEnum class>>#git_repository_open_bare",				"LGitOpenFlagEnum class>>#git_repository_open_cross_fs",				"LGitOptionsVersionsEnum class>>#git_diff_options_version_1",				"LGitOptionsVersionsEnum class>>#git_fetch_options_version_1",				"LGitOptionsVersionsEnum class>>#git_merge_options_version_1",				"LGitOptionsVersionsEnum class>>#git_push_options_version_1",				"LGitOptionsVersionsEnum class>>#git_checkout_options_version_1",				"LGitOptionsVersionsEnum class>>#git_blame_options_version_1",				"LGitOptionsVersionsEnum class>>#git_clone_options_version_1",				"LGitOptionsVersionsEnum class>>#git_diff_find_options_version_1",				"LGitPathSpecFlagTypeEnum class>>#git_pathspec_no_glob",				"LGitPathSpecFlagTypeEnum class>>#git_pathspec_no_match_error",				"LGitPathSpecFlagTypeEnum class>>#git_pathspec_use_case",				"LGitPathSpecFlagTypeEnum class>>#git_pathspec_failures_only",				"LGitPathSpecFlagTypeEnum class>>#git_pathspec_default",				"LGitPathSpecFlagTypeEnum class>>#git_pathspec_find_failures",				"LGitPathSpecFlagTypeEnum class>>#git_pathspec_ignore_case",				"LGitProxyTypeEnum class>>#git_proxy_specified",				"LGitProxyTypeEnum class>>#git_proxy_none",				"LGitProxyTypeEnum class>>#git_proxy_auto",				"LGitPushOptionsVersionEnum class>>#lgit_push_options_version_1",				"LGitReferenceTypeEnum class>>#git_ref_listall",				"LGitReferenceTypeEnum class>>#git_ref_symbolic",				"LGitReferenceTypeEnum class>>#git_ref_oid",				"LGitReferenceTypeEnum class>>#git_ref_invalid",				"LGitRemoteAutotagOptionTypeEnum class>>#git_remote_download_tags_none",				"LGitRemoteAutotagOptionTypeEnum class>>#git_remote_download_tags_auto",				"LGitRemoteAutotagOptionTypeEnum class>>#git_remote_download_tags_all",				"LGitRemoteAutotagOptionTypeEnum class>>#git_remote_download_tags_unspecified",				"LGitRemoteCompletionTypeEnum class>>#git_remote_completion_download",				"LGitRemoteCompletionTypeEnum class>>#git_remote_completion_error",				"LGitRemoteCompletionTypeEnum class>>#git_remote_completion_indexing",				"LGitResetTypeEnum class>>#git_reset_mixed",				"LGitResetTypeEnum class>>#git_reset_hard",				"LGitResetTypeEnum class>>#git_reset_soft",				"LGitReturnCodeEnum class>>#git_econflict",				"LGitReturnCodeEnum class>>#git_eeof",				"LGitReturnCodeEnum class>>#git_einvalid",				"LGitReturnCodeEnum class>>#git_iterover",				"LGitReturnCodeEnum class>>#git_eauth",				"LGitReturnCodeEnum class>>#git_error",				"LGitReturnCodeEnum class>>#git_ebarerepo",				"LGitReturnCodeEnum class>>#git_eexists",				"LGitReturnCodeEnum class>>#git_eapplied",				"LGitReturnCodeEnum class>>#git_passthrough",				"LGitReturnCodeEnum class>>#git_enonfastforward",				"LGitReturnCodeEnum class>>#git_eambiguous",				"LGitReturnCodeEnum class>>#git_eunmerged",				"LGitReturnCodeEnum class>>#git_euser",				"LGitReturnCodeEnum class>>#git_ok",				"LGitReturnCodeEnum class>>#git_epeel",				"LGitReturnCodeEnum class>>#git_ecertificate",				"LGitReturnCodeEnum class>>#git_euncommitted",				"LGitReturnCodeEnum class>>#git_emodified",				"LGitReturnCodeEnum class>>#git_eunbornbranch",				"LGitReturnCodeEnum class>>#git_enotfound",				"LGitReturnCodeEnum class>>#git_elocked",				"LGitReturnCodeEnum class>>#git_einvalidspec",				"LGitReturnCodeEnum class>>#git_ebufs",				"LGitRevwalk>>#select:thenDo:",				"LGitRevwalk>>#do:",				"LGitRevwalkSortTypeEnum class>>#git_sort_topological",				"LGitRevwalkSortTypeEnum class>>#git_sort_none",				"LGitRevwalkSortTypeEnum class>>#git_sort_time",				"LGitRevwalkSortTypeEnum class>>#git_sort_reverse",				"LGitStatusTypeEnum class>>#git_status_wt_deleted",				"LGitStatusTypeEnum class>>#git_status_ignored",				"LGitStatusTypeEnum class>>#git_status_wt_modified",				"LGitStatusTypeEnum class>>#git_status_wt_renamed",				"LGitStatusTypeEnum class>>#git_status_index_modified",				"LGitStatusTypeEnum class>>#git_status_index_new",				"LGitStatusTypeEnum class>>#git_status_conflicted",				"LGitStatusTypeEnum class>>#git_status_index_typechange",				"LGitStatusTypeEnum class>>#git_status_current",				"LGitStatusTypeEnum class>>#git_status_wt_new",				"LGitStatusTypeEnum class>>#git_status_wt_unreadable",				"LGitStatusTypeEnum class>>#git_status_index_deleted",				"LGitStatusTypeEnum class>>#git_status_wt_typechange",				"LGitStatusTypeEnum class>>#git_status_index_renamed",				"LGitStructVersionsEnum class>>#git_remote_callbacks_version_1",				"LGitSubmoduleIgnoreTypeEnum class>>#git_submodule_ignore_all",				"LGitSubmoduleIgnoreTypeEnum class>>#git_submodule_ignore_none",				"LGitSubmoduleIgnoreTypeEnum class>>#git_submodule_ignore_dirty",				"LGitSubmoduleIgnoreTypeEnum class>>#git_submodule_ignore_untracked",				"LGitSubmoduleIgnoreTypeEnum class>>#git_submodule_ignore_reset",				"LGitSubmoduleIgnoreTypeEnum class>>#git_submodule_ignore_default",				"LGitTreeEntry>>#readStreamDo:",				"LGitTreewalkModeEnum class>>#git_treewalk_post",				"LGitTreewalkModeEnum class>>#git_treewalk_pre",				"LRUCache>>#at:put:",				"LabelPresenter>>#label:",				"LabelledSliderInput>>#value:",				"LabelledSliderInput class>>#example",				"Latin1 class>>#nextPutValue:toStream:withShiftSequenceIfNeededForTextConverterState:",				"Latin1 class>>#nextPutRightHalfValue:toStream:withShiftSequenceIfNeededForTextConverterState:",				"Latin1 class>>#initialize",				"LayoutCell>>#do:",				"LayoutClassScope>>#ifNotEmpty:",				"LayoutClassScope>>#withParentScopesDo:",				"LayoutClassScope>>#reverseDo:",				"LayoutClassScope>>#do:",				"LayoutEmptyScope>>#withParentScopesDo:",				"LazyMorphListMorph>>#drawSubmorphsOn:",				"LazyMorphListMorph>>#drawSubmorphsOnAthensCanvas:",				"LibC>>#resultOfCommand:",				"LimitingLineStreamWrapper>>#atEnd",				"LineSegment>>#controlPointsDo:",				"Link>>#edgesConnectingShapes:references:lineShape:modelBlock:",				"Link>>#do:",				"LinkedList>>#removeAllSuchThat:",				"LinkedList>>#select:",				"LinkedList>>#select:thenDo:",				"LinkedList>>#reject:thenCollect:",				"LinkedList>>#collect:thenReject:",				"LinkedList>>#select:thenCollect:",				"LinkedList>>#do:",				"LinkedList>>#reject:",				"LinkedList>>#linksDo:",				"LinkedList>>#collect:",				"LinkedList>>#collect:thenSelect:",				"LinkedListTest>>#setUp",				"LinkedListTest>>#elementToAdd",				"LinkedListTest>>#element",				"ListDialogWindow>>#updateList",				"ListDialogWindow>>#browseAction",				"ListPresenter>>#resetFilteringBlock",				"ListPresenter>>#resetSortingBlock",				"ListPresenter>>#allowToSelect:",				"ListPresenter>>#setIndex:",				"ListPresenter>>#menu:",				"ListPresenter>>#displayBlock:",				"ListPresenter>>#setSelectedIndex:",				"ListPresenter>>#registerEvents",				"ListPresenter>>#multiSelection:",				"ListPresenter>>#autoDeselect:",				"ListPresenter>>#setSelectedItem:",				"ListPresenter>>#items:",				"ListPresenter>>#filteringBlock:",				"ListPresenter>>#backgroundColorBlock:",				"ListPresenter>>#listItems",				"ListPresenter>>#sortingBlock:",				"LiteralVariable>>#write:",				"LiteralVariableTest>>#testComparison",				"LocalRecursionStopper class>>#activeMethods",				"LzwGifDecoder>>#writeBit:on:",				"MCAncestry>>#ancestorsDoWhileTrue:",				"MCAncestry>>#allAncestorsDo:",				"MCAncestry>>#breadthFirstAncestorsDo:",				"MCConfiguration>>#depsSatisfying:versionDo:displayingProgress:",				"MCDataStream class>>#detectFile:do:",				"MCDefinitionIndex>>#definitionLike:ifPresent:ifAbsent:",				"MCDirectoryRepository>>#readStreamForFileNamed:do:",				"MCFileBasedRepository>>#versionReaderForFileNamed:do:",				"MCFileTreeFileSystemUtils class>>#readStreamFor:in:do:",				"MCFileTreeRepository>>#readStreamForFileNamed:do:",				"MCFtpRepository>>#readStreamForFileNamed:do:",				"MCFtpRepository>>#clientDo:",				"MCGitHubRepository>>#commitIdFor:ifFound:",				"MCHttpRepository>>#entityStreamContents:",				"MCHttpRepository>>#readStreamForFileNamed:do:",				"MCPackageManager class>>#managersForPackage:do:",				"MCPackageManager class>>#managersForClass:do:",				"MCPackageManager class>>#managersForCategory:do:",				"MCPackageManager class>>#bestMatchingManagerForCategory:do:",				"MCRepositoryGroup>>#repositoriesDo:",				"MCSubDirectoryRepository>>#writeStreamForFileNamed:replace:do:",				"MCSubDirectoryRepository>>#readStreamForFileNamed:do:",				"MCVersion>>#withAllDependenciesDo:",				"MCVersion>>#allDependenciesNotIn:do:ifUnresolved:",				"MCVersion>>#allAvailableDependenciesDo:",				"MCVersion>>#withAllDependenciesDo:ifUnresolved:",				"MCVersionReader class>>#file:streamDo:",				"MCWorkingCopy>>#requiredPackagesParallelCollect:withMessage:",				"MKGoalInspect>>#onState:",				"MKPredicateFives>>#goal",				"MKPredicateFooForBag>>#goal",				"MKPredicateSexpAppendo>>#goal",				"MKPredicateSexpConso>>#goal",				"MKPredicateSexpDycko>>#goal",				"MKPredicateSexpListo>>#goal",				"MKPredicateSexpLolo>>#goal",				"MKRealogTest>>#contracto",				"MKRealogTest>>#testCompaniesWithConsultants",				"MKRealogTest>>#sicko",				"MKRealogTest>>#testCheckSingleEmployment",				"MKRealogTest>>#testContracto",				"MKRealogTest>>#companyo",				"MKRealogTest>>#employeeo",				"MKRealogTest>>#employedo",				"MKRealogTest>>#testEmployeeo",				"MKRealogTest>>#testEmployedo",				"MKRealogTest>>#workedHourso",				"MKRealogTest>>#maritalo",				"MKSexpTest>>#testDycko",				"MailAddressTokenizer class>>#initialize",				"MailMessage>>#headerFieldsNamed:do:",				"MalCircuitSpanningEdges>>#doUnvisitedEdges:",				"MalDijkstra>>#backtrack:edgeDo:",				"MalGraphAlgorithm>>#addNodesFrom:childrenBlock:",				"MalGraphAlgorithm>>#edges:from:toAll:",				"MalGraphAlgorithm>>#edges:from:to:weight:",				"MalGraphAlgorithm>>#addEdge:from:to:",				"McCullochAssociateRule>>#relateo",				"McCullochIdentityRule>>#relateo",				"McCullochRepeatRule>>#relateo",				"McCullochReverseRule>>#relateo",				"McCullochRightHalfAssociateRule>>#relateo",				"MemoryFileSystemDirectory>>#fileEntriesDo:",				"MemoryFileSystemFile>>#writeStreamDo:",				"MemoryStore>>#nodeAt:ifPresent:ifAbsent:",				"MemoryStore>>#replaceFile:in:",				"MenuGroupPresenter>>#autoRefresh:",				"MenuGroupPresenter>>#addItem:",				"MenuItemPresenter>>#autoRefresh:",				"MenuItemPresenter>>#description:",				"MenuItemPresenter>>#state:",				"MenuItemPresenter>>#enabled:",				"MenuItemPresenter>>#action:",				"MenuItemPresenter>>#subMenu:",				"MenuItemPresenter>>#shortcut:",				"MenuItemPresenter>>#icon:",				"MenuItemPresenter>>#iconName:",				"MenuItemPresenter>>#name:",				"MenuMorph>>#buildTitle:",				"MenuMorph class>>#chooseFrom:values:lines:title:",				"MenuMorph class>>#chooseFrom:lines:title:",				"MenuMorph class>>#confirm:trueChoice:falseChoice:",				"MenuPresenter>>#autoRefresh:",				"MenuPresenter>>#addTitle:",				"MenuPresenter>>#icon:",				"MenuPresenter>>#iconName:",				"MenuPresenter>>#addGroup:",				"MenuPresenter>>#title:",				"MenuRegistration>>#assignOrderWithBlock:",				"MessageDelegate>>#doesNotUnderstand:",				"MessageSend>>#cull:",				"MetaLinkObjectAPITest>>#linkForTemp",				"MetaSTExporter>>#exportWithRepositoryPath:ofPackage:",				"MetacelloAbstractVersionConstructor>>#valueForValueHolder:",				"MetacelloAddMemberSpec>>#applyAdd:copy:merge:remove:",				"MetacelloAtomicLoadDirective>>#directivesDo:",				"MetacelloCopyMemberSpec>>#applyAdd:copy:merge:remove:",				"MetacelloDirective>>#directivesDo:",				"MetacelloGroupSpec>>#projectDo:packageDo:groupDo:",				"MetacelloMCBaselineOfProjectSpec>>#copyForRegistration:onWrite:",				"MetacelloMCConfigurationOfProjectSpec>>#copyForRegistration:onWrite:",				"MetacelloMCPartiallyLoadedStatus>>#isAllLoadedToSpec:",				"MetacelloMCPartiallyLoadedStatus>>#isLoadedMatchConstraints:",				"MetacelloMCPartiallyLoadedStatus>>#isSomethingLoaded:",				"MetacelloMCPartiallyLoadedStatus>>#isLoadedToSpec:",				"MetacelloMemberListSpec>>#collect:",				"MetacelloMemberListSpec>>#select:",				"MetacelloMemberListSpec>>#detect:ifNone:",				"MetacelloMemberListSpec>>#specListDo:",				"MetacelloMemberListSpec>>#specListDetect:ifNone:",				"MetacelloMemberListSpec>>#specListSelect:",				"MetacelloMergeMemberSpec>>#applyAdd:copy:merge:remove:",				"MetacelloPackageLoadDirective>>#packageDirectivesDo:",				"MetacelloPackageLoadDirective>>#packageDo:",				"MetacelloPackageSpec>>#currentPackageLoaded:comparing:notLoaded:using:",				"MetacelloPackageSpec>>#projectDo:packageDo:groupDo:",				"MetacelloPharoCommonPlatform>>#do:displaying:",				"MetacelloPlatform>>#stackCacheFor:cacheClass:at:doing:",				"MetacelloPlatform>>#useStackCacheDuring:defaultDictionary:",				"MetacelloPlatform>>#readStreamOn:do:",				"MetacelloPostLoadDirective>>#postLoadDo:",				"MetacelloPreLoadDirective>>#preLoadDo:",				"MetacelloPrePostLoadDirective>>#prepostLoadDirectivesDo:",				"MetacelloPrePostLoadDirective>>#prepostLoadDo:",				"MetacelloProjectReferenceSpec>>#projectDo:packageDo:groupDo:",				"MetacelloProjectRegistration>>#copyOnWrite:",				"MetacelloProjectRegistration class>>#registrationForProjectSpec:ifAbsent:ifPresent:",				"MetacelloProjectRegistry>>#registrationFor:ifPresent:ifAbsent:",				"MetacelloProjectSpec>>#projectDo:packageDo:groupDo:",				"MetacelloReferenceConfig>>#baseline10:",				"MetacelloRemoveMemberSpec>>#applyAdd:copy:merge:remove:",				"MetacelloScriptApiExecutor>>#executeString:do:",				"MetacelloScriptApiExecutor>>#projectSpecsFromRepositoryArg",				"MetacelloScriptApiExecutor>>#executeBlock:do:",				"MetacelloScriptApiExecutor>>#executeCollection:do:",				"MetacelloScriptEngine>>#fetchRecord:required:",				"MetacelloScriptExecutor>>#executeString:do:",				"MetacelloScriptExecutor>>#executeCollection:do:",				"MetacelloScriptExecutor>>#executeBlock:do:",				"MetacelloSemanticVersionNumber>>#do:separatedBy:",				"MetacelloSemanticVersionNumber>>#do:",				"MetacelloSpec>>#copyOnWrite:",				"MetacelloToolBox>>#modifySection:sectionIndex:repository:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:",				"MetacelloToolBox>>#addBaselineOfSection:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:",				"MetacelloToolBox>>#addSection:repository:requiredProjects:packages:dependencies:includes:files:repositories:preLoadDoIts:postLoadDoIts:supplyingAnswers:groups:versionSpecsDo:",				"MetacelloToolBox>>#modifySymbolicVersionMethodFor:symbolicVersionSpecsDo:",				"MetacelloValueHolderSpecTestCase>>#testValueHolderSpec",				"MetacelloValueHolderSpecTestCase>>#testValueHolderMergeSpec",				"MetacelloVersion>>#allProjectsDo:withTraversedProjects:",				"MetacelloVersionLoadDirective>>#directivesDo:",				"MetacelloVersionLoadDirective>>#versionDirectivesDo:",				"MetacelloVersionLoadDirective>>#versionDirectivesDepthFirstDo:",				"MetacelloVersionLoadDirective>>#versionDo:",				"MetacelloVersionNumber>>#do:separatedBy:",				"MetacelloVersionNumber>>#do:",				"MetacelloVersionSpec>>#author",				"MetacelloVersionSpec>>#timestamp",				"MetacelloVersionSpec>>#configMethodBasicOn:last:indent:",				"MetacelloVersionSpec>>#description",				"MetacelloVersionSpec>>#blessing",				"MetacelloVersionValidator>>#validateProjectCreationFrom:onError:",				"MetacelloVisitedPackages>>#visit:doing:",				"Metaclass>>#subclassesDo:",				"MethodDictionary>>#associationsDo:",				"MethodDictionary>>#valuesDo:",				"MethodDictionary>>#keysDo:",				"MethodToolbar>>#method:",				"MicMicrodownTextualBuilder>>#rawHeader:withLevel:",				"MicMicrodownTextualBuilder>>#withLinesIn:do:separatedBy:",				"MonticelloBootstrap>>#bootstrapVersionsSatisfying:",				"MonticelloBootstrap>>#bootstrapVersionsExcept:",				"Morph>>#withAllOwnersDo:",				"Morph>>#rowMorphForNode:inColumn:",				"Morph>>#submorphsInFrontOf:do:",				"Morph>>#morphsInFrontOf:overlapping:do:",				"Morph>>#outermostMorphThat:",				"Morph>>#asText",				"Morph>>#firstOwnerSuchThat:",				"Morph>>#submorphThat:ifNone:",				"Morph>>#valueOfProperty:ifPresentDo:",				"Morph>>#submorphsBehind:do:",				"Morph>>#gtInspectorMorphIn:",				"Morph>>#submorphsSatisfying:",				"Morph>>#morphsAt:unlocked:do:",				"Morph>>#allMorphsDo:",				"Morph>>#drawSubmorphsOn:",				"Morph>>#findDeepSubmorphThat:ifAbsent:",				"MorphTreeColumn>>#itemMorphGetter:",				"MorphTreeColumn>>#itemStringGetter:",				"MorphTreeColumn>>#nodeStringGetter:",				"MorphTreeColumn>>#rowMorphGetterBlock",				"MorphTreeListManager>>#from:to:do:",				"MorphTreeMorph>>#expandSilently:suchThat:",				"MorphTreeMorph>>#lineColorForNode:",				"MorphTreeMorph>>#expandAll:except:",				"MorphTreeMorph>>#expand:suchThat:",				"MorphTreeNodeMorph>>#childrenDo:",				"MorphTreeNodeMorph>>#withSiblingsDo:",				"MorphTreeNodeMorph>>#icon",				"MorphTreePager>>#allIntervals",				"MorphicEvent>>#withHandPositionDo:",				"MorphicSliderAdapter>>#buildWidget",				"MorphicSliderAdapter>>#value:",				"MorphicTreeAdapter>>#removeRootsSuchAs:",				"MorphicUIManager>>#edit:label:accept:",				"MorphicUIManager>>#informUserDuring:",				"MultiByteFileStream>>#upToAnyOf:do:",				"MultiColumnListPresenter>>#setIndex:",				"MultiColumnListPresenter>>#setSelectedIndex:",				"MustBeBooleanTest>>#testIfTrueWithClosureAfterJump",				"NECSelectorEntry>>#findMethodAndDo:ifAbsent:",				"NECSymbolEntry>>#findMethodAndDo:ifAbsent:",				"NECTestClass>>#testIt:",				"NSInterpolator>>#gtCanvasForInspector",				"NewHandleMorph>>#step",				"NewValueHolder>>#contents:",				"NewValueHolderTest>>#testValuesInBlock",				"NewValueHolderTest>>#testChange",				"NullStream>>#element",				"NullWorldRenderer>>#drawDuring:",				"Number>>#to:by:do:",				"Number>>#to:do:",				"OCBytecodeDecompilerTest>>#pushClosureCopyNoCopiedArg",				"OCBytecodeDecompilerTest>>#pushClosureCopyOneCopiedArg",				"OCClosureTest>>#testBlockArgument",				"OCClosureTest>>#testBlockTemps",				"OCClosureTest>>#testBlockTemp",				"OCCompilerDynamicASTPlugin>>#transform:",				"OCContextTempMappingTest>>#testAccessingArgOfOuterBlockFromAnotherDeepBlock",				"OCOpalExamples>>#singleRemoteDifferentBlocksSameArgumentName",				"OCOpalExamples>>#exampleSimpleBlockArgument1",				"OCOpalExamples>>#exampleNestedBlockScoping",				"OCOpalExamples>>#exampleBlockMethodArgument:",				"OCOpalExamples>>#exampleSimpleBlockLocalWhile",				"OCOpalExamples>>#noRemoteBlockTemp",				"OCOpalExamples>>#noRemoteBlockArgument",				"OCOpalExamples>>#exampleBlockArgument",				"OCOpalExamples>>#exampleSimpleBlockLocal",				"OCOpalExamples>>#exampleBlockExternalArg",				"OCScannerTest>>#testLiteralSymbols",				"OCSourceCode2BytecodeTest>>#testPrimValueWith",				"OSEnvironment>>#associationsDo:",				"OSEnvironment>>#at:ifPresent:",				"OSEnvironment>>#keysDo:",				"OSEnvironment>>#valuesDo:",				"OSKeyboardEvent>>#modifiedCharacter",				"OSSDL2AthensRenderer>>#drawTexturePixelsWith:",				"OSSDL2Driver>>#visitControllerAxisEvent:",				"OSSDL2Driver>>#visitJoyAxisEvent:",				"OSWindowFormRenderer>>#drawDuring:",				"OSWorldRenderer>>#drawWhileProfilingRenderingTimeDuring:",				"Object>>#stonProcessSubObjects:",				"Object>>#asLiteralRBNode",				"Object>>#positiveo",				"Object>>#asLink",				"Object>>#split:do:",				"Object>>#pairo",				"Object>>#nilo",				"Object>>#asDoubleLink",				"Object>>#greaterThanOneo",				"Object>>#asSlotsGroupKnownReferences:",				"Object>>#'~~>'",				"Object>>#asValueHolder",				"Object>>#D2",				"Object>>#asSpotterCandidateLink",				"Object>>#retryWithGC:until:",				"Object>>#asLiteralNode",				"Object>>#oneo",				"Object>>#in:",				"Object>>#zeroo",				"Object>>#asSpotterProcessorLink",				"Object>>#removeActionsSatisfying:forEvent:",				"ObjectFinalizerTest>>#testFinalizationOfMultipleResources",				"ObjectStringConverter>>#objectAsString:",				"ObjectStringConverter>>#stringAsObject:",				"ObservablePoint>>#x:",				"ObservableSlot>>#emitStore:",				"ObservableSlot>>#write:to:",				"OkCancelToolbar>>#performCancelAction",				"OkCancelToolbar>>#cancelAction:",				"OkCancelToolbar>>#cancelled:",				"OkToolbar>>#okAction:",				"OmBlock>>#atLocalName:ifPresent:ifAbsent:",				"OmBlockFileStore>>#readEntryForLocalName:ifPresent:ifAbsent:",				"OmBlockFileStoreTest>>#testMultibyteUnicodeCharacterCrossingTwoBlocks",				"OmFileStore>>#entriesDo:",				"OmFileStore>>#entryFor:ifPresent:ifAbsent:",				"OmFileStore>>#readEntryForLocalName:ifPresent:ifAbsent:",				"OmFileStore>>#readEntriesWith:",				"OmSTONEntryReader>>#entryPositionsReverseDo:",				"OmSTONEntryReader>>#nextEntryPositionIfFound:ifNone:",				"OmSTONEntryReader>>#entryPositionsDo:",				"OrderedCollection>>#removeAllSuchThat:",				"OrderedCollection>>#select:",				"OrderedCollection>>#reject:thenCollect:",				"OrderedCollection>>#select:thenCollect:",				"OrderedCollection>>#collect:from:to:",				"OrderedCollection>>#do:",				"OrderedCollection>>#reject:",				"OrderedCollection>>#collect:",				"OrderedCollection>>#reverseDo:",				"OrderedCollection>>#collect:thenSelect:",				"OrderedDictionary>>#associationsDo:",				"OrderedDictionary>>#select:",				"OrderedDictionary>>#valuesDo:",				"OrderedDictionary>>#asValueHolder",				"OrderedDictionary>>#collect:",				"OrderedDictionary>>#at:update:initial:",				"OrderedDictionary>>#keysDo:",				"OrderedDictionaryTest>>#should:enumerate:",				"OrderedDictionaryTest>>#should:enumerate:and:",				"OupsDebuggerSystem>>#performPreDebugActionsIn:",				"PRCodeblockStylerExtensions class>>#loadExternalImageFromURL:errorText:",				"PRObject class>>#withAllConcreteClassesDo:",				"PRParameterValue class>>#value:",				"PRRichTextComposer>>#visitFigure:",				"Paragraph>>#fastFindFirstLineSuchThat:",				"Paragraph>>#forLinesIn:do:",				"PasteUpMorph>>#windowsSatisfying:",				"PasteUpMorph>>#morphsInFrontOf:overlapping:do:",				"PasteUpMorph>>#drawSubmorphsOn:",				"Path>>#do:",				"PharoBootstrapInitialization class>>#initializeCommandLineHandlerAndErrorHandling",				"PickListPresenter>>#defaultValue:",				"PickListPresenter>>#displayBlock:",				"PickListPresenter>>#blockToPerformOnWrappers:",				"PickListPresenter>>#wrap:at:",				"PickListPresenter>>#labelClickable:",				"PluggableDictionary>>#scanForEmptySlotFor:",				"PluggableDictionary>>#scanFor:",				"PluggableSet>>#scanFor:",				"PluggableSet>>#scanForEmptySlotFor:",				"PluggableSliderMorph>>#update:",				"PluggableSliderMorph>>#scaledValue:",				"PluggableTextAttribute>>#actOnClick:for:in:editor:",				"PointerEyeElement>>#selectedObjectDo:",				"PointerEyeElement class>>#host:value:",				"PositionableStream>>#upToAnyOf:do:",				"PositionableStream class>>#with:do:",				"PragmaCollector>>#keepPragma:",				"PragmaSetting>>#inputWidget",				"PredicateBagOfo>>#onState:",				"PredicateBinary class>>#value:value:",				"PredicateFindAllo>>#onState:",				"ProcessList>>#do:",				"ProcessList>>#linksDo:",				"ProcessList>>#removeAllSuchThat:",				"ProcessList>>#collect:",				"ProcessList>>#select:",				"ProcessList>>#select:thenCollect:",				"ProcessList>>#collect:thenSelect:",				"ProcessLocalSlot>>#write:to:",				"ProcessLocalSlot>>#emitStore:",				"ProcessLocalVariable class>>#value:",				"ProcessSpecificTest>>#testLocalVariable",				"ProcessSpecificTest>>#testInheritableVariable",				"ProcessorScheduler>>#scanSchedule:startingAt:",				"ProgressBarMorph>>#decrement",				"ProgressBarMorph>>#increment",				"PropertySortFunction>>#collate:with:",				"ProtocolClient>>#checkResponse:onError:onWarning:",				"RBAbstractBlockVisitor class>>#visit:select:",				"RBAbstractBlockVisitor class>>#visit:detect:ifNone:",				"RBAbstractClass>>#allSubclassesDo:",				"RBAndEnvironment>>#selectorsForClass:do:",				"RBAndEnvironment>>#classesDo:",				"RBAssignmentNode>>#postCopy",				"RBAssignmentNode>>#replaceNode:withNode:",				"RBAssignmentNode>>#variable:value:position:",				"RBAssignmentNode>>#copyInContext:",				"RBBlockReplaceRule>>#foundMatchFor:",				"RBBrowserEnvironment>>#classesAndTraitsDo:",				"RBBrowserEnvironment>>#selectMethods:",				"RBBrowserEnvironment>>#selectorsForClass:do:",				"RBBrowserEnvironment>>#methodsDo:",				"RBBrowserEnvironment>>#traitsDo:",				"RBBrowserEnvironment>>#classesDo:",				"RBBrowserEnvironment>>#systemDictionaryClassesDo:",				"RBBrowserEnvironment>>#selectionParseTreeIntervalFor:",				"RBClassEnvironment>>#classesDo:",				"RBCommentToken class>>#value:start:stop:",				"RBCustomTransformation>>#privateTransform",				"RBDummyRefactoryTestDataApp>>#extraBlock",				"RBDummyRefactoryTestDataApp>>#testMethod1",				"RBDummyRefactoryTestDataApp>>#inlineFoo:",				"RBDummyRefactoryTestDataApp>>#called:on1:",				"RBEnglobingErrorNode>>#createValue",				"RBExtractMethodRefactoring>>#checkSingleAssignment:",				"RBExtractMethodRefactoring>>#requestExistingSelector",				"RBExtractMethodTransformation>>#generateNewMethodWith:",				"RBGenericNodeVisitor>>#visitNode:",				"RBLiteralArrayNode class>>#value:",				"RBLiteralNode class>>#value:",				"RBLiteralToken class>>#value:",				"RBLiteralValueNode>>#copyInContext:",				"RBMessageNode>>#isInlineIfNil",				"RBMessageNode>>#selector:",				"RBMethodNode class>>#errorMethodNode:errorMessage:",				"RBMoveMethodRefactoring>>#compileDelegatorMethod",				"RBNamespace>>#allReferencesToClass:do:",				"RBNamespace>>#allBehaviorsDo:",				"RBNamespace>>#allClassesDo:",				"RBNamespace2>>#convertClasses:select:using:",				"RBNode>>#acl:then:contextVariables:",				"RBNode>>#acl:contextVariables:",				"RBNodePredicatesTest>>#testSenderoForCompiledMethod",				"RBNodePredicatesTest>>#testSenderoForEmptyBlockClosure",				"RBNodePredicatesTest>>#testSenderoForIdentityBlockClosure",				"RBNodePredicatesTest>>#arguments_testSenderoBackwards",				"RBNodePredicatesTest>>#testSenderoBackwards",				"RBNodePredicatesTest>>#testSenderoForBlockClosure",				"RBNodeTheoryTest>>#testUnifyEmptyBlock",				"RBNodeTheoryTest>>#testUnifyLiteralBlock",				"RBNodeTheoryTest>>#testUnifyConsIsAtomBlock",				"RBOrEnvironment>>#selectorsForClass:do:",				"RBOrEnvironment>>#classesDo:",				"RBPackageEnvironment>>#classesDo:",				"RBParseErrorNode class>>#errorMessage:value:at:",				"RBParseErrorNodeVisitor>>#visitParseErrorNode:",				"RBParseTreeRewriter>>#visitReturnNode:",				"RBParseTreeRewriter>>#visitAssignmentNode:",				"RBParseTreeRewriter class>>#replaceLiteral:with:",				"RBParser>>#patchNegativeLiteral",				"RBParser>>#parseKeywordMessageWith:",				"RBParser>>#parseBlockArgsInto:",				"RBParserTest>>#testCascadeWithInvalidSelectorRaisesError",				"RBParserTest>>#testCascadeWithMissingSelectorRaisesError",				"RBParserTest>>#testQuerying",				"RBParserTest>>#testCreationMessageNodeFromExpression",				"RBParserTest>>#testCreationBlockNodeWithExpression",				"RBParserTest>>#testCreationCascadeNodeFromExpression",				"RBParserTest>>#testCreationProtocol",				"RBParserTest>>#testCreationLiteralArrayNodeWithExpression",				"RBParserTest>>#testGarbageForgottenDotAfterAssignement",				"RBPatternBlockNode>>#constructLookupNodeFor:in:",				"RBPatternBlockNode>>#copyInContext:",				"RBPragmaEnvironment>>#includesPragma:",				"RBProgramNode>>#nodesDo:",				"RBProgramNode>>#do:",				"RBProgramNode>>#collect:",				"RBProgramNode>>#reverseNodesDo:",				"RBProgramNodeReifyVisitor>>#visitLiteralValueNode:",				"RBProgramNodeReifyVisitor>>#visitSelectorNode:",				"RBProgramNodeReifyVisitor>>#visitLogicVariableNode:",				"RBProgramNodeReifyVisitor>>#visitSequenceNode:",				"RBProgramNodeReifyVisitor>>#visitBlockNode:",				"RBProgramNodeSendsoVisitor>>#visitLogicVariableNode:",				"RBProgramNodeSendsoVisitor>>#visitMessageNode:",				"RBProgramNodeWalkVisitor>>#visitLiteralValueNode:",				"RBProgramNodeWalkVisitor>>#visitSelectorNode:",				"RBProgramNodeWalkVisitor>>#visitLogicVariableNode:",				"RBPullUpMethodRefactoring>>#requestSuperClass",				"RBPushDownMethodRefactoring>>#requestSelectors",				"RBRefactoring>>#requestSelfArgumentName",				"RBRefactoring>>#convertClasses:select:using:",				"RBRefactoryTestDataApp>>#extraBlock",				"RBRefactoryTestDataApp>>#testMethod1",				"RBRefactoryTestDataApp>>#inlineFoo:",				"RBRefactoryTestDataApp>>#called:on1:",				"RBReplaceRule>>#canMatch:",				"RBReturnNode>>#copyInContext:",				"RBReturnNode>>#postCopy",				"RBReturnNode>>#replaceNode:withNode:",				"RBReturnNode>>#return:value:",				"RBScanner>>#scanStringSymbol",				"RBScanner>>#scanLiteral",				"RBScanner>>#scanLiteralCharacter",				"RBSelectorEnvironment>>#selectorsForClass:do:",				"RBSelectorEnvironment>>#classesDo:",				"RBSelectorNode class>>#value:start:",				"RBSequenceNode>>#addSelfReturn",				"RBSequenceNode>>#addReturn",				"RBSmalllintTestLocalMethodsSameThanTraitObject>>#executeShould:inScopeOf:withExceptionDo:",				"RBSmalllintTestObject>>#extraBlock",				"RBSmalllintTestObject>>#testMethod1",				"RBVariableEnvironment>>#environmentForClassVariable:in:",				"RFC2047MimeConverter>>#mimeDecode",				"RFEntityReification>>#genForInstanceVariableSlot",				"RFEntityReification>>#genForRBProgramNode",				"RFEntityReification>>#genForLiteralVariable",				"RFLinkReification>>#genForInstanceVariableSlot",				"RFLinkReification>>#genForRBProgramNode",				"RFLinkReification>>#genForLiteralVariable",				"RFMetaContext class>>#current",				"RFMetaContext class>>#reset",				"RFMethodReification>>#genForRBProgramNode",				"RFMethodToExecuteReification>>#genForRBMessageNode",				"RFNodeReification>>#genForRBProgramNode",				"RFOperationReification>>#genForRBAssignmentNode",				"RFOperationReification>>#genForRBLiteralValueNode",				"RFOperationReification>>#genForRBLiteralArrayNode",				"RFOperationReification>>#genForRBVariableNode",				"RFOperationReification>>#genForRBMethodNode",				"RFOriginalMethodReification>>#genForRBProgramNode",				"RFValueReification>>#genForInstanceVariableSlot",				"RFValueReification>>#genForRBLiteralValueNode",				"RFValueReification>>#genForRBLiteralArrayNode",				"RFValueReification>>#genForRBVariableNode",				"RFValueReification>>#genForLiteralVariable",				"RFVariableReification>>#genForInstanceVariableSlot",				"RFVariableReification>>#genForRBVariableNode",				"RFVariableReification>>#genForLiteralVariable",				"RGAbstractContainer>>#elementsDo:",				"RGBSlidersTest>>#testwhenChangedDo",				"RGBSlidersTest>>#testColor",				"RGBehavior>>#withAllSuperclassesDo:",				"RGBehaviorDefinition>>#allSuperclassesDo:",				"RGChunkImporter>>#if:in:includes:do:",				"RGContainer>>#allTraitsDo:",				"RGContainer>>#methodsDo:",				"RGContainer>>#traitsDo:",				"RGContainer>>#classesDo:",				"RGContainer>>#definedClassesDo:",				"RGContainer>>#allClassesDo:",				"RGReadOnlyImageBackend>>#packagesFor:do:",				"RGReadOnlyImageBackend>>#behaviorsFor:do:",				"RGReadOnlyImageBackend>>#globalVariablesFor:do:",				"RGReadOnlyImageBackend>>#classVariablesFor:do:",				"RGReadOnlyImageBackend>>#exclusionsFor:do:",				"RGReadOnlyImageBackend>>#transformationsFor:do:",				"RGReadOnlyImageBackend>>#slotsFor:do:",				"RGReadOnlyImageBackend>>#localMethodsFor:do:",				"RGReadOnlyImageBackend>>#tagsForClass:do:",				"RGReadOnlyImageBackend>>#aliasesFor:do:",				"RGReadOnlyImageBackend>>#definedBehaviorsFor:do:",				"RGReadOnlyImageBackend>>#extensionMethodsFor:do:",				"RSAbstractFlowLayout>>#doExecute:",				"RSAnimationExamples>>#example16Gris",				"RSAnimationExamples>>#example23PerlinNoise",				"RSAnimationExamples>>#example40Circles",				"RSAnimationExamples>>#example21Lines",				"RSAnimationExamples>>#example31RoundRectagles",				"RSAnimationExamples>>#example32SimpleClock",				"RSAnimationExamples>>#example33AnimatedLayout",				"RSAnimationExamples>>#example30Perlin",				"RSAnimationExamples>>#example09PerlinParticles",				"RSAnimationExamples>>#example27RSLocate",				"RSAnimationExamples>>#example36Title",				"RSAnimationExamples>>#example07CircleParty",				"RSAnimationExamples>>#example09b",				"RSAnimationExamples>>#example15SpaceDandy",				"RSAthensRenderer>>#buildSVGLinePath:",				"RSBarChartExample>>#example03TilePaint",				"RSBasicShapeExamples>>#example12BasicLine",				"RSBlockSegmentsVisitor>>#visitMoveSegment:",				"RSBlockSegmentsVisitor>>#simplePoints:",				"RSBlockSegmentsVisitor>>#visitLineSegment:",				"RSBlockSegmentsVisitor>>#visitCloseSegment:",				"RSBlockSegmentsVisitor>>#visitCubicSegment:",				"RSBoundingShape>>#matrixDo:",				"RSBoundingShape>>#computeEncompassingRectangleFor:matrix:",				"RSChartExample>>#example16Series",				"RSChartExample>>#example01Markers",				"RSChartExample>>#example21Popup",				"RSEasel>>#connectPresenters",				"RSEaselExample>>#initializeWidgets",				"RSGradientPalette class>>#roassalCanvas",				"RSHighlightable>>#highlightShapes:butKeep:",				"RSHighlightableExamples>>#example06IterateNext",				"RSInspectableExample>>#example02Inspect",				"RSLabeled>>#createLabel:",				"RSLayoutExamples>>#example20FlowLayout",				"RSLayoutExamples>>#example10Locate",				"RSLegend>>#legend",				"RSLocation>>#parentPosition:",				"RSMarker>>#setPositionTo:vector:do:",				"RSMultiBezierEdgeBuilder>>#commonShapes:with:",				"RSMultiBezierEdgeBuilder>>#commonAncestor:with:",				"RSObjectWithProperty>>#propertiesDo:",				"RSPie>>#slice:",				"RSPieExamples>>#example12RainbowPie",				"RSPieExamples>>#example24ManyPies",				"RSPieExamples>>#example23RotatedAnimation",				"RSSVGPath>>#computePolygons",				"RSSequentialAnimation>>#currentDo:",				"RSShape>>#borderDo:",				"RSShapeExamples>>#example05CapStyles",				"RSShapeExamples>>#example30EdgesToChildren",				"RSShapeExamples>>#example17Labeled",				"RSShapeExamples>>#example41Butterfly",				"RSShapeExamples>>#example06JoinStyles",				"RSShapeExamples>>#example03LinePath",				"RSShapeExamples>>#example26AnimatedPopup",				"RSShapeFactory class>>#shapeFromString:",				"RSSunburstExamples>>#example08SunburstExplorer",				"RSTextExtents>>#printOn:",				"RSTransformable>>#updateHandles:",				"RadioButtonGroup>>#canDeselectByClick:",				"RadioButtonGroupPresenter>>#canDeselectByClick:",				"RadioButtonGroupPresenter>>#currentActivated:",				"RadioButtonPresenter>>#canDeselectByClick:",				"RadioButtonPresenter>>#state:",				"RadioButtonPresenter>>#privateSetState:",				"ReExtraBlockRule>>#blockEvaluatingMessages",				"ReLogExceptionStrategy class>>#handle:about:forProppertiesDo:",				"ReTempVarOverridesInstVarRuleTest>>#sampleMethod:",				"ReadStream>>#upToAnyOf:do:",				"Rectangle>>#allAreasOutsideList:startingAt:do:",				"ReferenceFinder>>#searchForObject",				"ReferenceFinder>>#processLinkTo:from:",				"ReflectiveMethod>>#generatePrimitiveWrapper",				"ReflectivityControlTest>>#testFailingDoubleRWInstead",				"ReflectivityControlTest>>#testFailingDoubleRWInsteadSimplified",				"ReflectivityExamples>>#exampleBlockWithArg",				"ReflectivityReificationTest>>#testReifyAssignmentTempOperationInstead",				"ReflectivityReificationTest>>#testReifyReceiverOnSendWithArguments",				"ReflectivityReificationTest>>#testReifyReceiverOnSendWithArgumentsAfter",				"ReflectivityReificationTest>>#testReifyAssignmentClassVarOperationInstead",				"ReflectivityReificationTest>>#testReifyTempOperationAfter",				"ReflectivityReificationTest>>#testLiteralOperationAfter",				"ReflectivityReificationTest>>#testReifyAssignmentSlotOperationInstead",				"ReflectivityReificationTest>>#testLiteralValueAfter",				"ReflectivityReificationTest>>#testReifyTempOperation",				"ReflectivityReificationTest>>#testLiteralValueBefore",				"ReflectivityReificationTest>>#testReifyAssignmentSlotOperationBefore",				"ReflectivityReificationTest>>#testReifyAssignmentTempOperationBefore",				"ReflectivityReificationTest>>#testReifyAssignmentClassVarOperationAfter",				"ReflectivityReificationTest>>#testReifyAssignmentTempOperationAfter",				"ReflectivityReificationTest>>#testReifyTempOperationInstead",				"ReflectivityReificationTest>>#testReifyAssignmentClassVarOperationBefore",				"ReflectivityReificationTest>>#testReifyAssignmentSlotOperationAfter",				"Reifier>>#reifyVars:",				"Reifier>>#forRealogCompany:",				"Reifier>>#forRealogEmployee:",				"Reifier>>#forCons:",				"Reifier>>#forRealogContract:",				"Reifier>>#forSequenceableCollection:",				"Reuse>>#onState:",				"RewriteRuleChangesBrowser>>#initializePresenters",				"RewriteRuleChangesBrowser>>#buttonOk:",				"RewriteRuleChangesBrowser>>#diffView:",				"RewriteRuleChangesBrowser>>#buttonCancel:",				"RewriteRuleChangesBrowser>>#changeTree:",				"RewriteRuleEditor>>#initializePresenters",				"RubFloatingEditorBuilder>>#withEditedContentsDo:",				"RubFloatingEditorBuilder class>>#exampleEditableStringMorph",				"RubOpeningClosingDelimiterDecorator>>#positionOfOppositeDelimiter:startingAt:in:",				"RubParagraph>>#forLinesIn:do:",				"RubPluggableTextFieldMorph>>#textChanged",				"RubScrolledTextMorph>>#whenConfigurationChanged:",				"RubScrolledTextMorph>>#drawSubmorphsOn:",				"RubSmalltalkEditor>>#findNextKeywordIn:selection:searchingForward:ifFound:",				"RubSmalltalkEditor>>#evaluate:andDo:",				"RubSmalltalkEditor>>#widenSelectionIn:selection:ifFound:",				"RubSmalltalkEditor>>#highlightEvaluateAndDo:",				"RubTextComposer>>#fastFindFirstLineSuchThat:",				"RubTextEditor>>#moveCursor:forward:specialBlock:event:",				"RubTextEditor>>#performCmdActionsWith:shifted:return:",				"RubTextEditor>>#sameColumn:newLine:forward:",				"RubTextEditor>>#dispatchEnterOn:return:",				"RubTextFieldMorph>>#entryCompletion:",				"RubTextSegmentMorph>>#mouseDownOnIcon:",				"Run>>#onState:",				"RunArray>>#fillFrom:with:",				"RunArray>>#select:",				"RunArray>>#runsFrom:to:do:",				"RunArray>>#findFirst:",				"RunArray>>#count:",				"RunArray>>#do:",				"RunArray>>#reverseDo:",				"RunArray>>#findLast:",				"RunArray>>#detectSum:",				"RxMatchOptimizer>>#predicateTester",				"RxMatchOptimizer>>#nonPredicateTester",				"RxMatcher>>#matchesOnStream:do:",				"RxMatcher>>#matchesOnStream:collect:",				"RxMatcher>>#copyStream:to:translatingMatchesUsing:",				"RxMatcher>>#matchesIn:collect:",				"RxParser>>#ifSpecial:then:",				"RxmPredicate>>#matchAgainst:",				"RxsCharSet>>#predicatePartPredicate",				"RxsCharSet>>#predicateIgnoringCase:",				"RxsPredicate>>#value:",				"SBRAL>>#tree:",				"SBRAL>>#at:association:ifPresent:ifAbsent:",				"STONReader>>#parseConstantDo:",				"STONReader>>#stringStreamContents:",				"STONTestAssociation>>#value:",				"STONWriter>>#writeObject:streamShortList:",				"STONWriter>>#writeObject:streamMap:",				"STONWriter>>#writeObject:streamList:",				"STONWriterTest>>#testReferenceSharingError",				"STONWriterTest>>#testReferenceSharingIgnore",				"Schedule>>#between:and:do:",				"ScrollPane>>#scrollBy:",				"SearchableTree>>#roots:",				"SelectEntity>>#entity:",				"SelectEntity>>#possibleEntities:",				"SelectEntity>>#displaySymbol:",				"SelectEntity>>#selectDialog:",				"SelectEntity>>#ghostText:",				"SelectVisitor>>#visitReference:",				"SelectionValueHolder>>#reset",				"SequenceableCollection>>#replace:",				"SequenceableCollection>>#reject:thenDo:",				"SequenceableCollection>>#readStreamDo:",				"SequenceableCollection>>#collect:thenReject:",				"SequenceableCollection>>#select:thenCollect:",				"SequenceableCollection>>#sortedAs:",				"SequenceableCollection>>#do:",				"SequenceableCollection>>#reject:",				"SequenceableCollection>>#permutationsStartingAt:do:",				"SequenceableCollection>>#detectIndex:ifNone:",				"SequenceableCollection>>#asValueHolder",				"SequenceableCollection>>#combinationsAt:in:after:do:",				"SequenceableCollection>>#running:of:",				"SequenceableCollection>>#from:to:do:",				"SequenceableCollection>>#allButLastDo:",				"SequenceableCollection>>#select:thenDo:",				"SequenceableCollection>>#reject:thenCollect:",				"SequenceableCollection>>#max:",				"SequenceableCollection>>#findFirst:",				"SequenceableCollection>>#asDigitsAt:in:do:",				"SequenceableCollection>>#piecesCutWhere:do:",				"SequenceableCollection>>#flatCollect:",				"SequenceableCollection>>#reverseDo:",				"SequenceableCollection>>#collect:thenSelect:",				"SequenceableCollection>>#do:without:",				"SequenceableCollection>>#writeStreamDo:",				"SequenceableCollection>>#groupsOf:atATimeCollect:",				"SequenceableCollection>>#do:separatedBy:",				"SequenceableCollection>>#select:",				"SequenceableCollection>>#collect:",				"SequenceableCollection>>#findBinaryIndex:do:ifNone:",				"SequenceableCollection>>#findBinary:do:ifNone:",				"SequenceableCollection>>#groupByRuns:",				"SequenceableCollection>>#groupsOf:atATimeDo:",				"SequenceableCollection>>#collect:from:to:",				"SequenceableCollection>>#allButFirstDo:",				"SequenceableCollection>>#findLast:",				"SequenceableCollection class>>#new:streamContents:",				"SequenceableCollection class>>#streamContents:limitedTo:",				"Set>>#do:",				"Set>>#collect:",				"Set>>#max:",				"SettingNode>>#deeplySelect:in:",				"SettingNode>>#deeplyDetect:",				"SexpTheory>>#nilo",				"ShAbstractClassChangeDetector>>#compareClass",				"ShiftClassInstaller>>#make:",				"ShiftJISTextConverter>>#nextPut:toStream:",				"ShiftJISTextConverter>>#sjisKatakanaFor:",				"ShortcutReminder>>#positionShortcut:",				"ShortcutReminder>>#pointSize",				"SimpleHierarchicalListMorph>>#selectionIndex:",				"SimpleHierarchicalListMorph>>#expandAll:except:",				"SimpleServiceEntry>>#getArgumentsFrom:",				"SindarinDebuggerTest>>#helperMethod17:",				"Slider>>#descending:",				"Slider>>#setValue:",				"SliderInput>>#initializePresenter",				"SliderInput>>#value:",				"SliderInput class>>#example",				"SliderPresenter>>#min:",				"SliderPresenter>>#reset",				"SliderPresenter>>#quantum:",				"SliderPresenter>>#value:",				"SliderPresenter>>#absoluteValue:",				"SliderPresenter>>#label:",				"SliderPresenter>>#max:",				"SliderPresenter>>#initialize",				"SliderPresenterTest>>#testReset",				"SlotClassBuilderTest>>#make:",				"SmallDictionary>>#associationsDo:",				"SmallDictionary>>#select:",				"SmallDictionary>>#valuesDo:",				"SmallDictionary>>#collect:",				"SmallDictionary>>#at:update:initial:",				"SmallDictionary>>#keysDo:",				"SmallDictionary>>#associationsSelect:",				"SmalltalkImage>>#newSpecialObjectsArray",				"SmalltalkImage>>#logStdErrorDuring:",				"SmalltalkImage>>#logStdOutDuring:",				"SmalltalkImage>>#logDuring:",				"SortedCollection>>#collect:",				"SortedCollection>>#groupedBy:",				"SourceFileArray>>#readStreamAtFileIndex:atPosition:ifPresent:ifAbsent:",				"SourceFileArray>>#readOnlyDo:",				"SourceFileArray>>#changeRecordsFrom:className:isMeta:do:",				"SourceFileArray>>#changeRecordsFor:detect:",				"SourceFileArray>>#changesWriteStreamDo:",				"SourceFileBufferedReadWriteStream class>>#on:do:",				"Sp1MorphicAdapter>>#basicApplyScript",				"Sp1RoassalPresenter>>#script:",				"SpAbstractButtonPresenter>>#icon:",				"SpAbstractButtonPresenter>>#label:",				"SpAbstractButtonPresenter>>#initialize",				"SpAbstractFormButtonPresenter>>#deactivationAction:",				"SpAbstractFormButtonPresenter>>#activationAction:",				"SpAbstractFormButtonPresenter>>#labelClickable:",				"SpAbstractFormButtonPresenter>>#state:",				"SpAbstractFormButtonPresenter>>#label:",				"SpAbstractFormButtonPresenter>>#initialize",				"SpAbstractListPresenter>>#itemFilter:",				"SpAbstractListPresenter>>#contextMenu:",				"SpAbstractMorphicAdapter>>#installKeyDownEvent:to:",				"SpAbstractMorphicAdapter>>#installKeyUpEvent:to:",				"SpAbstractMorphicAdapter>>#installMouseLeaveEvent:to:",				"SpAbstractMorphicAdapter>>#installMouseUpEvent:to:",				"SpAbstractMorphicAdapter>>#installMouseDownEvent:to:",				"SpAbstractMorphicAdapter>>#installMouseMoveEvent:to:",				"SpAbstractMorphicAdapter>>#installMouseEnterEvent:to:",				"SpAbstractPresenter>>#withWindowDo:",				"SpAbstractTextPresenter>>#contextMenu:",				"SpAbstractTextPresenter>>#initialize",				"SpAbstractTextPresenter>>#text:",				"SpAbstractTextPresenter>>#hasUnacceptedEdits:",				"SpAbstractTextPresenter>>#wantsVisualFeedback:",				"SpAbstractTextPresenter>>#placeholder:",				"SpAbstractTextPresenter>>#askBeforeDiscardingEdits:",				"SpAbstractTextPresenter>>#selectionInterval:",				"SpAbstractTextPresenter>>#readSelectionBlock:",				"SpAbstractTreeSelectionMode>>#clearSelection",				"SpAbstractTreeSelectionMode>>#initialize",				"SpAbstractWidgetPresenter>>#wantDropBlock:",				"SpAbstractWidgetPresenter>>#acceptDropBlock:",				"SpAbstractWidgetPresenter>>#borderWidth:",				"SpAbstractWidgetPresenter>>#enabled:",				"SpAbstractWidgetPresenter>>#traverseInFocusOrderDo:excluding:",				"SpAbstractWidgetPresenter>>#help:",				"SpAbstractWidgetPresenter>>#borderColor:",				"SpAbstractWidgetPresenter>>#withAdapterPerformOrDefer:",				"SpAbstractWidgetPresenter>>#initialize",				"SpAbstractWidgetPresenter>>#dragTransformationBlock:",				"SpAbstractWidgetPresenter>>#dragEnabled:",				"SpAbstractWidgetPresenter>>#traversePresentersDo:excluding:",				"SpAbstractWidgetPresenter>>#transferBlock:",				"SpAbstractWidgetPresenter>>#color:",				"SpAbstractWidgetPresenter>>#dropEnabled:",				"SpAthensPresenter>>#surfaceExtent:",				"SpAthensPresenter>>#drawBlock:",				"SpAthensPresenter>>#contextMenu:",				"SpBaseTest>>#assertWith:timesRaisedEvent:inPresenter:whenDoing:",				"SpBoxLayout>>#addLast:withConstraints:",				"SpBoxLayoutAlignmentExample>>#initializePresenters",				"SpBoxLayoutExample>>#initializePresenters",				"SpBoxLayoutReplacePresenterExample>>#initializePresenters",				"SpButtonPresenter>>#font:",				"SpButtonPresenter>>#contextMenu:",				"SpButtonPresenter>>#action:",				"SpButtonPresenter>>#shortcut:",				"SpButtonPresenter>>#initialize",				"SpButtonPresenter>>#state:",				"SpButtonPresenter>>#performAction",				"SpButtonPresenter>>#askBeforeChanging:",				"SpCodePopoverErrorPresenter>>#initializePresenters",				"SpCodePopoverPrintPresenter>>#initializePresenters",				"SpCodePresenter>>#triggerSubmitAction",				"SpCodePresenter>>#lineNumbers:",				"SpCodePresenter>>#syntaxHighlight:",				"SpCodePresenter>>#basicInteractionModel:",				"SpCodeSelectionCommand>>#evaluate:andDo:",				"SpCollectionListModel>>#sortingBlock:",				"SpCommand>>#buildPresenter",				"SpCommandGroup>>#asMenuPresenterWith:",				"SpCommandGroup>>#asMenuBarPresenterWith:",				"SpCommandGroup>>#asToolbarPresenterWith:",				"SpComposablePresenterWithModelTest>>#testUpdateModelWithValueHolder",				"SpComposablePresenterWithModelTest>>#testModelSettingValueHolderToValueHolder",				"SpComposablePresenterWithModelTest>>#testModelSettingValueHolderToModel",				"SpDatePresenter>>#initialize",				"SpDatePresenter>>#display:",				"SpDatePresenter>>#date:",				"SpDemoStandaloneFormPresenter>>#fillFormWithWorkingModel",				"SpDiffPresenter>>#showOnlySource:",				"SpDiffPresenter>>#showOptions:",				"SpDiffPresenter>>#rightLabel:",				"SpDiffPresenter>>#showOnlyDestination:",				"SpDiffPresenter>>#contextClass:",				"SpDiffPresenter>>#leftLabel:",				"SpDiffPresenter>>#rightText:",				"SpDiffPresenter>>#leftText:",				"SpDiffPresenter>>#initialize",				"SpDropListPresenter>>#initialize",				"SpDropListPresenter>>#iconBlock:",				"SpDropListPresenter>>#display:",				"SpDynamicPresenter>>#layout:",				"SpDynamicSpecExample>>#object:",				"SpDynamicSpecExample>>#open:",				"SpEmptyPresenter>>#layout:",				"SpExecutableLayout>>#add:withConstraints:",				"SpFTColumn>>#readObject:",				"SpFilteringListPresenter>>#filterListItems:",				"SpGridLayout>>#column:withConstraints:",				"SpGridLayout>>#row:withConstraints:",				"SpGridLayoutExample>>#widgetBuilt:",				"SpImagePresenter>>#initialize",				"SpImagePresenter>>#image:",				"SpImagePresenter>>#autoScale:",				"SpImagePresenter>>#action:",				"SpImagePresenter>>#switchAutoscale",				"SpIndeterminatedProgressBarMorph>>#step",				"SpLabelPresenter>>#initialize",				"SpLabelPresenter>>#label:",				"SpLabelledSliderInput>>#value:",				"SpLabelledSliderInput class>>#setUpExample:",				"SpLinkPresenter>>#label:",				"SpLinkPresenter>>#action:",				"SpListPresenter>>#icons:",				"SpListPresenter>>#enableSearch",				"SpListPresenter>>#displayIcon:",				"SpListPresenter>>#displayValueFor:",				"SpListPresenter>>#headerTitle:",				"SpListPresenter>>#disableSearch",				"SpListPresenter>>#initialize",				"SpListPresenter>>#hideHeaderTitle",				"SpListPresenter>>#display:",				"SpMenuButtonPresenter>>#menu:",				"SpMenuGroupPresenter>>#autoRefresh:",				"SpMenuGroupPresenter>>#addItem:",				"SpMenuItemPresenter>>#description:",				"SpMenuItemPresenter>>#icon:",				"SpMenuItemPresenter>>#initialize",				"SpMenuItemPresenter>>#name:",				"SpMenuPresenter>>#title:",				"SpMenuPresenter>>#autoRefresh:",				"SpMenuPresenter>>#addGroup:",				"SpMillerActivation class>>#on:",				"SpMillerColumnPresenter>>#withoutHorizontalScrollBar",				"SpMillerColumnPresenter>>#withHorizontalScrollBar",				"SpMillerColumnPresenter>>#newPresenterFor:",				"SpMillerColumnPresenter>>#initializePresenters",				"SpMillerLayout>>#visiblePages:",				"SpMockMenu>>#shown:",				"SpMockMenu>>#initialize",				"SpMockMillerPresenter>>#activate",				"SpModalWindowPresenter>>#closeOnBackdropClick:",				"SpModalWindowPresenter>>#initialize",				"SpMorphPresenter>>#morph:",				"SpMorphicSliderAdapter>>#buildWidget",				"SpMorphicSliderAdapter>>#value:",				"SpMorphicTableCellBuilder>>#visitLinkColumn:",				"SpMultipleSelectionMode>>#selectIndexes:",				"SpMultipleSelectionMode>>#initialize",				"SpNotebookPage>>#layoutSpec:",				"SpNotebookPage>>#icon:",				"SpNotebookPage>>#title:",				"SpNotebookPresenter>>#traverseInFocusOrderDo:excluding:",				"SpNotebookPresenter>>#selectPage:",				"SpNumberInputFieldPresenter>>#minimum:",				"SpNumberInputFieldPresenter>>#climbRate:",				"SpNumberInputFieldPresenter>>#whenNumberChangedDo:",				"SpNumberInputFieldPresenter>>#digits:",				"SpNumberInputFieldPresenter>>#maximum:",				"SpNumberInputFieldPresenter>>#numberType:",				"SpObservablePoint>>#x:",				"SpObservableSlot>>#emitStore:",				"SpObservableSlot>>#write:to:",				"SpPaginatorExample>>#initializePresenters",				"SpPaginatorMorph>>#numberOfPagesShown:",				"SpPaginatorMorph>>#basicSelectPage:",				"SpPaginatorPageMorph>>#mouseDown:",				"SpPaginatorPresenter>>#selectPage:",				"SpPaginatorPresenter>>#visiblePages:",				"SpPaginatorPresenter>>#dragging:",				"SpPanedLayout>>#add:withConstraints:position:",				"SpPopoverPresenter>>#presenter:",				"SpPresenter>>#initialize",				"SpPresenter>>#show",				"SpPresenter>>#basicBuildAdapterWithSpecLayout:",				"SpPresenter>>#extent:",				"SpPresenter>>#hide",				"SpPresenter>>#layout:",				"SpPresenter>>#presentersDo:",				"SpPresenter>>#visibleIf:",				"SpPresenter>>#traversePresentersDo:excluding:",				"SpPresenter>>#initializePrivateValueHolders",				"SpPresenterSelectorPresenter>>#initializePresenter",				"SpPresenterWithModel>>#model:",				"SpProgressBarFixed>>#value:",				"SpProgressBarFixed>>#customizeMorphicBar:",				"SpProgressBarFixed>>#initialize",				"SpProgressBarFixed class>>#value:",				"SpProgressBarPresenter>>#fixedAt:",				"SpProgressBarProgressing>>#customizeMorphicBar:",				"SpProgressBarProgressing>>#currentValue:",				"SpProgressBarProgressing>>#initialize",				"SpRGBSlidersTest>>#testwhenChangedDo",				"SpRGBSlidersTest>>#testColor",				"SpRadioButtonPresenter>>#initialize",				"SpRichTextPresenter>>#textStyler",				"SpRichTextPresenter>>#textStyler:",				"SpRoassalMorphicAdapter>>#basicApplyScript",				"SpRoassalPresenter>>#script:",				"SpSelectEntity>>#entity:",				"SpSelectEntity>>#possibleEntities:",				"SpSelectEntity>>#placeholder:",				"SpSelectEntity>>#selectDialog:",				"SpSelectEntity>>#initialize",				"SpSingleSelectionMode>>#basicSelectIndex:",				"SpSingleSelectionMode>>#initialize",				"SpSliderInput>>#connectPresenters",				"SpSliderInput>>#value:",				"SpSliderInput class>>#example",				"SpSliderPresenter>>#addMark:at:",				"SpSliderPresenter>>#reset",				"SpSliderPresenter>>#quantum:",				"SpSliderPresenter>>#value:",				"SpSliderPresenter>>#absoluteValue:",				"SpSliderPresenter>>#label:",				"SpSliderPresenter>>#max:",				"SpSliderPresenter>>#initialize",				"SpSliderPresenter>>#min:",				"SpSliderPresenter>>#marks:",				"SpSliderPresenterBackendTest>>#initializeTestedInstance",				"SpSliderPresenterTest>>#testReset",				"SpStyleClass>>#addProperty:with:",				"SpStyleClass>>#addClass:with:",				"SpStyleVariable class>>#newValue:",				"SpTContextMenu>>#contextMenu:",				"SpTSearchable>>#disableSearch",				"SpTSearchable>>#enableSearch",				"SpTablePresenter>>#hideColumnHeaders",				"SpTablePresenter>>#showColumnHeaders",				"SpTablePresenter>>#enableSearch",				"SpTablePresenter>>#columns:",				"SpTablePresenter>>#disableSearch",				"SpTablePresenter>>#initialize",				"SpTablePresenter>>#addColumn:",				"SpTablePresenter>>#isResizable:",				"SpTestWorldPresenter>>#openWithSpecLayout:",				"SpTextInputFieldPresenter>>#bePassword:",				"SpTextInputFieldPresenter>>#maxLength:",				"SpTextInputFieldPresenter>>#entryCompletion:",				"SpTextInputFieldPresenter>>#initialize",				"SpTextPresenter>>#withoutEditionContextMenu",				"SpTextPresenter>>#withEditionContextMenu",				"SpTextPresenter>>#whenSubmitDo:",				"SpTextPresenter>>#initialize",				"SpTextPresenter>>#wrapWord:",				"SpTextPresenter>>#editable:",				"SpTextPresenter>>#scrollValue:",				"SpToggleButtonPresenter>>#action:",				"SpToggleButtonPresenter>>#icon:",				"SpToggleButtonPresenter>>#initialize",				"SpToolCommand>>#target",				"SpToolbarButtonPresenter>>#icon:",				"SpToolbarButtonPresenter>>#label:",				"SpToolbarPresenter>>#displayMode:",				"SpToolbarPresenter>>#initialize",				"SpToolbarPresenter>>#removeAllItems",				"SpToolbarToggleButtonPresenter>>#setSelection:",				"SpToolbarToggleButtonPresenter>>#initialize",				"SpTransferPresenter>>#from:",				"SpTransferPresenter>>#transfer:",				"SpTransmission>>#transformed:",				"SpTreeMultipleSelectionMode>>#selectPath:",				"SpTreeMultipleSelectionMode>>#selectPaths:",				"SpTreePresenter>>#showColumnHeaders",				"SpTreePresenter>>#enableSearch",				"SpTreePresenter>>#contextMenu:",				"SpTreePresenter>>#initialize",				"SpTreePresenter>>#childrenFor:",				"SpTreePresenter>>#roots:",				"SpTreePresenter>>#hideColumnHeaders",				"SpTreePresenter>>#disableSearch",				"SpTreePresenter>>#isResizable:",				"SpTreeSingleSelectionMode>>#selectPath:",				"SpTreeSingleSelectionMode>>#clearSelection",				"SpTreeTablePresenter>>#showColumnHeaders",				"SpTreeTablePresenter>>#enableSearch",				"SpTreeTablePresenter>>#contextMenu:",				"SpTreeTablePresenter>>#initialize",				"SpTreeTablePresenter>>#childrenFor:",				"SpTreeTablePresenter>>#roots:",				"SpTreeTablePresenter>>#hideColumnHeaders",				"SpTreeTablePresenter>>#columns:",				"SpTreeTablePresenter>>#disableSearch",				"SpTreeTablePresenter>>#addColumn:",				"SpTreeTablePresenter>>#isResizable:",				"SpVerticalAlignment>>#desiredVisibleRow:",				"SpVerticalAlignment>>#initialize",				"SpWindowPresenter>>#isResizeable:",				"SpWindowPresenter>>#windowClosed",				"SpWindowPresenter>>#initialPosition:",				"SpWindowPresenter>>#menu:",				"SpWindowPresenter>>#initialExtent:",				"SpWindowPresenter>>#initialize",				"SpWindowPresenter>>#window:",				"SpWindowPresenter>>#askOkToClose:",				"SpWindowPresenter>>#windowIsOpening",				"SpWindowPresenter>>#aboutText",				"SpWindowPresenter>>#presenter:",				"SpWindowPresenter>>#title:",				"SpWindowPresenter>>#windowIcon:",				"SpWindowPresenter>>#centered",				"SpWindowPresenter>>#toolbar:",				"SpWindowPresenter>>#statusBar:",				"SpWindowPresenter>>#aboutText:",				"SpecDemoDynamicMemoryGamePresenter>>#initializeWidgets",				"SpecDemoStandaloneFormPresenter>>#fillFormWithWorkingModel",				"SpecLayoutAddColumn>>#block:layoutFrame:",				"SpecLayoutAddRow>>#block:layoutFrame:",				"SpecTableLayout>>#add:wrapped:",				"SpecTableLayout>>#createColumn:",				"SpecTableLayout>>#createRow:",				"SpecTableLayout>>#add:withSpec:wrapped:",				"SptFilter>>#filter:",				"SptGeneratorBlockIterator>>#elementsDo:",				"SptIteratorsTest>>#testSubstringFilterDoesNotFetchTwiceIfTheFilterIsARefinementOfPreviousText",				"SptIteratorsTest>>#testBeginsWithFilterDoesNotFetchTwiceIfTheFilterIsARefinementOfPreviousText",				"SptSendersIterator>>#elementsDo:",				"SptTransformation>>#transform:",				"Srfi41AbstractTest>>#assert:equals:upto:modulo:",				"Srfi41AbstractTest>>#assert:equals:modulo:",				"Srfi41ArithSequenceTest>>#testSrfi41Iter",				"Srfi41FormalPowerSeries>>#value:",				"Srfi41FormalPowerSeries>>#revert",				"Srfi41FormalPowerSeriesTest>>#testOrderedTrees",				"Srfi41NumbersSequenceNaturalsIterative>>#definition",				"Srfi41Stream>>#select:",				"Srfi41Stream>>#nextWhile:",				"Srfi41Stream>>#do:",				"Srfi41Stream>>#collect:with:",				"Srfi41Stream>>#allSatisfy:",				"Srfi41Stream>>#force",				"Srfi41Stream>>#dovetailWith:",				"Srfi41StreamTest>>#testZipLongest",				"StDebugger>>#session:",				"StHaltCache>>#isActive:",				"StHaltCache>>#isActive",				"StHeaderPanel>>#initializePresenters",				"StInspectionCollector>>#pageShouldBeShown:",				"StPlaygroundPageSummaryPresenter>>#initializePresenters",				"StRemoveBreakpointCommand>>#execute",				"StReporter>>#enumerate:startAt:on:",				"StandardFileStream>>#upToAnyOf:do:",				"StandardFileStream class>>#retryWithGC:until:forFileNamed:",				"State>>#gtInspectorItemsInGLMPresentation:",				"Stream>>#do:",				"StrikeFont>>#makeControlCharsVisible",				"StrikeFont>>#ensureCleanBold",				"StrikeFont>>#alter:formBlock:",				"StrikeFont>>#fixOneWideChars",				"StrikeFont>>#fillZeroWidthSlots",				"StrikeFont>>#makeLfVisible",				"String>>#indentationIfBlank:",				"String>>#trimLeft:right:",				"String>>#setDescriptionInMetacelloVersion:",				"String>>#linesDo:",				"String>>#setTimestampInMetacelloVersion:",				"String>>#correctAgainstEnumerator:continuedFrom:",				"String>>#setBlessingInMetacelloVersion:",				"String>>#setAuthorInMetacelloVersion:",				"String class>>#initializeTypeTable",				"String class>>#value:",				"StringMorph>>#rowMorphForNode:inColumn:",				"SubscriptionRegistry>>#subscriptionsOf:do:",				"Symbol>>#setPreLoadDoItInMetacelloSpec:",				"Symbol>>#setPostLoadDoItInMetacelloSpec:",				"Symbol class>>#hasInterned:ifTrue:",				"SystemAnnouncer>>#methodAdded:configuredWith:",				"SystemDictionary>>#allTraitsDo:",				"SystemDictionary>>#allClassesAndTraitsDo:",				"SystemDictionary>>#allClassesDo:",				"SystemNavigation>>#chooseInstVarAlphabeticallyFrom:thenDo:",				"SystemNavigation>>#chooseInstVarFrom:thenDo:",				"SystemNavigation>>#allMethodsWithSourceString:matchCase:",				"SystemNavigation>>#allSentMessagesInClass:do:",				"SystemNavigation>>#allMethodsSelect:",				"SystemProgressItemMorph>>#do:",				"SystemProgressItemMorph>>#current:",				"SystemSettingLauncher>>#launch",				"SystemWindow>>#paneWithLongestSide:near:",				"SystemWindow class>>#windowsIn:satisfying:",				"TAssertable>>#executeShould:inScopeOf:withExceptionDo:",				"TGLMFastTableColumnsRenderer>>#editRowMorphForColumn:node:withIndex:",				"TKTConfiguration class>>#profile:",				"TKTFuture>>#recoverWith:",				"TKTFuture>>#deployFailure:",				"TKTFuture>>#collect:",				"TKTFuture>>#flatCollect:",				"TKTFuture>>#select:",				"TKTFuture>>#deploySuccess:",				"TKTFuture>>#on:do:",				"TKTFuture>>#andThen:",				"TKTFutureFailure>>#onFailureDo:inFuture:",				"TKTFutureSuccess>>#onSuccessDo:inFuture:",				"TKTService>>#doStop",				"TTLAssociation>>#value:",				"TTLCache>>#handleHit:ifStale:",				"TaAbstractComposition>>#initializeObject:",				"TabLabelItem>>#drawSubmorphsOn:",				"TabManagerPresenter>>#addTab:",				"TabManagerPresenter>>#whenTabSelected:",				"TabManagerPresenter>>#tabs:",				"TabManagerPresenter>>#selectedTab:",				"TabMorph>>#retrieveMorph:",				"TabPresenter>>#whenTabSelected:",				"TabPresenter>>#icon:",				"TabPresenter>>#menu:",				"TabPresenter>>#label:",				"TabPresenter>>#actions:",				"TabPresenter>>#selected:",				"TabPresenter>>#iconName:",				"TabPresenter>>#contents:",				"TabPresenter>>#retrievingBlock:",				"TabPresenter>>#closeable:",				"TableLayout>>#indexForInserting:inList:horizontal:target:",				"TelnetProtocolClient>>#lookForCode:ifDifferent:",				"TestAsserter>>#executeShould:inScopeOf:withExceptionDo:",				"TestExecutionEnvironment>>#enableService:using:",				"Text>>#removeAttributesThat:replaceAttributesThat:by:",				"Text class>>#streamContents:",				"TextComposer class>>#characterForColumnBreak",				"TextConstants class>>#initialize",				"TextConverter class>>#initializeLatin1MapAndEncodings",				"TextDiffBuilder>>#patchSequenceDoIfMatch:ifInsert:ifRemove:",				"TextEditor>>#acceptCR:return:",				"TextEditor>>#moveCursor:forward:specialBlock:event:",				"TextEditor>>#performCmdActionsWith:shifted:return:",				"TextEditor>>#sameColumn:newLine:forward:",				"TextEditor>>#dispatchEnterOn:return:",				"TextEditor>>#evaluateSelectionAndDo:",				"TextFontChange>>#forFontInStyle:do:",				"TextFontReference>>#forFontInStyle:do:",				"TextInputFieldPresenter>>#accept:",				"TextInputFieldPresenter>>#encrypted:",				"TextInputFieldPresenter>>#ghostText:",				"TextInputFieldPresenter>>#entryCompletion:",				"TextInputFieldPresenter>>#acceptOnCR:",				"TextMorph>>#anchorMorph:at:type:",				"TextMorph>>#withSuccessorsDo:",				"TextMorphForFieldView>>#localHandleKeystroke:",				"TextPresenter>>#readSelectionBlock:",				"TextPresenter>>#doItContext:",				"TextPresenter>>#text:",				"TextPresenter>>#isCodeCompletionAllowed:",				"TextPresenter>>#isForSmalltalkCode:",				"TextPresenter>>#doItReceiver:",				"TextPresenter>>#hasUnacceptedEdits:",				"TextPresenter>>#wantsVisualFeedback:",				"TextPresenter>>#aboutToStyleBlock:",				"TextPresenter>>#acceptBlock:",				"TextPresenter>>#aboutToStyle:",				"TextPresenter>>#behavior:",				"TextPresenter>>#menuHolder:",				"TextPresenter>>#accept",				"TextPresenter>>#autoAccept:",				"TextPresenter>>#accept:notifying:",				"TextPresenter>>#askBeforeDiscardingEdits:",				"TextPresenter>>#setSelection:",				"TextPresenter>>#scrollValue:",				"TheLittleProver>>#cdrOfConsº",				"TheLittleProver>>#unifyº",				"TheLittleProverTest>>#expectedRBNode_chapter_02_frame_7",				"TheLittleProverTest>>#expectedRBNode_chapter_02_frame_12",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_46_variablesBindingManually",				"TheLittleProverTest>>#expectedRBNode_chapter_01_frame_55",				"TheLittleProverTest>>#expectedRBNode_chapter_01_frame_56",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_46_variablesBindingByEqualSameº",				"Timespan>>#every:do:",				"Timespan>>#do:with:when:",				"ToggleMenuItemShortcutWithSymbol class>>#createSymbolTable",				"TonelFileSystemUtils class>>#readStreamFor:do:",				"TonelFileSystemUtils class>>#readStreamFor:in:do:",				"TonelParser>>#try:onSuccess:onFailure:",				"TonelRepository>>#readStreamForFileNamed:do:",				"ToolRegistry>>#using:do:",				"TraitMethodDescription>>#methodsDo:",				"TransferPresenter>>#from:",				"TransferPresenter>>#transfer:",				"TreeColumnPresenter>>#headerIcon:",				"TreeColumnPresenter>>#headerAction:",				"TreeColumnPresenter>>#initialWidth:",				"TreeColumnPresenter>>#headerFont:",				"TreeColumnPresenter>>#headerLabel:",				"TreeColumnPresenter>>#container:",				"TreeColumnPresenter>>#displayBlock:",				"TreeColumnPresenter>>#resizable:",				"TreeNodePresenter>>#hasContentToShow:",				"TreeNodePresenter>>#icon:",				"TreeNodePresenter>>#childNodeClass:",				"TreeNodePresenter>>#lastClicked:",				"TreeNodePresenter>>#matchTokenFilter:",				"TreeNodePresenter>>#container:",				"TreeNodePresenter>>#parentNode:",				"TreeNodePresenter>>#mouseDownAction:",				"TreeNodePresenter>>#matchTokenFilterBlock:",				"TreeNodePresenter>>#hasChildren:",				"TreeNodePresenter>>#isExpanded:",				"TreeNodePresenter>>#children:",				"TreeNodePresenter>>#content:",				"TreeNodePresenter>>#iconName:",				"TreeNodePresenter>>#selected:",				"TreePresenter>>#doubleClick:",				"TreePresenter>>#keyStrokeAction:",				"TreePresenter>>#hasChildrenBlock:",				"TreePresenter>>#menu:",				"TreePresenter>>#selectedItems:",				"TreePresenter>>#displayBlock:",				"TreePresenter>>#autoDeselection:",				"TreePresenter>>#iconBlock:",				"TreePresenter>>#selectionChanged:",				"TreePresenter>>#whenSelectedItemChanged:",				"TreePresenter>>#autoMultiSelection:",				"TreePresenter>>#isCheckList:",				"TreePresenter>>#updateTree",				"TreePresenter>>#columnInset:",				"TreePresenter>>#allowMenuOnNoItem:",				"TreePresenter>>#oddRowColor:",				"TreePresenter>>#autoRefreshOnExpand:",				"TreePresenter>>#roots:",				"TreePresenter>>#columns:",				"TreePresenter>>#multiSelection:",				"TreePresenter>>#rootNodeHolder:",				"TreePresenter>>#removeOnlyLastSelected:",				"TreePresenter>>#preferedPaneColor:",				"TreePresenter>>#resizerWidth:",				"TreePresenter>>#highlightedItem:",				"TreePresenter>>#rowInset:",				"TreePresenter>>#evenRowColor:",				"TreePresenter>>#childrenBlock:",				"TreePresenter class>>#exampleWithCustomColumnsAndNodes",				"TreePresenter class>>#exampleWithCustomColumnsAndNodesAndChildren",				"TwoInARowStar>>#waddle:",				"TwoInARowStar>>#tree:",				"TwoInARowStar>>#getNext:",				"UITheme>>#chooseColorIn:title:color:for:",				"UITheme>>#alertIn:text:title:configure:",				"UITheme>>#centeredAlertIn:text:title:configure:",				"UITheme>>#chooseFullFileNameIn:title:patterns:path:preview:",				"UTF16TextConverter>>#charFromStream:withFirst:",				"UTF16TextConverter>>#next16BitValue:toStream:",				"UTF8TextConverter>>#nextPut:toStream:",				"UTF8TextConverter>>#nextFromStream:",				"UTF8TextConverterTest>>#testPutSingle4ByteEncodedCharacter",				"UTF8TextConverterTest>>#testPutSingle3ByteEncodedCharacter",				"UTF8TextConverterTest>>#testPutSingleCharacterBinary",				"UndefinedObject>>#subclassesDo:",				"UndefinedObject>>#setPreLoadDoItInMetacelloSpec:",				"UndefinedObject>>#setPostLoadDoItInMetacelloSpec:",				"UndefinedObject class>>#allInstancesDo:",				"Unicode class>>#parseUnicodeDataFrom:",				"Unicode class>>#value:",				"Unicode class>>#toLowercaseString:",				"Unicode class>>#toUppercase:",				"Unicode class>>#parseCaseMappingFrom:",				"Unicode class>>#charFromUnicode:",				"Unicode class>>#toUppercaseString:",				"Unicode class>>#toLowercase:",				"Unicode class>>#toCasefold:",				"UnicodeTest>>#aRandomSelectionOfCodePointsDo:",				"UnicodeTest>>#aRandomSelectionOfCharactersDo:",				"Unifier>>#forObject:forObject:",				"Unifier>>#forSequenceableCollection:forSequenceableCollection:",				"Unifier>>#forRealogContract:forRealogContract:",				"UnionFind>>#link:with:",				"UnixEnvironment>>#at:encoding:ifPresent:",				"UnixEnvironment>>#rawAt:ifPresent:",				"VMWorldRenderer>>#drawDuring:",				"ValueLink>>#with:collect:",				"ValueLink class>>#carBlock:cdrStream:",				"ValueLink class>>#value:",				"VariableBreakpointTest>>#testScopeTo",				"WaitfreeQueue>>#flushAllSuchThat:",				"WaitfreeQueue>>#nextOrNilSuchThat:",				"WaitfreeQueue>>#flush:",				"Walker>>#forRealogCompany:",				"Walker>>#forRealogEmployee:",				"Walker>>#forCons:",				"Walker>>#forRealogContract:",				"Walker>>#forSequenceableCollection:",				"WeakIdentityKeyDictionary>>#valuesDo:",				"WeakKeyDictionary>>#associationsDo:",				"WeakKeyDictionary>>#overridingAt:put:",				"WeakKeyDictionary>>#at:put:",				"WeakKeyDictionary>>#allAssociationsDo:",				"WeakKeyDictionary>>#noCheckNoGrowFillFrom:",				"WeakKeyDictionary>>#valuesDo:",				"WeakKeyDictionary>>#expiredValuesDo:",				"WeakKeyToCollectionDictionary>>#noCheckNoGrowFillFrom:",				"WeakKeyToCollectionDictionary>>#noCheckAddForRehash:",				"WeakMessageSend>>#cull:",				"WeakRegistryTest>>#testGrowingByAHighPriorityProcessDoesntLeak",				"WeakRegistryTest>>#testGrowingDoesntLeak",				"WeakRegistryTest>>#testRemovingByAHighPriorityProcessDoesntLeak",				"WeakRegistryTest>>#testFinalization",				"WeakRegistryTest>>#testRemovingDoesntLeak",				"WeakSet>>#do:",				"WeakSet>>#do:after:",				"WeakSet>>#collect:",				"WeakValueAssociation>>#key:value:",				"WeakValueDictionary>>#associationsDo:",				"WeakValueDictionary>>#at:put:",				"WeakValueDictionary>>#valuesDo:",				"WelcomeHelp class>>#bookName",				"WideCharacterSet>>#bitmap:do:",				"WideCharacterSet>>#do:",				"WideStringTest>>#testAtPut",				"WideStringTest>>#testFindSubstring",				"WideStringTest>>#testBeginsWith",				"WideSymbol>>#at:",				"WidgetExamples class>>#exampleColorControls",				"WidgetExamples class>>#exampleGroups",				"WidgetExamples class>>#colorControls",				"WidgetExamples class>>#exampleWindowWithToolbars",				"WidgetExamples class>>#exampleOtherControls",				"WidgetExamples class>>#exampleBasicControls",				"WindowPresenter>>#isResizeable:",				"WindowPresenter>>#model:",				"WindowPresenter>>#windowIsClosing",				"WindowPresenter>>#openWithSpecLayout:",				"WindowsStore>>#directoryAt:nodesDo:",				"WorkingSession>>#runList:do:",				"Workspace>>#addModelItemsToWindowMenu:",				"WorldState>>#runLocalStepMethodsIn:",				"WorldState>>#triggerAlarmsBefore:",				"WriteBarrierTest>>#testObject:initialState:tuples:setReadOnlyBlock:",				"ZipArchive>>#extractAllTo:informing:overwrite:",				"ZnBufferedReadStream class>>#on:do:",				"ZnBufferedStreamByteTest>>#testInt16Aliases",				"ZnBufferedStreamByteTest>>#testInt32Aliases",				"ZnBufferedWriteStream class>>#on:do:",				"ZnByteEncoder class>>#parseUnicodeOrgSpec:",				"ZnCharacterEncoder>>#nextFromStream:",				"ZnCharacterEncoderTest>>#testUTF8EncoderAuto",				"ZnCharacterEncoderTest>>#testUTF8EncoderWide",				"ZnCharacterEncoderTest>>#testUTF32EncoderWide",				"ZnClient>>#readResponse",				"ZnClient>>#contents",				"ZnClient>>#contents:",				"ZnClient>>#prepareRequest",				"ZnClientTest>>#testCookies",				"ZnCookie>>#fromString:",				"ZnCookie class>>#name:value:",				"ZnDefaultServerDelegate>>#handleRequest:",				"ZnEndianessReadWriteStream class>>#on:do:",				"ZnEntityTest>>#testWritingApplicationUrlEncodingWithTextEncodingUtf8",				"ZnEntityTest>>#testWritingApplicationUrlEncodingWithTextEncodingLatin1",				"ZnFastLineReader>>#streamContents:",				"ZnFastLineReader>>#linesDo:",				"ZnFileSystemUtils class>>#newBinaryFileNamed:do:",				"ZnHtmlOutputStream class>>#streamContents:",				"ZnPositionableReadStream class>>#on:do:",				"ZnRequest>>#session",				"ZnResponseTest>>#testCookie",				"ZnResponseTest>>#testCookies",				"ZnSimplifiedByteEncoder>>#characterDomain",				"ZnSimplifiedByteEncoder>>#nextFromStream:",				"ZnSimplifiedByteEncoder class>>#tablesFromSpec:",				"ZnSingleThreadedServer>>#handleRequest:timing:",				"ZnSingleThreadedServer>>#readRequest:timing:",				"ZnUTF8Encoder>>#readInto:startingAt:count:fromStream:",				"ZnUTF8Encoder class>>#initialize",				"ZnUTFEncoder>>#decodeBytes:",				"ZnValueDelegate>>#handleRequest:"			]		}	}}