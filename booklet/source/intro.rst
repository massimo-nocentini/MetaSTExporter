
Introduction 
============


When searching for a tool to document Smalltalk code, we found `Sphinx
<https://www.sphinx-doc.org/en/master/>`_ that has been developed in Python and
has the goal of documenting Python code.

For documentation, Sphinx uses to resources:

* A set of imported classes and methods that shall be used and referenced in
  the documentation; 
* A set of markup documents that represent the actual
  documentation and, where needed, refer to the imported classes and methods.

The Sphinx markup is very powerful and supports a lot of directives to
reference elements of the imported code. Via `Pygments
<https://pygments.org/>`_, it also supports syntax highlighting for several 100
languages, among them also C++, Java, and Ruby. Sphinx can deal with arbitrary
languages that support its well-defined metamodel. So to be able to use Sphinx
for Smalltalk documentation, we have to implement an exporter creating the
needed metamodel.

To provide a prototype for Smalltalk documentation, we implemented 

.. pharo:autoclass:: MetaSTExporter

Currently, the MetaSTExporter is not directly integrated in the development
environment that shall be documented. Instead, we are calling the exporter
directly via enumerating the selectors to be exported:

..
  .. pharo:autocompiledmethod::
  BaselineOfMetaSTExporter>>#manuallyExportExampleMessagesForDoc

.. code-block:: smalltalk

   MetaSTExporter new selectors: #( currentDo: value: );
   exportWithRepositoryPath: [ :aPath | aPath / 'booklet' / 'source' /
   'example-messages.json' ] ofPackage: self class package

What also is not yet provided is a first-class representation of the main
markup sheets that finally are used by the documentation builder. Instead, we
currently rely on external files. The exporter is, as shown above, configured
in a way to export the Smalltalk code to the expected position in the local
file tree. The documentation is then generated by calling a script running the
builder.

Finally, Sphinx processes the markup source files to produce an artifact
according the following supported targets

.. code-block::

    html        to make standalone HTML files
    dirhtml     to make HTML files named index.html in directories
    singlehtml  to make a single large HTML file
    pickle      to make pickle files
    json        to make JSON files
    htmlhelp    to make HTML files and an HTML help project
    qthelp      to make HTML files and a qthelp project
    devhelp     to make HTML files and a Devhelp project
    epub        to make an epub
    latex       to make LaTeX files, you can set PAPER=a4 or PAPER=letter
    latexpdf    to make LaTeX and PDF files (default pdflatex)
    latexpdfja  to make LaTeX files and run them through platex/dvipdfmx
    text        to make text files
    man         to make manual pages
    texinfo     to make Texinfo files
    info        to make Texinfo files and run them through makeinfo
    gettext     to make PO message catalogs
    changes     to make an overview of all changed/added/deprecated items
    xml         to make Docutils-native XML files
    pseudoxml   to make pseudoxml-XML files for display purposes
    linkcheck   to check all external links for integrity
    doctest     to run all doctests embedded in the documentation (if enabled)
    coverage    to run coverage check of the documentation (if enabled)


